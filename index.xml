<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Greenery&#39;s Blog Site</title>
    <link>https://Greenery-S.github.io/</link>
    <description>Recent content on Greenery&#39;s Blog Site</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 25 May 2024 03:46:15 +0800</lastBuildDate>
    <atom:link href="https://Greenery-S.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Argo Workflow 1</title>
      <link>https://Greenery-S.github.io/posts/devops/argo-workflow/argo-workflow-1/</link>
      <pubDate>Sat, 25 May 2024 03:46:15 +0800</pubDate>
      <guid>https://Greenery-S.github.io/posts/devops/argo-workflow/argo-workflow-1/</guid>
      <description>Argo Workflow (1) A lot of examples can be found here: https://github.com/argoproj/argo-workflows/tree/main/examples However, since the docker/whalesay image is no longer supported, many examples cannot run, and you need to build an image to replace it.&#xA;1 Argo CLI argo submit hello-world.yaml # submit a workflow spec to Kubernetes argo list # list current workflows argo get hello-world-xxx # get info about a specific workflow argo logs hello-world-xxx # print the logs from a workflow argo delete hello-world-xxx # delete workflow You can also use kubectl, but you need to specify the namespace.</description>
    </item>
    <item>
      <title>Quick Start With Self Build Image</title>
      <link>https://Greenery-S.github.io/posts/devops/argo-workflow/quick-start-with-self-build-image/</link>
      <pubDate>Sat, 25 May 2024 02:17:44 +0800</pubDate>
      <guid>https://Greenery-S.github.io/posts/devops/argo-workflow/quick-start-with-self-build-image/</guid>
      <description>A Somewhat Rocky &amp;ldquo;Quick&amp;rdquo; Start Recently, I wanted to review Argo Workflow, so I decided to start from the official documentation and follow the steps one by one. However, things didn&amp;rsquo;t go as smoothly as expected. The official docker/whalesay image is no longer supported in the latest Docker version, which has caused hundreds of hello world examples based on it to fail to run properly. So, I decided to build my own image to replace the official docker/whalesay image.</description>
    </item>
    <item>
      <title>Hash Function vs Symmetric Encryption</title>
      <link>https://Greenery-S.github.io/posts/go/encryption/hash-function-vs-symmetric-encryption/</link>
      <pubDate>Wed, 22 May 2024 23:29:47 +0800</pubDate>
      <guid>https://Greenery-S.github.io/posts/go/encryption/hash-function-vs-symmetric-encryption/</guid>
      <description>Core Differences between Symmetric Encryption and Hash Functions 1 Symmetric Encryption Purpose: Protect the confidentiality of data, preventing unauthorized access.&#xA;Working Principle: Utilizes the same key for both encryption and decryption of data.&#xA;Characteristics:&#xA;Reversibility: Decrypting ciphertext to retrieve the original data using the same key is possible. Key Management: Securely sharing the key is crucial, as data remains inaccessible without it. Applications: Secure communication, data storage, digital signatures, etc.</description>
    </item>
    <item>
      <title>Open Compare to Openfile</title>
      <link>https://Greenery-S.github.io/posts/go/memo/open-compare-to-openfile/</link>
      <pubDate>Wed, 22 May 2024 22:15:28 +0800</pubDate>
      <guid>https://Greenery-S.github.io/posts/go/memo/open-compare-to-openfile/</guid>
      <description>os.Open vs. os.OpenFile 1 Differences In Go, both os.Open and os.OpenFile are functions used to open files, but they have different usage scenarios and functionalities.&#xA;os.Open: This is a simpler function for opening files. It takes only one argument, the path to the file to be opened. It opens the file in read-only mode and returns an error if the file does not exist. file, err := os.Open(&amp;#34;example.txt&amp;#34;) if err !</description>
    </item>
    <item>
      <title>File Encryption</title>
      <link>https://Greenery-S.github.io/posts/go/encryption/file-encryption/</link>
      <pubDate>Wed, 22 May 2024 17:42:47 +0800</pubDate>
      <guid>https://Greenery-S.github.io/posts/go/encryption/file-encryption/</guid>
      <description>File Encryption code: https://github.com/Greenery-S/go-encryption/tree/master/enc_file&#xA;1 Symmetric Encryption Every step of the encryption process is reversible The same set of keys is used for encryption and decryption XOR is the simplest symmetric encryption algorithm Typical symmetric encryption algorithms: DES (Data Encryption Standard), AES (Advanced Encryption Standard)&#xA;2 Group Encryption Group encryption: The original data (plaintext) is grouped, each group is 64 bits, and when the last group is less than 64 bits, it is filled according to certain rules.</description>
    </item>
    <item>
      <title>Introduction to Clickhouse</title>
      <link>https://Greenery-S.github.io/posts/go/database/introduction-to-clickhouse/</link>
      <pubDate>Wed, 22 May 2024 15:08:40 +0800</pubDate>
      <guid>https://Greenery-S.github.io/posts/go/database/introduction-to-clickhouse/</guid>
      <description>ClickHouse code: https://github.com/Greenery-S/go-database/tree/master/clickhouse&#xA;1 Introduction ClickHouse is a columnar database management system (DBMS) for online analytical processing (OLAP).&#xA;In traditional row-based database systems (MySQL, SQL Server), data in the same row is always physically stored together. In columnar database systems (ClickHouse, HBase, Druid), data from the same column is stored together.&#xA;Key characteristics of OLAP scenarios (statistical analysis based on event tracking data):&#xA;The vast majority are read requests, and data added to the database cannot be modified.</description>
    </item>
    <item>
      <title>Introduction to Mongo</title>
      <link>https://Greenery-S.github.io/posts/go/database/introduction-to-mongo/</link>
      <pubDate>Wed, 22 May 2024 01:23:35 +0800</pubDate>
      <guid>https://Greenery-S.github.io/posts/go/database/introduction-to-mongo/</guid>
      <description>MongoDB code: https://github.com/Greenery-S/go-database/tree/master/mongo&#xA;1 Introduction Mongo is a document-oriented database, and it contrasts with relational databases as follows. Mongo&amp;rsquo;s greatest feature is its schema flexibility, meaning you can store documents with completely different structures in the same collection. This is especially useful in the early stages of a project when the table fields are not yet stable. Compared to MySQL, Mongo is better suited for storing large, low-value data. The read and write performance for large documents is better in Mongo than in MySQL.</description>
    </item>
    <item>
      <title>Be Careful When Choosing House</title>
      <link>https://Greenery-S.github.io/posts/life/singapore/be-careful-when-choosing-house/</link>
      <pubDate>Wed, 22 May 2024 00:43:27 +0800</pubDate>
      <guid>https://Greenery-S.github.io/posts/life/singapore/be-careful-when-choosing-house/</guid>
      <description>Be Careful When Choosing a Place to Stay in Singapore When you come to Singapore, be careful when choosing a place to stay.&#xA;What is a poor person&amp;rsquo;s house? I refer to those who rent out a room in their own residence.&#xA;These landlords usually have significant financial pressures. On the one hand, they bought an HDB flat but need to rent out a room to help with their mortgage payments; on the other hand, they may be very picky about tenants, leading to conflicts and an atmosphere that feels more like a student dormitory than a home.</description>
    </item>
    <item>
      <title>Introduction to Redis</title>
      <link>https://Greenery-S.github.io/posts/go/database/introduction-to-redis/</link>
      <pubDate>Sun, 19 May 2024 22:11:16 +0800</pubDate>
      <guid>https://Greenery-S.github.io/posts/go/database/introduction-to-redis/</guid>
      <description>Redis Code: https://github.com/Greenery-S/go-database/tree/master/redis&#xA;1 Introduction Redis is an in-memory data storage system. Since it is based on memory, it is fast, being 10 to 100 times faster than MySQL. To prevent data loss, data is periodically persisted to disk. Redis is deployed separately from the business application, so it can serve as a distributed cache. It supports a rich variety of data types: strings, hashes, lists, sets, and sorted sets. It supports the publish/subscribe model, where publishers send messages to specified channels, and subscribers can receive and process these messages.</description>
    </item>
    <item>
      <title>ORM Realized by Reflect</title>
      <link>https://Greenery-S.github.io/posts/go/database/orm-realized-by-reflect/</link>
      <pubDate>Sun, 19 May 2024 21:50:59 +0800</pubDate>
      <guid>https://Greenery-S.github.io/posts/go/database/orm-realized-by-reflect/</guid>
      <description>Core Technology of ORM—Reflection Tutorial, Reflection Guide: https://zhuanlan.zhihu.com/p/411313885&#xA;code: https://github.com/Greenery-S/go-database/tree/master/orm&#xA;1 Reflection What is Reflection&#xA;Reflection is the ability to inspect and modify an object’s type information and memory structure, update variables, and call methods during runtime (not compile time). When to Use Reflection&#xA;When a function’s parameter type is interface{}, and you need to determine the original type at runtime to handle different types accordingly. For example, json.Marshal(v interface{}). When you need to dynamically decide which function to call at runtime based on certain conditions, such as executing the appropriate operator function based on a configuration file.</description>
    </item>
  </channel>
</rss>
