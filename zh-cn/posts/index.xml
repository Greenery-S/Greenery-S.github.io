<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Greenery&#39;s Blog Site</title>
        <link>https://Greenery-S.github.io/zh-cn/posts/</link>
        <description>Recent content in Posts on Greenery&#39;s Blog Site</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Wed, 22 May 2024 15:08:40 +0800</lastBuildDate>
        <atom:link href="https://Greenery-S.github.io/zh-cn/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Introduction to Clickhouse</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/go/database/introduction-to-clickhouse/</link>
            <pubDate>Wed, 22 May 2024 15:08:40 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/go/database/introduction-to-clickhouse/</guid>
            <description>ClickHouse code: https://github.com/Greenery-S/go-database/tree/master/clickhouse
1 简介 ClickHouse是一个用于联机分析（OLAP）的列式数据库管理系统（DBMS）。
在传统的行式数据库系统（MySQL、SQL Server）中，处于同一行中的数据总是被物理的存储在一起。在列式数据库系统（ClickHouse、HBase、Druid）中，来自同一列的数据被存储在一起。
OLAP场景的关键特征 (基于埋点数据进行业务的统计分析):
绝大多数是读请求，已添加到数据库的数据不能修改 宽表，即每个表包含着大量的列 对于读取，从数据库中提取相当多的行，但只提取列的一小部分 查询相对较少（通常每台服务器每秒查询数百次或更少） 对于简单查询，允许延迟大约50毫秒 列中的数据相对较小：数字和短字符串（例如，每个URL 60个字节） 处理单个查询时需要高吞吐量（每台服务器每秒可达数十亿行） 事务不是必须的 2 使用方法 它的SQL语法和MySQL类似，但是有一些不同之处。
创建数据库,表：
create database test; -- json type is experimental feature set allow_experimental_object_type = 1; CREATE TABLE test.user ( user_id UInt32 comment &amp;#39;用户ID&amp;#39;, -- 用户ID name String comment &amp;#39;用户姓名&amp;#39;, -- 用户名 create_time DateTime comment &amp;#39;注册时间&amp;#39;, -- 注册时间 extra Json comment &amp;#39;附加信息&amp;#39; -- 附加信息,json可自由扩充字段 ) ENGINE = MergeTree() PRIMARY KEY (create_time); 查询数据:</description>
            <content type="html"><![CDATA[<h1 id="clickhouse">ClickHouse</h1>
<blockquote>
<p>code: <a href="https://github.com/Greenery-S/go-database/tree/master/clickhouse">https://github.com/Greenery-S/go-database/tree/master/clickhouse</a></p>
</blockquote>
<h2 id="1-简介">1 简介</h2>
<p>ClickHouse是一个用于联机分析（OLAP）的列式数据库管理系统（DBMS）。</p>
<p>在传统的行式数据库系统（MySQL、SQL Server）中，处于同一行中的数据总是被物理的存储在一起。在列式数据库系统（ClickHouse、HBase、Druid）中，来自同一列的数据被存储在一起。</p>
<p>OLAP场景的关键特征 (基于埋点数据进行业务的统计分析):</p>
<ol>
<li>绝大多数是读请求，已添加到数据库的数据不能修改</li>
<li>宽表，即每个表包含着大量的列</li>
<li>对于读取，从数据库中提取相当多的行，但只提取列的一小部分</li>
<li>查询相对较少（通常每台服务器每秒查询数百次或更少）</li>
<li>对于简单查询，允许延迟大约50毫秒</li>
<li>列中的数据相对较小：数字和短字符串（例如，每个URL 60个字节）</li>
<li>处理单个查询时需要高吞吐量（每台服务器每秒可达数十亿行）</li>
<li>事务不是必须的</li>
</ol>
<h2 id="2-使用方法">2 使用方法</h2>
<p>它的SQL语法和MySQL类似，但是有一些不同之处。</p>
<p>创建数据库,表：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">database</span> test;
</span></span><span style="display:flex;"><span>       
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- json type is experimental feature
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">set</span> allow_experimental_object_type <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>; 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> test.<span style="color:#66d9ef">user</span>
</span></span><span style="display:flex;"><span>(
</span></span><span style="display:flex;"><span>    user_id     UInt32 <span style="color:#66d9ef">comment</span> <span style="color:#e6db74">&#39;用户ID&#39;</span>,     <span style="color:#75715e">-- 用户ID
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    name        String <span style="color:#66d9ef">comment</span> <span style="color:#e6db74">&#39;用户姓名&#39;</span>,   <span style="color:#75715e">-- 用户名
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    create_time DateTime <span style="color:#66d9ef">comment</span> <span style="color:#e6db74">&#39;注册时间&#39;</span>, <span style="color:#75715e">-- 注册时间
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    extra       Json <span style="color:#66d9ef">comment</span> <span style="color:#e6db74">&#39;附加信息&#39;</span>      <span style="color:#75715e">-- 附加信息,json可自由扩充字段
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>) ENGINE <span style="color:#f92672">=</span> MergeTree()
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">PRIMARY</span> <span style="color:#66d9ef">KEY</span> (create_time);
</span></span></code></pre></div><p>查询数据:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">WITH</span>
</span></span><span style="display:flex;"><span>    toDateTime(<span style="color:#e6db74">&#39;2023-09-01&#39;</span>, <span style="color:#e6db74">&#39;UTC&#39;</span>) <span style="color:#66d9ef">AS</span> begin_day,
</span></span><span style="display:flex;"><span>    toDateTime(<span style="color:#e6db74">&#39;2023-09-08&#39;</span>, <span style="color:#e6db74">&#39;UTC&#39;</span>) <span style="color:#66d9ef">AS</span> end_day
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">SELECT</span> toDate(create_time) <span style="color:#66d9ef">AS</span> date,
</span></span><span style="display:flex;"><span>       uniq(user_id)       <span style="color:#66d9ef">AS</span> <span style="color:#f92672">`</span><span style="color:#960050;background-color:#1e0010">注册用户数</span><span style="color:#f92672">`</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">FROM</span> test.<span style="color:#66d9ef">user</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">WHERE</span> (create_time <span style="color:#f92672">&gt;=</span> begin_day)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">AND</span> (create_time <span style="color:#f92672">&lt;</span> end_day)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">GROUP</span> <span style="color:#66d9ef">BY</span> date
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">ORDER</span> <span style="color:#66d9ef">BY</span> date;
</span></span></code></pre></div><h2 id="3-go-sdk">3 Go sdk</h2>
<p>见code.</p>
<h2 id="4-制作dashboard">4 制作dashboard</h2>
<p>基于Clickhouse+grafana生成业务报表.</p>

    <img src="/images/introduction-to-clickhouse-dashboard.png"  alt="dashboard"  class="center"  style="border-radius: 0px; width: 100%;"  />


]]></content>
        </item>
        
        <item>
            <title>Introduction to Mongo</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/go/database/introduction-to-mongo/</link>
            <pubDate>Wed, 22 May 2024 01:23:35 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/go/database/introduction-to-mongo/</guid>
            <description>MongoDB code: https://github.com/Greenery-S/go-database/tree/master/mongo
1 简介 Mongo是一个面向文档存储的数据库，它跟关系型数据库的概念对比如下。 Mongo最大的特点是模式自由，即你可以将结构完全不同的文档存储同一个集合中。特别适合于业务初期，表字段不稳定的时候。 相比于MySQL，Mongo更适合存储大尺寸、低价值的数据，大文档的读写性能比MySQL好。 2 语法 use test; 切换到test库，如果没有则（创建集合时）会自动创建 show collections 查看库里有哪些集合 db.createCollection(&amp;#34;student&amp;#34;); 创建collection db.createUser({user: &amp;#34;tester&amp;#34;,pwd: &amp;#34;123456&amp;#34;, roles: [{role: &amp;#34;dbAdmin&amp;#34;, db: &amp;#34;test&amp;#34;}]});创建用户 用刚创建的tester用户身份登录： mongo --port 27017 -u &amp;#34;tester&amp;#34; -p &amp;#34;123456&amp;#34; --authenticationDatabase &amp;#34;test&amp;#34; db.student.createIndex({name:1,unique:1})在name上创建唯一索引,1表示升序，-1表示降序 db.student.dropIndex(&amp;#34; name_1_unique_1 &amp;#34;) 删除索引 db.student.getIndexes() 查看索引 db.student.insertOne({name:&amp;#34;张三&amp;#34;,city:&amp;#34;北京&amp;#34;}); 插入一条记录 db.student.insertMany([{name:&amp;#34;张三&amp;#34;,city:&amp;#34;北京&amp;#34;},{name:&amp;#34;李四&amp;#34;,gender:&amp;#34;女&amp;#34;}]) 插入多条记录 db.student.find({name:&amp;#34;张三&amp;#34;}); 查找满足条件的记录 db.student.find({}); 查看集合里的全部内容 db.student.updateOne({name:&amp;#34;张三&amp;#34;},{$set:{gender:&amp;#34;女&amp;#34;}}) 更新一条记录 db.student.updateMany({name:&amp;#34;张三&amp;#34;},{$set:{gender:&amp;#34;女&amp;#34;}}) 更新满足条件的所有记录 db.student.deleteOne({name:&amp;#34;张三&amp;#34;}); db.student.deleteMany({name:&amp;#34;张三&amp;#34;}); 删除记录 db.student.drop() 删除集合 3 Go操作Mongo 连接 func main() { ctx := context.Background() option := options.</description>
            <content type="html"><![CDATA[<h1 id="mongodb">MongoDB</h1>
<blockquote>
<p>code: <a href="https://github.com/Greenery-S/go-database/tree/master/mongo">https://github.com/Greenery-S/go-database/tree/master/mongo</a></p>
</blockquote>
<h2 id="1-简介">1 简介</h2>

    <img src="/images/introduction-to-mongo-compare-to-mysql.png"  alt="compare-to-mysql"  class="center"  style="border-radius: 0px; width: 80%;"  />


<ul>
<li>Mongo是一个面向文档存储的数据库，它跟关系型数据库的概念对比如下。</li>
<li>Mongo最大的特点是模式自由，即你可以将结构完全不同的文档存储同一个集合中。特别适合于业务初期，表字段不稳定的时候。</li>
<li>相比于MySQL，Mongo更适合存储大尺寸、低价值的数据，大文档的读写性能比MySQL好。</li>
</ul>
<h2 id="2-语法">2 语法</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>use test;  切换到test库，如果没有则（创建集合时）会自动创建
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>show collections  查看库里有哪些集合
</span></span><span style="display:flex;"><span>db.createCollection<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;student&#34;</span><span style="color:#f92672">)</span>;  创建collection
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>db.createUser<span style="color:#f92672">({</span>user: <span style="color:#e6db74">&#34;tester&#34;</span>,pwd: <span style="color:#e6db74">&#34;123456&#34;</span>, roles: <span style="color:#f92672">[{</span>role: <span style="color:#e6db74">&#34;dbAdmin&#34;</span>, db: <span style="color:#e6db74">&#34;test&#34;</span><span style="color:#f92672">}]})</span>;创建用户
</span></span><span style="display:flex;"><span>用刚创建的tester用户身份登录：
</span></span><span style="display:flex;"><span>mongo --port <span style="color:#ae81ff">27017</span> -u <span style="color:#e6db74">&#34;tester&#34;</span> -p <span style="color:#e6db74">&#34;123456&#34;</span> --authenticationDatabase <span style="color:#e6db74">&#34;test&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>db.student.createIndex<span style="color:#f92672">({</span>name:1,unique:1<span style="color:#f92672">})</span>在name上创建唯一索引,1表示升序，-1表示降序
</span></span><span style="display:flex;"><span>db.student.dropIndex<span style="color:#f92672">(</span><span style="color:#e6db74">&#34; name_1_unique_1 &#34;</span><span style="color:#f92672">)</span>  删除索引
</span></span><span style="display:flex;"><span>db.student.getIndexes<span style="color:#f92672">()</span>  查看索引
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>db.student.insertOne<span style="color:#f92672">({</span>name:<span style="color:#e6db74">&#34;张三&#34;</span>,city:<span style="color:#e6db74">&#34;北京&#34;</span><span style="color:#f92672">})</span>;    插入一条记录
</span></span><span style="display:flex;"><span>db.student.insertMany<span style="color:#f92672">([{</span>name:<span style="color:#e6db74">&#34;张三&#34;</span>,city:<span style="color:#e6db74">&#34;北京&#34;</span><span style="color:#f92672">}</span>,<span style="color:#f92672">{</span>name:<span style="color:#e6db74">&#34;李四&#34;</span>,gender:<span style="color:#e6db74">&#34;女&#34;</span><span style="color:#f92672">}])</span>      插入多条记录
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>db.student.find<span style="color:#f92672">({</span>name:<span style="color:#e6db74">&#34;张三&#34;</span><span style="color:#f92672">})</span>;     查找满足条件的记录          
</span></span><span style="display:flex;"><span>db.student.find<span style="color:#f92672">({})</span>;    查看集合里的全部内容
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>db.student.updateOne<span style="color:#f92672">({</span>name:<span style="color:#e6db74">&#34;张三&#34;</span><span style="color:#f92672">}</span>,<span style="color:#f92672">{</span>$set:<span style="color:#f92672">{</span>gender:<span style="color:#e6db74">&#34;女&#34;</span><span style="color:#f92672">}})</span>      更新一条记录
</span></span><span style="display:flex;"><span>db.student.updateMany<span style="color:#f92672">({</span>name:<span style="color:#e6db74">&#34;张三&#34;</span><span style="color:#f92672">}</span>,<span style="color:#f92672">{</span>$set:<span style="color:#f92672">{</span>gender:<span style="color:#e6db74">&#34;女&#34;</span><span style="color:#f92672">}})</span>      更新满足条件的所有记录
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>db.student.deleteOne<span style="color:#f92672">({</span>name:<span style="color:#e6db74">&#34;张三&#34;</span><span style="color:#f92672">})</span>;     db.student.deleteMany<span style="color:#f92672">({</span>name:<span style="color:#e6db74">&#34;张三&#34;</span><span style="color:#f92672">})</span>;         删除记录
</span></span><span style="display:flex;"><span>db.student.drop<span style="color:#f92672">()</span>   删除集合
</span></span></code></pre></div><h2 id="3-go操作mongo">3 Go操作Mongo</h2>
<h3 id="连接">连接</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">ctx</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">option</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">options</span>.<span style="color:#a6e22e">Client</span>().<span style="color:#a6e22e">ApplyURI</span>(<span style="color:#e6db74">&#34;mongodb://127.0.0.1:27017&#34;</span>).
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">SetConnectTimeout</span>(<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Second</span>). <span style="color:#75715e">//连接超时时长
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">//AuthSource代表Database
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">SetAuth</span>(<span style="color:#a6e22e">options</span>.<span style="color:#a6e22e">Credential</span>{<span style="color:#a6e22e">Username</span>: <span style="color:#e6db74">&#34;tester&#34;</span>, <span style="color:#a6e22e">Password</span>: <span style="color:#e6db74">&#34;123456&#34;</span>, <span style="color:#a6e22e">AuthSource</span>: <span style="color:#e6db74">&#34;test&#34;</span>})
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">client</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">mongo</span>.<span style="color:#a6e22e">Connect</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">option</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">CheckError</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">Ping</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#66d9ef">nil</span>) <span style="color:#75715e">//Connect没有返回error并不代表连接成功，ping成功才代表连接成功
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">CheckError</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">Disconnect</span>(<span style="color:#a6e22e">ctx</span>) <span style="color:#75715e">//释放链接
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><h3 id="curd">CURD</h3>
<p>见code.</p>
]]></content>
        </item>
        
        <item>
            <title>Be Careful When Choosing House</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/life/singapore/be-careful-when-choosing-house/</link>
            <pubDate>Wed, 22 May 2024 00:43:27 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/life/singapore/be-careful-when-choosing-house/</guid>
            <description>来新加坡，选择住处时要慎重 来新加坡，选择住处时要慎重。
什么是穷人的房子？我指的是那些把自住的房子出租其中一间的人。
这些房东通常经济压力较大。一方面，他们买了HDB，却需要通过出租房间来减轻贷款压力；另一方面，他们虽然敞开家门，但可能对租户非常挑剔，容易产生矛盾，最终生活得像学生宿舍一样不和谐。
让我先说说正常的租房流程：看房、交押金、入住、交月租、退房、验房、退押金。只要保证退房时的房间和入住时一样，几乎不应该扣押金。就像计算机中的“最终一致性”：你只要保证最后交房时的状态是OK的，那就没问题。我住过的网红公寓Interlace Place就是这样，房东或中介不会干涉你的正常生活。
然而，住“穷人的房子”会有所不同。房东可能会频繁查看你的房间，怀疑你是否做了什么破坏，有时甚至会侵犯你的隐私。
更令人困扰的是，有时候房东可能会因为各种原因提前向你催租。例如，我住过的一家房东，每个月都会提前15天甚至23天问我要房租，理由诸如“交学费”、“看病”、“举办宴会”等等，每个月都会出现这样的请求，希望你能理解并帮忙。
作为程序员，我注重协议和合约，所以对这些情感上的请求并不动摇，而是尽量拒绝提前支付租金，尽量平衡支持房东和保护自己的利益。
前2个月，我对房东一家非常宽容，他们多次要求提前支付部分租金，我基本都答应了。而且，我几乎每个星期有60%的时间不在房间，出去找朋友玩或者照顾我的妹妹。最终，为了期末复习，我整个月没回来。这个月回来后，我发现他们把提前交租当成了常规操作，完全不尊重我。我当即拒绝了当月的请求，并通过中介表明我的立场，希望他们能够有所收敛。
昨天，离按合同交房租还有10天，房东再次向我要100刀，但语气已经变得非常恳求。我觉得差不多了，就给了他们这一笔钱，他们非常感激。
但我感到疲惫。我不喜欢操纵人心，而且这个房子确实不适合长期租住。我联系了酒店包月的项目，决定整月租酒店。我和房东谈了这件事，知道押金可能无法全额退还，于是主动提出只要50%的押金。然而，他们真的是经济困难，求我多租一个月，把押金当做那个月的租金。我知道自己可能会有些损失，但也只能接受。
新加坡的很多人生活不易，尤其是经济困难的家庭。我们无法改变所有人的境遇，只能选择合适的住处，避免不必要的麻烦。希望每个人都能找到适合自己的生活方式。</description>
            <content type="html"><![CDATA[<h1 id="来新加坡选择住处时要慎重">来新加坡，选择住处时要慎重</h1>
<p>来新加坡，选择住处时要慎重。</p>
<p>什么是穷人的房子？我指的是那些把自住的房子出租其中一间的人。</p>
<p>这些房东通常经济压力较大。一方面，他们买了HDB，却需要通过出租房间来减轻贷款压力；另一方面，他们虽然敞开家门，但可能对租户非常挑剔，容易产生矛盾，最终生活得像学生宿舍一样不和谐。</p>
<p>让我先说说正常的租房流程：看房、交押金、入住、交月租、退房、验房、退押金。只要保证退房时的房间和入住时一样，几乎不应该扣押金。就像计算机中的“最终一致性”：你只要保证最后交房时的状态是OK的，那就没问题。我住过的网红公寓Interlace Place就是这样，房东或中介不会干涉你的正常生活。</p>
<p>然而，住“穷人的房子”会有所不同。房东可能会频繁查看你的房间，怀疑你是否做了什么破坏，有时甚至会侵犯你的隐私。</p>
<p>更令人困扰的是，有时候房东可能会因为各种原因提前向你催租。例如，我住过的一家房东，每个月都会提前15天甚至23天问我要房租，理由诸如“交学费”、“看病”、“举办宴会”等等，每个月都会出现这样的请求，希望你能理解并帮忙。</p>
<p>作为程序员，我注重协议和合约，所以对这些情感上的请求并不动摇，而是尽量拒绝提前支付租金，尽量平衡支持房东和保护自己的利益。</p>
<p>前2个月，我对房东一家非常宽容，他们多次要求提前支付部分租金，我基本都答应了。而且，我几乎每个星期有60%的时间不在房间，出去找朋友玩或者照顾我的妹妹。最终，为了期末复习，我整个月没回来。这个月回来后，我发现他们把提前交租当成了常规操作，完全不尊重我。我当即拒绝了当月的请求，并通过中介表明我的立场，希望他们能够有所收敛。</p>
<p>昨天，离按合同交房租还有10天，房东再次向我要100刀，但语气已经变得非常恳求。我觉得差不多了，就给了他们这一笔钱，他们非常感激。</p>
<p>但我感到疲惫。我不喜欢操纵人心，而且这个房子确实不适合长期租住。我联系了酒店包月的项目，决定整月租酒店。我和房东谈了这件事，知道押金可能无法全额退还，于是主动提出只要50%的押金。然而，他们真的是经济困难，求我多租一个月，把押金当做那个月的租金。我知道自己可能会有些损失，但也只能接受。</p>
<p>新加坡的很多人生活不易，尤其是经济困难的家庭。我们无法改变所有人的境遇，只能选择合适的住处，避免不必要的麻烦。希望每个人都能找到适合自己的生活方式。</p>
]]></content>
        </item>
        
        <item>
            <title>Introduction to Redis</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/go/database/introduction-to-redis/</link>
            <pubDate>Sun, 19 May 2024 22:11:16 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/go/database/introduction-to-redis/</guid>
            <description>Redis code: https://github.com/Greenery-S/go-database/tree/master/redis
1 简介 Redis是一个基于内存的数据存储系统。 基于内存，所以快，是Mysql的10到100倍。 为防止数据丢失，数据会周期性地持久化到磁盘。 Redis跟业务程序是分开部署的，所以Redis可以充当分布式缓存。 支持丰富的数据类型：字符串（String）、哈希（Hash）、列表（List）、集合（Set）和有序集合（Sorted Set）。 支持发布/订阅模式，发布者将消息发送到指定的频道，订阅者可以接收和处理这些消息。这种模式常应用于实时通信、事件驱动系统和消息队列等场景。 Redis事务太鸡肋，不建议使用。 2 发布/订阅模式 Subscriber启动之前，Channel里的消息接收不到。 广播效果. 3 分布式锁 SetNX(ctx context.Context, key string, value interface{}, expiration time.Duration) *BoolCmd SetNX如果key不存在则返回true，写入key，并设置过期时间 秒杀iphone代码示例：
func TryLock(rc *redis.Client, key string, expire time.Duration) bool { cmd := rc.SetNX(context.Background(), key, &amp;#34;anything is ok&amp;#34;, expire) if err := cmd.Err(); err == nil { return cmd.Val() } else { return false } } func ReleaseLock(rc *redis.Client, key string) { rc.</description>
            <content type="html"><![CDATA[<h1 id="redis">Redis</h1>
<blockquote>
<p>code: <a href="https://github.com/Greenery-S/go-database/tree/master/redis">https://github.com/Greenery-S/go-database/tree/master/redis</a></p>
</blockquote>
<h2 id="1-简介">1 简介</h2>
<ul>
<li>Redis是一个基于内存的数据存储系统。</li>
<li>基于内存，所以快，是Mysql的10到100倍。</li>
<li>为防止数据丢失，数据会周期性地持久化到磁盘。</li>
<li>Redis跟业务程序是分开部署的，所以Redis可以充当分布式缓存。</li>
<li>支持丰富的数据类型：字符串（String）、哈希（Hash）、列表（List）、集合（Set）和有序集合（Sorted Set）。</li>
<li>支持发布/订阅模式，发布者将消息发送到指定的频道，订阅者可以接收和处理这些消息。这种模式常应用于实时通信、事件驱动系统和消息队列等场景。</li>
<li>Redis事务太鸡肋，不建议使用。</li>
</ul>
<h2 id="2-发布订阅模式">2 发布/订阅模式</h2>
<ol>
<li>Subscriber启动之前，Channel里的消息接收不到。</li>
<li>广播效果.</li>
</ol>

    <img src="/images/introduction-to-redis-pubsub.png"  alt="pubsub"  class="center"  style="border-radius: 20px; width: 100%;"  />


<h2 id="3-分布式锁">3 分布式锁</h2>
<ol>
<li><code>SetNX(ctx context.Context, key string, value interface{}, expiration time.Duration) *BoolCmd</code></li>
<li>SetNX如果key不存在则返回true，写入key，并设置过期时间</li>
</ol>

    <img src="/images/introduction-to-redis-distributed-key.png"  alt="distributed-key"  class="center"  style="border-radius: 20px; width: 100%;"  />


<p>秒杀iphone代码示例：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">TryLock</span>(<span style="color:#a6e22e">rc</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">redis</span>.<span style="color:#a6e22e">Client</span>, <span style="color:#a6e22e">key</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">expire</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Duration</span>) <span style="color:#66d9ef">bool</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">cmd</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">rc</span>.<span style="color:#a6e22e">SetNX</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#a6e22e">key</span>, <span style="color:#e6db74">&#34;anything is ok&#34;</span>, <span style="color:#a6e22e">expire</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">cmd</span>.<span style="color:#a6e22e">Err</span>(); <span style="color:#a6e22e">err</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">cmd</span>.<span style="color:#a6e22e">Val</span>()
</span></span><span style="display:flex;"><span>	} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">ReleaseLock</span>(<span style="color:#a6e22e">rc</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">redis</span>.<span style="color:#a6e22e">Client</span>, <span style="color:#a6e22e">key</span> <span style="color:#66d9ef">string</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">rc</span>.<span style="color:#a6e22e">Del</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#a6e22e">key</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">LockRace2</span>(<span style="color:#a6e22e">client</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">redis</span>.<span style="color:#a6e22e">Client</span>, <span style="color:#a6e22e">storage</span> <span style="color:#66d9ef">int</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">keyLock</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;lock&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">keyStorage</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;store&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">Set</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#a6e22e">keyStorage</span>, <span style="color:#a6e22e">storage</span>, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">ReleaseLock</span>(<span style="color:#a6e22e">client</span>, <span style="color:#a6e22e">keyLock</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">Del</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#a6e22e">keyStorage</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">P</span> = <span style="color:#ae81ff">1000</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">wg</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">sync</span>.<span style="color:#a6e22e">WaitGroup</span>{}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#a6e22e">P</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">start</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">P</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">i</span> <span style="color:#66d9ef">int</span>) {
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Done</span>()
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Sleep</span>(<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Duration</span>(<span style="color:#a6e22e">rand</span>.<span style="color:#a6e22e">Intn</span>(<span style="color:#ae81ff">100</span>)) <span style="color:#f92672">*</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Millisecond</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">TryLock</span>(<span style="color:#a6e22e">client</span>, <span style="color:#a6e22e">keyLock</span>, <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">v</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">IncrBy</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#a6e22e">keyStorage</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>).<span style="color:#a6e22e">Val</span>(); <span style="color:#a6e22e">v</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span> {
</span></span><span style="display:flex;"><span>					<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;%d gets the No.%d iPhone! Use %v!\n&#34;</span>, <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">v</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>().<span style="color:#a6e22e">Sub</span>(<span style="color:#a6e22e">start</span>))
</span></span><span style="display:flex;"><span>				}
</span></span><span style="display:flex;"><span>				<span style="color:#a6e22e">ReleaseLock</span>(<span style="color:#a6e22e">client</span>, <span style="color:#a6e22e">keyLock</span>)
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>		}(<span style="color:#a6e22e">i</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Wait</span>()
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="4-内存淘汰机制">4 内存淘汰机制</h2>
<ol>
<li>LRU（Least Recently Used），基于链表结构，链表中的元素按照操作顺序从前往后排列，最新操作的键会被移动到表头，当需要内存淘汰时，只需要删除链表尾部的元素即可</li>
<li>LFU（Least Frequently Used），其基本假设是如果数据过去被访问多次，那么将来被访问的频率也更高，所以淘汰那些过去使用频率最低的key。Redis使用了一个复杂但高效的方法近似地实现了LFU</li>
<li>LFU比LRU更合理一些，但实现起来更复杂</li>
</ol>

    <img src="/images/introduction-to-redis-memory.png"  alt="memory"  class="center"  style="border-radius: 20px; width: 100%;"  />


<h2 id="5-常见应用场景">5 常见应用场景</h2>
<ul>
<li>总体原则：Redis比Mysql快一个数量级，可靠性不如Mysql，所以对于那些需要高频读写、生命周期短、对用户不是特别重要的数据适合存到Redis里</li>
<li>计数器。<code>Incr(ctx context.Context, key string)</code>对应的key计数加1，比如视频播放量，秒杀场景商品库存。<code>INCRBY</code>加任意值，可以为负数</li>
<li>缓存。对于经常访问的MySQL数据可以放到Redis里，key对应id，<strong>value是Json字符串。减轻mysql压力，提高接口响应速度</strong></li>
<li>会话缓存。SessionID用于标记用户登录成功，登录和后续操作可能命中不同的服务器，所以SessionID需要保存在分布式缓存中。搜索/推荐结果列表存入缓存，翻页时从缓存读取</li>
<li>分布式锁。在分布式系统中，定时任务只需要由一台服务器去执行，谁抢到锁谁执行，在下一个周期到来之前释放锁</li>
<li>发布/订阅功能。少量的事件通知可以用Redis实现，大量的消息传递更适合用kafka</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Orm Realized by Reflect</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/go/database/orm-realized-by-reflect/</link>
            <pubDate>Sun, 19 May 2024 21:50:59 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/go/database/orm-realized-by-reflect/</guid>
            <description>ORM核心技术—反射 教程,反射大全: https://zhuanlan.zhihu.com/p/411313885
code: https://github.com/Greenery-S/go-database/tree/master/orm
1 反射 什么是反射
在运行期间（不是编译期间）探知对象的类型信息和内存结构、更新变量、调用它们的方法 何时使用反射
函数的参数类型是interface{}，需要在运行时对原始类型进行判断，针对不同的类型采取不同的处理方式。比如json.Marshal(v interface{})
在运行时根据某些条件动态决定调用哪个函数，比如根据配置文件执行相应的算子函数
建议在初始化环节使用, 频繁调用的api不建议使用
2 使用例子 3 反射的弊端 代码难以阅读，难以维护 编译期间不能发现类型错误，覆盖测试难度很大，有些bug需要到线上运行很长时间才能发现，可能会造成严重用后果 反射性能很差，通常比正常代码慢一到两个数量级。在对性能要求很高，或大量反复调用的代码块里建议不要使用反射 4 反射的基础数据类型 reflact.Type – 通过reflect.Type获取类型相关的信息
type Type interface { MethodByName(string) (Method, bool) //根据名称获取方法 Name() string //获取结构体名称 PkgPath() string //包路径 Size() uintptr //占用内存的大小 Kind() Kind //数据类型 Implements(u Type) bool //判断是否实现了某接口 Field(i int) StructField //第i个成员 FieldByIndex(index []int) StructField //根据index路径获取嵌套成员 FieldByName(name string) (StructField, bool) //根据名称获取成员 Len() int //容器的长度 NumIn() int //输出参数的个数 NumOut() int //返回参数的个数 } reflect.</description>
            <content type="html"><![CDATA[<h1 id="orm核心技术反射">ORM核心技术—反射</h1>
<blockquote>
<p>教程,反射大全: <a href="https://zhuanlan.zhihu.com/p/411313885">https://zhuanlan.zhihu.com/p/411313885</a></p>
<p>code: <a href="https://github.com/Greenery-S/go-database/tree/master/orm">https://github.com/Greenery-S/go-database/tree/master/orm</a></p>
</blockquote>
<h2 id="1-反射">1 反射</h2>
<p><strong>什么是反射</strong></p>
<ul>
<li>在<strong>运行期间</strong>（不是编译期间）探知对象的类型信息和内存结构、更新变量、调用它们的方法</li>
</ul>
<p><strong>何时使用反射</strong></p>
<ul>
<li>
<p>函数的参数类型是interface{}，需要在运行时对原始类型进行判断，针对不同的类型采取不同的处理方式。比如json.Marshal(v interface{})</p>
</li>
<li>
<p>在运行时根据某些条件动态决定调用哪个函数，比如根据配置文件执行相应的算子函数</p>
</li>
<li>
<p>建议在初始化环节使用, 频繁调用的api不建议使用</p>
</li>
</ul>
<h2 id="2-使用例子">2 使用例子</h2>

    <img src="/images/orm-realized-by-reflect-example.png"  alt="show-table"  class="center"  style="border-radius: 10px; width: 80%;"  />


<h2 id="3-反射的弊端">3 反射的弊端</h2>
<ol>
<li>代码难以阅读，难以维护</li>
<li>编译期间不能发现类型错误，覆盖测试难度很大，有些bug需要到线上运行很长时间才能发现，可能会造成严重用后果</li>
<li>反射性能很差，通常比正常代码慢一到两个数量级。在对性能要求很高，或大量反复调用的代码块里建议不要使用反射</li>
</ol>
<h2 id="4-反射的基础数据类型">4 反射的基础数据类型</h2>

    <img src="/images/orm-realized-by-reflect-data-type.png"  alt="show-table"  class="center"  style="border-radius: 10px; width: 80%;"  />


<p><strong>reflact.Type</strong> – 通过reflect.Type获取类型相关的信息</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Type</span> <span style="color:#66d9ef">interface</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">MethodByName</span>(<span style="color:#66d9ef">string</span>) (<span style="color:#a6e22e">Method</span>, <span style="color:#66d9ef">bool</span>) <span style="color:#75715e">//根据名称获取方法
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">Name</span>() <span style="color:#66d9ef">string</span>   <span style="color:#75715e">//获取结构体名称
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">PkgPath</span>() <span style="color:#66d9ef">string</span> <span style="color:#75715e">//包路径
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">Size</span>() <span style="color:#66d9ef">uintptr</span>  <span style="color:#75715e">//占用内存的大小
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">Kind</span>() <span style="color:#a6e22e">Kind</span>  <span style="color:#75715e">//数据类型
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">Implements</span>(<span style="color:#a6e22e">u</span> <span style="color:#a6e22e">Type</span>) <span style="color:#66d9ef">bool</span>  <span style="color:#75715e">//判断是否实现了某接口
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">Field</span>(<span style="color:#a6e22e">i</span> <span style="color:#66d9ef">int</span>) <span style="color:#a6e22e">StructField</span>  <span style="color:#75715e">//第i个成员
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">FieldByIndex</span>(<span style="color:#a6e22e">index</span> []<span style="color:#66d9ef">int</span>) <span style="color:#a6e22e">StructField</span>  <span style="color:#75715e">//根据index路径获取嵌套成员
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">FieldByName</span>(<span style="color:#a6e22e">name</span> <span style="color:#66d9ef">string</span>) (<span style="color:#a6e22e">StructField</span>, <span style="color:#66d9ef">bool</span>)  <span style="color:#75715e">//根据名称获取成员
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">Len</span>() <span style="color:#66d9ef">int</span>  <span style="color:#75715e">//容器的长度
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">NumIn</span>() <span style="color:#66d9ef">int</span>  <span style="color:#75715e">//输出参数的个数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">NumOut</span>() <span style="color:#66d9ef">int</span>  <span style="color:#75715e">//返回参数的个数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p><strong>reflect.Value</strong> – 通过reflect.Value获取、修改原始数据类型里的值</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Value</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 代表的数据类型
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">typ</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">rtype</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 指向原始数据的指针
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">ptr</span> <span style="color:#a6e22e">unsafe</span>.<span style="color:#a6e22e">Pointer</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="5-获取field信息">5 获取Field信息</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">typeUser</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">reflect</span>.<span style="color:#a6e22e">TypeOf</span>(<span style="color:#a6e22e">User</span>{})
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">typeUser</span>.<span style="color:#a6e22e">NumField</span>() ; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {<span style="color:#75715e">//成员变量的个数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">field</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">typeUser</span>.<span style="color:#a6e22e">Field</span>(<span style="color:#a6e22e">i</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;%s offset %d anonymous %t type %s exported %t json tag %s\n&#34;</span>, 
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">field</span>.<span style="color:#a6e22e">Name</span>, <span style="color:#75715e">//变量名称
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">field</span>.<span style="color:#a6e22e">Offset</span>, <span style="color:#75715e">//相对于结构体首地址的内存偏移量，string类型会占据16个字节
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">field</span>.<span style="color:#a6e22e">Anonymous</span>, <span style="color:#75715e">//是否为匿名成员
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">field</span>.<span style="color:#a6e22e">Type</span>, <span style="color:#75715e">//数据类型，reflect.Type类型
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">field</span>.<span style="color:#a6e22e">IsExported</span>(), <span style="color:#75715e">//包外是否可见（即是否以大写字母开头）
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">field</span>.<span style="color:#a6e22e">Tag</span>.<span style="color:#a6e22e">Get</span>(<span style="color:#e6db74">&#34;json&#34;</span>)) <span style="color:#75715e">//获取成员变量后面``里面定义的tag
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><h2 id="6-orm实现原理">6 ORM实现原理</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">User</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Id</span>         <span style="color:#66d9ef">int</span>    <span style="color:#e6db74">`gorm:&#34;column:id;primaryKey&#34;`</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Gender</span>     <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`gorm:&#34;column:sex&#34;`</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Name</span>       <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`gorm:&#34;-&#34;`</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">FamilyName</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><ol>
<li>带<code>gorm:&quot;-&quot;</code>的Field忽略掉</li>
<li>通过field.Tag.Get(&ldquo;gorm&rdquo;) 获得gorm后面的内容</li>
<li>把前缀&quot; column:&ldquo;去掉</li>
<li>用;分隔，取第一部分</li>
<li>没有显式写gorm Tag的Field将转为蛇形即对应mysql表里的column</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">GetGormFields</span>(<span style="color:#a6e22e">stc</span> <span style="color:#66d9ef">interface</span>{}) []<span style="color:#66d9ef">string</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">value</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">reflect</span>.<span style="color:#a6e22e">ValueOf</span>(<span style="color:#a6e22e">stc</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">typ</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">value</span>.<span style="color:#a6e22e">Type</span>()
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">columns</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">string</span>, <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">value</span>.<span style="color:#a6e22e">NumField</span>())
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">value</span>.<span style="color:#a6e22e">NumField</span>(); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">fieldType</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">typ</span>.<span style="color:#a6e22e">Field</span>(<span style="color:#a6e22e">i</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">//不做ORM映射的字段跳过
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">fieldType</span>.<span style="color:#a6e22e">Tag</span>.<span style="color:#a6e22e">Get</span>(<span style="color:#e6db74">&#34;gorm&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;-&#34;</span> {
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">//如果没有gorm Tag，则把驼峰转为蛇形
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#a6e22e">name</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">util</span>.<span style="color:#a6e22e">Camel2Snake</span>(<span style="color:#a6e22e">fieldType</span>.<span style="color:#a6e22e">Name</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">fieldType</span>.<span style="color:#a6e22e">Tag</span>.<span style="color:#a6e22e">Get</span>(<span style="color:#e6db74">&#34;gorm&#34;</span>)) &gt; <span style="color:#ae81ff">0</span> {
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">content</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">fieldType</span>.<span style="color:#a6e22e">Tag</span>.<span style="color:#a6e22e">Get</span>(<span style="color:#e6db74">&#34;gorm&#34;</span>)
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">HasPrefix</span>(<span style="color:#a6e22e">content</span>, <span style="color:#e6db74">&#34;column:&#34;</span>) {
</span></span><span style="display:flex;"><span>                                <span style="color:#a6e22e">content</span> = <span style="color:#a6e22e">content</span>[<span style="color:#ae81ff">7</span>:]
</span></span><span style="display:flex;"><span>                                <span style="color:#a6e22e">pos</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Index</span>(<span style="color:#a6e22e">content</span>, <span style="color:#e6db74">&#34;;&#34;</span>)
</span></span><span style="display:flex;"><span>                                <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">pos</span> &gt; <span style="color:#ae81ff">0</span> {
</span></span><span style="display:flex;"><span>                                        <span style="color:#a6e22e">name</span> = <span style="color:#a6e22e">content</span>[<span style="color:#ae81ff">0</span>:<span style="color:#a6e22e">pos</span>]
</span></span><span style="display:flex;"><span>                                } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">pos</span> &lt; <span style="color:#ae81ff">0</span> {
</span></span><span style="display:flex;"><span>                                        <span style="color:#a6e22e">name</span> = <span style="color:#a6e22e">content</span>
</span></span><span style="display:flex;"><span>                                }
</span></span><span style="display:flex;"><span>                        }
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">columns</span> = append(<span style="color:#a6e22e">columns</span>, <span style="color:#a6e22e">name</span>)
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">columns</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Mysql Optimization</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/go/database/mysql-optimization/</link>
            <pubDate>Sun, 19 May 2024 21:16:35 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/go/database/mysql-optimization/</guid>
            <description>MySQL性能调优 code: https://github.com/Greenery-S/go-database/tree/master/mysql
实战建议 写sql时一律使用小写
建表时先判断表是否已存在 if not exists
所有的列和表都加comment
字符串长度比较短时尽量使用char，定长有利于内存对齐，读写性能更好，而varchar字段频繁修改时容易产生内存碎片
满足需求的前提下尽量使用短的数据类型，如tinyint vs int, float vs double, date vs datetime
CREATE TABLE if not exists `student` ( `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &amp;#39;主键自增id&amp;#39;, `name` char(10) NOT NULL COMMENT &amp;#39;姓名&amp;#39;, `province` char(6) NOT NULL COMMENT &amp;#39;省&amp;#39;, `city` char(10) NOT NULL COMMENT &amp;#39;城市&amp;#39;, `addr` varchar(100) DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;地址&amp;#39;, `score` float NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;考试成绩&amp;#39;, `enrollment` date NOT NULL COMMENT &amp;#39;入学时间&amp;#39;, PRIMARY KEY (`id`), UNIQUE KEY `idx_name` (`name`), KEY `idx_location` (`province`,`city`) ) ENGINE=InnoDB AUTO_INCREMENT=100020 DEFAULT CHARSET=utf8 COMMENT=&amp;#39;学员基本信息&amp;#39; 2 null default null有别于default &#39;&#39;和default 0</description>
            <content type="html"><![CDATA[<h1 id="mysql性能调优">MySQL性能调优</h1>
<blockquote>
<p>code: <a href="https://github.com/Greenery-S/go-database/tree/master/mysql">https://github.com/Greenery-S/go-database/tree/master/mysql</a></p>
</blockquote>
<h1 id="实战建议">实战建议</h1>
<ul>
<li>
<p>写sql时一律使用小写</p>
</li>
<li>
<p>建表时先判断表是否已存在  <code>if not exists</code></p>
</li>
<li>
<p>所有的列和表都加<code>comment</code></p>
</li>
<li>
<p>字符串长度比较短时尽量使用<code>char</code>，定长有利于内存对齐，读写性能更好，而<code>varchar</code>字段频繁修改时容易产生内存碎片</p>
</li>
<li>
<p>满足需求的前提下尽量使用短的数据类型，如<code>tinyint</code> vs <code>in</code>t, <code>float</code> vs <code>double</code>, <code>date</code> vs <code>datetime</code></p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">exists</span> <span style="color:#f92672">`</span>student<span style="color:#f92672">`</span> (
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">`</span>id<span style="color:#f92672">`</span> int(<span style="color:#ae81ff">11</span>) <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span> AUTO_INCREMENT <span style="color:#66d9ef">COMMENT</span> <span style="color:#e6db74">&#39;主键自增id&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">`</span>name<span style="color:#f92672">`</span> char(<span style="color:#ae81ff">10</span>) <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span> <span style="color:#66d9ef">COMMENT</span> <span style="color:#e6db74">&#39;姓名&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">`</span>province<span style="color:#f92672">`</span> char(<span style="color:#ae81ff">6</span>) <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span> <span style="color:#66d9ef">COMMENT</span> <span style="color:#e6db74">&#39;省&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">`</span>city<span style="color:#f92672">`</span> char(<span style="color:#ae81ff">10</span>) <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span> <span style="color:#66d9ef">COMMENT</span> <span style="color:#e6db74">&#39;城市&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">`</span>addr<span style="color:#f92672">`</span> varchar(<span style="color:#ae81ff">100</span>) <span style="color:#66d9ef">DEFAULT</span> <span style="color:#e6db74">&#39;&#39;</span> <span style="color:#66d9ef">COMMENT</span> <span style="color:#e6db74">&#39;地址&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">`</span>score<span style="color:#f92672">`</span> float <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span> <span style="color:#66d9ef">DEFAULT</span> <span style="color:#e6db74">&#39;0&#39;</span> <span style="color:#66d9ef">COMMENT</span> <span style="color:#e6db74">&#39;考试成绩&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">`</span>enrollment<span style="color:#f92672">`</span> date <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span> <span style="color:#66d9ef">COMMENT</span> <span style="color:#e6db74">&#39;入学时间&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">PRIMARY</span> <span style="color:#66d9ef">KEY</span> (<span style="color:#f92672">`</span>id<span style="color:#f92672">`</span>),
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">UNIQUE</span> <span style="color:#66d9ef">KEY</span> <span style="color:#f92672">`</span>idx_name<span style="color:#f92672">`</span> (<span style="color:#f92672">`</span>name<span style="color:#f92672">`</span>),
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">KEY</span> <span style="color:#f92672">`</span>idx_location<span style="color:#f92672">`</span> (<span style="color:#f92672">`</span>province<span style="color:#f92672">`</span>,<span style="color:#f92672">`</span>city<span style="color:#f92672">`</span>)
</span></span><span style="display:flex;"><span>) ENGINE<span style="color:#f92672">=</span>InnoDB AUTO_INCREMENT<span style="color:#f92672">=</span><span style="color:#ae81ff">100020</span> <span style="color:#66d9ef">DEFAULT</span> CHARSET<span style="color:#f92672">=</span>utf8 <span style="color:#66d9ef">COMMENT</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#39;学员基本信息&#39;</span>
</span></span></code></pre></div><h2 id="2-null">2 null</h2>
<ul>
<li>
<p><code>default null</code>有别于<code>default ''</code>和<code>default 0</code></p>
</li>
<li>
<p><code>is null</code>, <code>is not null</code>有别于<code>!= ''</code>, <code>!=0</code></p>
</li>
<li>
<p>尽量设为<code>not null</code></p>
<ul>
<li>
<p>有些DB索引列不允许包含null</p>
</li>
<li>
<p>对含有null的列进行统计，结果可能不符合预期</p>
</li>
<li>
<p>null值有时候会严重拖慢系统性能</p>
</li>
</ul>
</li>
</ul>
<h2 id="3-规避慢查询-eg-1s">3 规避慢查询 (e.g. &gt;1s)</h2>
<ul>
<li>大部分的<strong>慢查询</strong>都是因为<strong>没有正确地使用索引</strong></li>
<li>不要<strong>过多地创建索引</strong>，否则<strong>写入会变慢</strong></li>
<li>绝大部分情况使用<strong>默认的InnoDB</strong>引擎，不要使用MyISAM引擎</li>
<li>不要select *，<strong>只select你需要的列</strong></li>
<li>尽量用<strong>in代替or</strong>，or的效率没有in高</li>
<li><strong>in的元素个数不要太多，一般300到500</strong></li>
<li><strong>不要使用模型查询like，模糊查询不能利用索引</strong></li>
<li><strong>如果确定结果只有一条，则使用limit 1，停止全表扫描</strong></li>
<li><strong>分页查询limit m,n会检索前m+n行，只是返回后n行，通常用id&gt;x来代替这种分页方式</strong></li>
<li><strong>批量操作时最好一条sql语句搞定；其次打包成一个事务，一次性提交，高并发情况下减少对共享资源的争用</strong></li>
<li>避免使用大事务，用短小的事务，减少锁等待和竞争</li>
<li>不要一次查询或更新太多数据，尽量控制在1000条左右</li>
<li>不要使用连表操作，join逻辑在业务代码里完成</li>
<li>不用 MYSQL 内置的函数，因为内置函数不会建立查询缓存，复杂的计算逻辑放到自己的代码里去做</li>
</ul>
<h2 id="4-b树">4 B+树</h2>
<ol>
<li>B即Balance，对于m叉树每个节点上最多有m个数据，最少有m/2个数据（根节点除外）。</li>
<li>叶节点上存储了所有数据，把叶节点链接起来可以顺序遍历所有数据。</li>
<li>每个节点设计成内存页(4K)的整倍数。MySQL的m=1200，<strong>树的前两层放在内存中</strong>。</li>
</ol>

    <img src="/images/mysql-optimization-bplustree.png"  alt="b&#43;tree"  class="center"  style="border-radius: 20px; width: 300px;"  />


<h2 id="5-索引">5 索引</h2>
<ul>
<li>MySQL索引默认使用B+树
<ul>
<li>why not hashtable? &ndash; 1)全部数据不可能都加载内存;2)不利于范围查找;</li>
</ul>
</li>
<li>主键默认会加索引。<strong>按主键构建的B+树里包含所有列的数据</strong>，而<strong>普通索引的B+树里只存储了主键</strong>，还需要再查一次主键对应的B+树（<strong>回表</strong>）</li>
<li><strong>联合索引的前缀</strong>同样具有索引的效果</li>
<li>sql语句前加<strong>explain</strong>可以查看索引使用情况</li>
<li>如果MySQL没有选择最优的索引方案，可以在<strong>where前force index (index_name)</strong></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">show</span> <span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> student
</span></span></code></pre></div>
    <img src="/images/mysql-optimization-show-table.png"  alt="show-table"  class="center"  style="border-radius: 10px; width: 100%;"  />


<h2 id="6-覆盖索引">6 覆盖索引</h2>

    <img src="/images/mysql-optimization-cover-index.png"  alt="cover-index"  class="center"  style="border-radius: 10px; width: 300;"  />


<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">explain</span> <span style="color:#66d9ef">select</span> city <span style="color:#66d9ef">from</span> student <span style="color:#66d9ef">where</span> name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;张三&#39;</span> <span style="color:#66d9ef">and</span> province<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;北京&#39;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">explain</span> <span style="color:#66d9ef">select</span> city <span style="color:#66d9ef">from</span> student <span style="color:#66d9ef">force</span> <span style="color:#66d9ef">index</span> (idx_location) <span style="color:#66d9ef">where</span> name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;张三&#39;</span> <span style="color:#66d9ef">and</span> province<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;北京&#39;</span>;
</span></span></code></pre></div>
    <img src="/images/mysql-optimization-explain-select.png"  alt="cover-index"  class="center"  style="border-radius: 10px; width: 300;"  />


<ul>
<li>第一个查询需要回表</li>
<li><strong>第二个SQL只需要查询city，且刚好命中了(<code>province</code>,<code>city</code>)这个联合索引，不需要回表，这就是覆盖索引(即命中非主键索引，且不需要回表</strong> ==存疑==</li>
<li>覆盖索引在Extra里会显示Using index</li>
</ul>
<h2 id="7-sql注入攻击">7 SQL注入攻击</h2>
<p><strong>CASE 1</strong></p>
<ul>
<li><code>sql = &quot;select username,password from user where username='&quot; + username + &quot;' and password='&quot; + password + &quot;'&quot;; </code></li>
<li>变量username和password从前端输入框获取，如果用户输入的username为lily， password为aaa&rsquo; or &lsquo;1&rsquo;=&lsquo;1</li>
<li>则完整的sql为select username,password from user where username=&lsquo;lily&rsquo; and password=&lsquo;aaa&rsquo; or &lsquo;1&rsquo;=&lsquo;1&rsquo;</li>
<li>会返回表里的所有记录，如果记录数大于0就允许登录，则lily的账号被盗</li>
</ul>
<p><strong>CASE 2</strong></p>
<ul>
<li><code>sql=&quot;insert into student (name) values ('&quot;+username+&quot; ') &quot;;</code></li>
<li>变量username从前端输入框获取，如果用户输入的username为<code>lily'); drop table student;--‘)</code></li>
<li>完整sql为insert into student (name) values (&rsquo;lily&rsquo;); drop table student;&ndash;&rsquo;)</li>
<li>通过注释符&ndash;屏蔽掉了末尾的&rsquo;)，删除了整个表</li>
</ul>
<h4 id="防范方法">防范方法</h4>
<p><strong>总体</strong></p>
<ul>
<li>前端输入要加正则校验、长度限制</li>
<li>对特殊符号(&lt;&gt;&amp;*; &lsquo;&ldquo;等)进行转义或编码转换，Go的text/template 包里面的<code>HTMLEscapeString</code>函数可以对字符串进行转义处理</li>
<li>不要将用户输入直接嵌入到sql语句中，而应该使用<strong>参数化查询接口</strong>，如Prepare、Query、Exec(query string, args &hellip;interface{})</li>
<li>使用专业的SQL注入检测工具进行检测，如sqlmap、SQLninja</li>
<li><strong>避免网站打印出SQL错误信息</strong>，以防止攻击者利用这些错误信息进行SQL注入</li>
<li>没有任何一种方式能防住所有的sql注入，以上方法要结合使用</li>
</ul>
<p><strong>Stmt</strong></p>
<ul>
<li>
<p>定义一个sql模板 <code>stmt, err := db.Prepare(&quot;update student set score=score+? where city=?&quot;)</code></p>
</li>
<li>
<p>多次使用模板:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stmt</span>.<span style="color:#a6e22e">Exec</span>(<span style="color:#ae81ff">10</span>, <span style="color:#e6db74">&#34;上海&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">stmt</span>.<span style="color:#a6e22e">Exec</span>(<span style="color:#ae81ff">9</span>, <span style="color:#e6db74">&#34;深圳&#34;</span>)
</span></span></code></pre></div></li>
<li>
<p>不要拼接sql(容易被SQL注入攻击，且利用不上编译优化):  <code>db.Where(fmt.Sprintf(&quot;merchant_id = %s&quot;, merchantId))</code></p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">exists</span> <span style="color:#f92672">`</span>login<span style="color:#f92672">`</span> (
</span></span><span style="display:flex;"><span>                                       <span style="color:#f92672">`</span>username<span style="color:#f92672">`</span> varchar(<span style="color:#ae81ff">100</span>) <span style="color:#66d9ef">DEFAULT</span> <span style="color:#66d9ef">NULL</span>,
</span></span><span style="display:flex;"><span>                                       <span style="color:#f92672">`</span>password<span style="color:#f92672">`</span> varchar(<span style="color:#ae81ff">100</span>) <span style="color:#66d9ef">DEFAULT</span> <span style="color:#66d9ef">NULL</span>
</span></span><span style="display:flex;"><span>) ENGINE<span style="color:#f92672">=</span>InnoDB <span style="color:#66d9ef">DEFAULT</span> CHARSET<span style="color:#f92672">=</span>latin1;
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// 登录成功返回true。容易被SQL注入攻击
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">LoginUnsafe</span>(<span style="color:#a6e22e">db</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">DB</span>, <span style="color:#a6e22e">name</span>, <span style="color:#a6e22e">passwd</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">bool</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">cnt</span> <span style="color:#66d9ef">int64</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">Table</span>(<span style="color:#e6db74">&#34;login&#34;</span>).<span style="color:#a6e22e">Select</span>(<span style="color:#e6db74">&#34;*&#34;</span>).<span style="color:#a6e22e">Where</span>(<span style="color:#e6db74">&#34;username=&#39;&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">name</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&#39; and password=&#39;&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">passwd</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&#39;&#34;</span>).<span style="color:#a6e22e">Count</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">cnt</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">cnt</span> &gt; <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 登录成功返回true。拒绝SQL注入攻击
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">LoginSafe</span>(<span style="color:#a6e22e">db</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">DB</span>, <span style="color:#a6e22e">name</span>, <span style="color:#a6e22e">passwd</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">bool</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">cnt</span> <span style="color:#66d9ef">int64</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">Table</span>(<span style="color:#e6db74">&#34;login&#34;</span>).<span style="color:#a6e22e">Select</span>(<span style="color:#e6db74">&#34;*&#34;</span>).<span style="color:#a6e22e">Where</span>(<span style="color:#e6db74">&#34;username=? and password=?&#34;</span>, <span style="color:#a6e22e">name</span>, <span style="color:#a6e22e">passwd</span>).<span style="color:#a6e22e">Count</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">cnt</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">cnt</span> &gt; <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">TestLoginUnsafe</span>(<span style="color:#a6e22e">t</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">testing</span>.<span style="color:#a6e22e">T</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">db</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">mysql</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">dsn</span>), <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">Config</span>{<span style="color:#a6e22e">PrepareStmt</span>: <span style="color:#66d9ef">true</span>}) <span style="color:#75715e">//强行使用PrepareStmt
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		panic(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">LoginUnsafe</span>(<span style="color:#a6e22e">db</span>, <span style="color:#e6db74">&#34;tom&#34;</span>, <span style="color:#e6db74">&#34;123456&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#66d9ef">false</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Fail</span>()
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">LoginUnsafe</span>(<span style="color:#a6e22e">db</span>, <span style="color:#e6db74">&#34;tom&#34;</span>, <span style="color:#e6db74">&#34;456789&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#66d9ef">true</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Fail</span>()
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// select * from login where username=&#39;tom&#39; and password=&#39;456789&#39; or &#39;1&#39;=&#39;1&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">LoginUnsafe</span>(<span style="color:#a6e22e">db</span>, <span style="color:#e6db74">&#34;tom&#34;</span>, <span style="color:#e6db74">&#34;456789&#39; or &#39;1&#39;=&#39;1&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#66d9ef">false</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Fail</span>()
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">TestLoginSafe</span>(<span style="color:#a6e22e">t</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">testing</span>.<span style="color:#a6e22e">T</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">db</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">mysql</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">dsn</span>), <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">Config</span>{<span style="color:#a6e22e">PrepareStmt</span>: <span style="color:#66d9ef">true</span>}) <span style="color:#75715e">//强行使用PrepareStmt
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		panic(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">LoginSafe</span>(<span style="color:#a6e22e">db</span>, <span style="color:#e6db74">&#34;tom&#34;</span>, <span style="color:#e6db74">&#34;123456&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#66d9ef">false</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Fail</span>()
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">LoginSafe</span>(<span style="color:#a6e22e">db</span>, <span style="color:#e6db74">&#34;tom&#34;</span>, <span style="color:#e6db74">&#34;456789&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#66d9ef">true</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Fail</span>()
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">LoginSafe</span>(<span style="color:#a6e22e">db</span>, <span style="color:#e6db74">&#34;tom&#34;</span>, <span style="color:#e6db74">&#34;456789&#39; or &#39;1&#39;=&#39;1&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#66d9ef">true</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Fail</span>()
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>SQL预编译</strong></p>
<ul>
<li>
<p>DB执行sql分为3步：</p>
<ol>
<li>词法和语义解析</li>
<li>优化 SQL 语句，制定执行计划</li>
<li>执行并返回结果</li>
</ol>
</li>
<li>
<p>SQL 预编译技术是指将用户输入用占位符?代替，先对这个模板化的sql进行预编译，实际运行时再将用户输入代入</p>
</li>
<li>
<p>除了可以防止 SQL 注入，还可以对预编译的SQL语句进行缓存，之后的运行就省去了解析优化SQL语句的过程</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">BenchmarkQueryWithoutPrepare</span>(<span style="color:#a6e22e">b</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">testing</span>.<span style="color:#a6e22e">B</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">client</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">mysql</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">dsn</span>), <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">Config</span>{}) <span style="color:#75715e">//没有指定PrepareStmt
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		panic(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">ResetTimer</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">N</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">LoginUnsafe</span>(<span style="color:#a6e22e">client</span>, <span style="color:#a6e22e">name</span>, <span style="color:#a6e22e">passwd</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">BenchmarkQueryWithPrepare</span>(<span style="color:#a6e22e">b</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">testing</span>.<span style="color:#a6e22e">B</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">client</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">mysql</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">dsn</span>), <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">Config</span>{<span style="color:#a6e22e">PrepareStmt</span>: <span style="color:#66d9ef">true</span>}) <span style="color:#75715e">//强行使用PrepareStmt
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		panic(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">ResetTimer</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">N</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">LoginUnsafe</span>(<span style="color:#a6e22e">client</span>, <span style="color:#a6e22e">name</span>, <span style="color:#a6e22e">passwd</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>&gt; go test ./ -bench<span style="color:#f92672">=</span>^BenchmarkQueryWith -run<span style="color:#f92672">=</span>^$ -count<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> -benchmem
</span></span><span style="display:flex;"><span>goos: darwin
</span></span><span style="display:flex;"><span>goarch: arm64
</span></span><span style="display:flex;"><span>pkg: dqq/database/mysql
</span></span><span style="display:flex;"><span>BenchmarkQueryWithoutPrepare-10             <span style="color:#ae81ff">7888</span>            <span style="color:#ae81ff">147138</span> ns/op            <span style="color:#ae81ff">3441</span> B/op         <span style="color:#ae81ff">54</span> allocs/op
</span></span><span style="display:flex;"><span>BenchmarkQueryWithPrepare-10                <span style="color:#ae81ff">8508</span>            <span style="color:#ae81ff">130443</span> ns/op            <span style="color:#ae81ff">3458</span> B/op         <span style="color:#ae81ff">55</span> allocs/op
</span></span><span style="display:flex;"><span>PASS
</span></span></code></pre></div><h2 id="8-分页查询">8 分页查询</h2>
<ul>
<li>分页查询limit m,n会检索前m+n行，只是返回后n行，通常用<code>id&gt;x</code>来代替这种分页方式。</li>
<li>全表扫描
<ol>
<li>直接select * from table肯定是慢查询，违背了一次查询行数不能太多的原则</li>
<li>分页查询表面上查询的行数不多，实则是执行了多次方式1</li>
<li>固定page_size，维护当前查询到在最大id(max_id)，查询时使用<code>where id&gt;maxid limit page_size</code>，当查询结果为空时，退出循环</li>
</ol>
</li>
</ul>

    <img src="/images/mysql-optimization-pagenate.png"  alt="cover-index"  class="center"  style="border-radius: 10px; width: 300;"  />


<h2 id="9-事务">9 事务</h2>
<ul>
<li>批量操作时最好一条sql语句搞定；其次打包成一个事务，一次性提交，高并发情况下减少对共享资源的争用</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">INSERT_COUNT</span> = <span style="color:#ae81ff">100000</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 一条一条插入
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">InsertOneByOne</span>(<span style="color:#a6e22e">db</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">DB</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">begin</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">INSERT_COUNT</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">student</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">Student</span>{<span style="color:#a6e22e">Name</span>: <span style="color:#e6db74">&#34;学生&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Itoa</span>(<span style="color:#a6e22e">i</span>), <span style="color:#a6e22e">Province</span>: <span style="color:#e6db74">&#34;北京&#34;</span>, <span style="color:#a6e22e">City</span>: <span style="color:#e6db74">&#34;北京&#34;</span>, <span style="color:#a6e22e">Score</span>: <span style="color:#ae81ff">38</span>, <span style="color:#a6e22e">Enrollment</span>: <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>()}
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">Create</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">student</span>).<span style="color:#a6e22e">Error</span>; <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> { <span style="color:#75715e">//注意需要传student的指针
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>			<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;total&#34;</span>, <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Since</span>(<span style="color:#a6e22e">begin</span>))
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 放在一个事务里插入
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">InsertByTransaction1</span>(<span style="color:#a6e22e">db</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">DB</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">begin</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">tx</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">Begin</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">INSERT_COUNT</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">student</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">Student</span>{<span style="color:#a6e22e">Name</span>: <span style="color:#e6db74">&#34;学生&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Itoa</span>(<span style="color:#a6e22e">i</span>), <span style="color:#a6e22e">Province</span>: <span style="color:#e6db74">&#34;北京&#34;</span>, <span style="color:#a6e22e">City</span>: <span style="color:#e6db74">&#34;北京&#34;</span>, <span style="color:#a6e22e">Score</span>: <span style="color:#ae81ff">38</span>, <span style="color:#a6e22e">Enrollment</span>: <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>()}
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">Create</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">student</span>).<span style="color:#a6e22e">Error</span>; <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">Commit</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;total&#34;</span>, <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Since</span>(<span style="color:#a6e22e">begin</span>))
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 一次插入多条，整体再放到一个事务里
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">InsertByTransaction2</span>(<span style="color:#a6e22e">db</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">DB</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">begin</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">tx</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">Begin</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">BATCH</span> = <span style="color:#ae81ff">100</span> <span style="color:#75715e">// 一条SQL语句插入多条
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">INSERT_COUNT</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">BATCH</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">students</span> <span style="color:#f92672">:=</span> make([]<span style="color:#a6e22e">Student</span>, <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">BATCH</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">j</span> &lt; <span style="color:#a6e22e">BATCH</span>; <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">student</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">Student</span>{<span style="color:#a6e22e">Name</span>: <span style="color:#e6db74">&#34;学生&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Itoa</span>(<span style="color:#a6e22e">i</span><span style="color:#f92672">+</span><span style="color:#a6e22e">j</span>), <span style="color:#a6e22e">Province</span>: <span style="color:#e6db74">&#34;北京&#34;</span>, <span style="color:#a6e22e">City</span>: <span style="color:#e6db74">&#34;北京&#34;</span>, <span style="color:#a6e22e">Score</span>: <span style="color:#ae81ff">38</span>, <span style="color:#a6e22e">Enrollment</span>: <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>()}
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">students</span> = append(<span style="color:#a6e22e">students</span>, <span style="color:#a6e22e">student</span>)
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">Create</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">students</span>).<span style="color:#a6e22e">Error</span>; <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">Commit</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;total&#34;</span>, <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Since</span>(<span style="color:#a6e22e">begin</span>))
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#f92672">===</span> RUN   TestInsertOneByOne
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>total 1m55.652681166s
</span></span><span style="display:flex;"><span>--- PASS: TestInsertOneByOne <span style="color:#f92672">(</span>116.20s<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">===</span> RUN   TestInsertByTransaction1
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>total 27.29299825s
</span></span><span style="display:flex;"><span>--- PASS: TestInsertByTransaction1 <span style="color:#f92672">(</span>27.91s<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">===</span> RUN   TestInsertByTransaction2
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>total 3.226376333s
</span></span><span style="display:flex;"><span>--- PASS: TestInsertByTransaction2 <span style="color:#f92672">(</span>4.20s<span style="color:#f92672">)</span>
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>How to Maintain the Site</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/hugo/site-building/how-to-maintain-the-site/</link>
            <pubDate>Sun, 19 May 2024 02:32:21 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/hugo/site-building/how-to-maintain-the-site/</guid>
            <description>如何通过hugo和github维护博客 gitpage是一个非常好的博客托管平台,它可以让你通过git的方式来维护你的博客.这样的方式非常适合程序员,因为我们大多数都会使用git.
hugo是一个非常好的静态网站生成器,它可以让你通过markdown文件来生成静态网站.这样的方式非常适合程序员,因为我们大多数都会使用markdown.
这篇文章会教你如何通过hugo和github来维护你的博客.
安装hugo和git 首先你需要安装hugo和git.你可以通过以下方式安装:
# 安装hugo brew install hugo # 安装git brew install git 在github上创建2个仓库 你需要在github上创建2个仓库,一个用来存放hugo的源文件,一个用来存放hugo生成的静态网站.
存放hugo生成的静态网站的仓库名字是&amp;lt;yourname.github.io&amp;gt;,这个仓库是一个公开仓库,用来存放你的hugo源文件.
本地初始化网站项目 # 初始化hugo项目 hugo new site &amp;lt;site-name&amp;gt; # 初始化git项目 git init # 添加远程仓库 git remote add origin &amp;lt;your-site-source-repo&amp;gt; 创建文章,预览,修改 # 创建文章 hugo new posts/my-first-post.md # 预览 hugo server -D 修改主题 # 下载主题 git submodule add &amp;lt;theme-url&amp;gt; themes/&amp;lt;theme-name&amp;gt; # 修改配置文件 cp themes/&amp;lt;theme-name&amp;gt;/exampleSite/config.toml 配置的修改因主题而异,请参考主题的文档.比如我使用的&amp;rsquo;hello-friend-ng&amp;rsquo;主题,使用建议:
所有的文章都应该放在content/posts目录下 可以配置config.toml文件来修改menu: [[menu.main]] identifier = &amp;#34;about&amp;#34; name = &amp;#34;About&amp;#34; url = &amp;#34;posts/about&amp;#34; weight = 1 [[menu.</description>
            <content type="html"><![CDATA[<h1 id="如何通过hugo和github维护博客">如何通过hugo和github维护博客</h1>
<p><a href="https://pages.github.com/">gitpage</a>是一个非常好的博客托管平台,它可以让你通过git的方式来维护你的博客.这样的方式非常适合程序员,因为我们大多数都会使用git.</p>
<p><a href="https://gohugo.io/">hugo</a>是一个非常好的静态网站生成器,它可以让你通过markdown文件来生成静态网站.这样的方式非常适合程序员,因为我们大多数都会使用markdown.</p>
<p>这篇文章会教你如何通过hugo和github来维护你的博客.</p>
<h2 id="安装hugo和git">安装hugo和git</h2>
<p>首先你需要安装hugo和git.你可以通过以下方式安装:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># 安装hugo</span>
</span></span><span style="display:flex;"><span>brew install hugo
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 安装git</span>
</span></span><span style="display:flex;"><span>brew install git
</span></span></code></pre></div><h2 id="在github上创建2个仓库">在github上创建2个仓库</h2>
<p>你需要在github上创建2个仓库,一个用来存放hugo的源文件,一个用来存放hugo生成的静态网站.</p>
<p>存放hugo生成的静态网站的仓库名字是<code>&lt;yourname.github.io&gt;</code>,这个仓库是一个公开仓库,用来存放你的hugo源文件.</p>
<h2 id="本地初始化网站项目">本地初始化网站项目</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># 初始化hugo项目</span>
</span></span><span style="display:flex;"><span>hugo new site &lt;site-name&gt;
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 初始化git项目</span>
</span></span><span style="display:flex;"><span>git init
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 添加远程仓库</span>
</span></span><span style="display:flex;"><span>git remote add origin &lt;your-site-source-repo&gt;
</span></span></code></pre></div><h2 id="创建文章预览修改">创建文章,预览,修改</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># 创建文章</span>
</span></span><span style="display:flex;"><span>hugo new posts/my-first-post.md
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 预览</span>
</span></span><span style="display:flex;"><span>hugo server -D
</span></span></code></pre></div><h2 id="修改主题">修改主题</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># 下载主题</span>
</span></span><span style="display:flex;"><span>git submodule add &lt;theme-url&gt; themes/&lt;theme-name&gt;
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 修改配置文件</span>
</span></span><span style="display:flex;"><span>cp themes/&lt;theme-name&gt;/exampleSite/config.toml 
</span></span></code></pre></div><p>配置的修改因主题而异,请参考主题的文档.比如我使用的&rsquo;hello-friend-ng&rsquo;主题,使用建议:</p>
<ul>
<li>所有的文章都应该放在<code>content/posts</code>目录下</li>
<li>可以配置<code>config.toml</code>文件来修改menu:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span>[[<span style="color:#a6e22e">menu</span>.<span style="color:#a6e22e">main</span>]]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">identifier</span> = <span style="color:#e6db74">&#34;about&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#34;About&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">url</span> = <span style="color:#e6db74">&#34;posts/about&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">weight</span> = <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>[[<span style="color:#a6e22e">menu</span>.<span style="color:#a6e22e">main</span>]]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">identifier</span> = <span style="color:#e6db74">&#34;site-building&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#34;Site-building&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">url</span> = <span style="color:#e6db74">&#34;categories/hugo-site-building/&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">weight</span> = <span style="color:#ae81ff">5</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="发布网站到githubio">发布网站到github.io</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># 生成静态网站</span>
</span></span><span style="display:flex;"><span>hugo
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 提交到github</span>
</span></span><span style="display:flex;"><span>cd public
</span></span><span style="display:flex;"><span>git add .
</span></span><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;add new post&#34;</span>
</span></span><span style="display:flex;"><span>git push origin master
</span></span></code></pre></div><p>访问<code>https://&lt;yourname&gt;.github.io</code>就可以看到你的博客了.</p>
<blockquote>
<p>参考链接:</p>
<ul>
<li><a href="https://cuttontail.blog/blog/create-a-wesite-using-github-pages-and-hugo/">教程</a></li>
</ul>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>About</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/about/</link>
            <pubDate>Sun, 19 May 2024 01:04:56 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/about/</guid>
            <description>关于本站 本站是一个基于hugo的博客站点,主要用于记录我的学习和生活.
hugo是一个go语言写的静态网站生成器,它的速度非常快,并且支持markdown语法. 它的基于go-template,所以它的使用方法着实类似于其他生成器,比如helm.
关于我 Hello,这事是我,严珂宇,Sam,Greenery.
我是一位即将毕业的学生.我在NUS就读master,专业是计算机工程.我的本科是985大学的计算机科学与技术专业,排名还蛮靠前的,但是我觉得我还是有很多东西要学习.想出来看看世界,所以就来了新加坡.
我很幸运在刚来到新加坡就遇见了TikTok,并加入实习.虽然我的英语口语实在太可怜,而且我也不太会社交,但是我还是很开心能在这里工作.因为从leader,mentor到同事,都很nice.
这是我的简历:
简历PDF 我的技术栈 编程语言 C/C++: 本科期间用来做课程作业,但不算精通.最近正在对着learncpp.com复习. Python: 用python写过一些数据处理,机器学习,深度学习,强化学习的代码,独立做过一些科研向项目.比较熟悉,不太喜欢python的语法,不太适合构建可靠项目. Go: 第一门掌握的生产级语言,用来写后端服务,工具,脚本,爬虫等.比较喜欢go的语法,并发模型,标准库,工具链等. Java: 本科期间教过java的面向对象,大二购买了how2j,一直晾在哪里,属于有时间两周就能学会的状态. Shell: 用来写一些简单的脚本,比如自动化部署,备份,清理等. JavaScript: 用来写一些简单的ajax,想着以后有时间学一下typescript和react等. Rust: 超级想学的语言,但又怕没工作机会,等稳定了再学吧. 领域知识 计算机后端技术: 主要是web开发,分布式系统,数据库,缓存,消息队列等. 云原生技术: 主要是k8s, docker, helm, argoCD, argo workflow等. 计算机网络: 主要是tcp/ip,http,https,websocket等. 机器学习: 深度学习,强化学习, 写过pytorch, tensorflow, keras等. 数据分析: 数据处理,数据可视化, 会用pandas, numpy, matplotlib, seaborn等. 等待队列 leetcode算法: 一直在刷,根本刷不完&amp;hellip; go项目: 正在做一些项目系统复习一下go的语法和各种数据组件. k8s方方面面: 正在学习中,希望产出一些k8s的文章. C++: 正在看,每周看2章. Model-based Reinforcement Learning for Industrial Applications: 这个项目和教授一起做的,快可以写论文了. 我的生活 忙里偷闲,和朋友一起去马来西亚玩.平时就是吃吃吃,玩玩游戏,看漫画.有谁喜欢看刃牙和拳愿会的吗?</description>
            <content type="html"><![CDATA[<h1 id="关于本站">关于本站</h1>
<p>本站是一个基于hugo的博客站点,主要用于记录我的学习和生活.</p>
<p>hugo是一个go语言写的静态网站生成器,它的速度非常快,并且支持markdown语法. 它的基于go-template,所以它的使用方法着实类似于其他生成器,比如helm.</p>
<h1 id="关于我">关于我</h1>
<p>Hello,这事是我,严珂宇,Sam,Greenery.</p>

    <img src="/images/author.jpg"  alt="Hello Friend"  class="center"  style="border-radius: 20px; width: 200px;"  />


<p>我是一位即将毕业的学生.我在NUS就读master,专业是计算机工程.我的本科是985大学的计算机科学与技术专业,排名还蛮靠前的,但是我觉得我还是有很多东西要学习.想出来看看世界,所以就来了新加坡.</p>
<p>我很幸运在刚来到新加坡就遇见了TikTok,并加入实习.虽然我的英语口语实在太可怜,而且我也不太会社交,但是我还是很开心能在这里工作.因为从leader,mentor到同事,都很nice.</p>
<p>这是我的简历:</p>
<ul>
<li><a href="/zh-cn/cv/cven.pdf">简历PDF</a></li>
</ul>
<h2 id="我的技术栈">我的技术栈</h2>
<h3 id="编程语言">编程语言</h3>
<ul>
<li>C/C++: 本科期间用来做课程作业,但不算精通.最近正在对着<a href="https://www.learncpp.com/">learncpp.com</a>复习.</li>
<li>Python: 用python写过一些数据处理,机器学习,深度学习,强化学习的代码,独立做过一些科研向项目.比较熟悉,不太喜欢python的语法,不太适合构建可靠项目.</li>
<li>Go: 第一门掌握的生产级语言,用来写后端服务,工具,脚本,爬虫等.比较喜欢go的语法,并发模型,标准库,工具链等.</li>
<li>Java: 本科期间教过java的面向对象,大二购买了how2j,一直晾在哪里,属于有时间两周就能学会的状态.</li>
<li>Shell: 用来写一些简单的脚本,比如自动化部署,备份,清理等.</li>
<li>JavaScript: 用来写一些简单的ajax,想着以后有时间学一下typescript和react等.</li>
<li>Rust: 超级想学的语言,但又怕没工作机会,等稳定了再学吧.</li>
</ul>
<h3 id="领域知识">领域知识</h3>
<ul>
<li>计算机后端技术: 主要是web开发,分布式系统,数据库,缓存,消息队列等.</li>
<li>云原生技术: 主要是k8s, docker, helm, argoCD, argo workflow等.</li>
<li>计算机网络: 主要是tcp/ip,http,https,websocket等.</li>
<li>机器学习: 深度学习,强化学习, 写过pytorch, tensorflow, keras等.</li>
<li>数据分析: 数据处理,数据可视化, 会用pandas, numpy, matplotlib, seaborn等.</li>
</ul>
<h3 id="等待队列">等待队列</h3>
<ul>
<li>leetcode算法: 一直在刷,根本刷不完&hellip;</li>
<li>go项目: 正在做一些项目系统复习一下go的语法和各种数据组件.</li>
<li>k8s方方面面: 正在学习中,希望产出一些k8s的文章.</li>
<li>C++: 正在看,每周看2章.</li>
<li>Model-based Reinforcement Learning for Industrial Applications: 这个项目和教授一起做的,快可以写论文了.</li>
</ul>
<h2 id="我的生活">我的生活</h2>
<p>忙里偷闲,和朋友一起去马来西亚玩.平时就是吃吃吃,玩玩游戏,看漫画.有谁喜欢看刃牙和拳愿会的吗?</p>
]]></content>
        </item>
        
        <item>
            <title>English in Action</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/english-learning/daily/english-in-action/</link>
            <pubDate>Sun, 19 May 2024 00:16:38 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/english-learning/daily/english-in-action/</guid>
            <description>English Learning Daily 我在写博客的时候是先写了中文,之后再翻译成英文的.这样的方式可以让我更好的练习英文,也可以让我更好的理解中文和英文之间的差异.
我可以在写博客的时候,学习一些新的英文单词,也可以学习一些英文的表达方式.这样的方式对我来说是非常有帮助的.
我会分析chatgpt给我翻译的英文,记录其中的单词,表达方式,语法等等.这样的方式可以让我更好的学习英文.
这个专题的文章命名方式是: 20010203-english-in-blog.md,其中的20010203是日期,english-in-blog是文章的标题.</description>
            <content type="html"><![CDATA[<h1 id="english-learning-daily">English Learning Daily</h1>
<p>我在写博客的时候是先写了中文,之后再翻译成英文的.这样的方式可以让我更好的练习英文,也可以让我更好的理解中文和英文之间的差异.</p>
<p>我可以在写博客的时候,学习一些新的英文单词,也可以学习一些英文的表达方式.这样的方式对我来说是非常有帮助的.</p>
<p>我会分析chatgpt给我翻译的英文,记录其中的单词,表达方式,语法等等.这样的方式可以让我更好的学习英文.</p>
<p>这个专题的文章命名方式是: <code>20010203-english-in-blog.md</code>,其中的<code>20010203</code>是日期,<code>english-in-blog</code>是文章的标题.</p>
]]></content>
        </item>
        
        <item>
            <title>Classification</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/hugo/site-building/classification/</link>
            <pubDate>Sat, 18 May 2024 20:56:05 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/hugo/site-building/classification/</guid>
            <description>文章的分类系统 文章的分类由tags和categories两个字段管理.tag用来做更加随意的分类,比如golang和gopher,categories用来做更加严格的 专题分类,比如go-dual-token-blog-system.
tags和categories的列表页面的url分别是/tags/和/categories/.这两个url被设置到了导航栏中,点击后可以查看所有的tags 和categories,非常方便.
唯一需要注意的是这个列表的排序方式默认是按时间的,所以尽量避免过多的tags和categories,否则会导致列表页面的混乱.
tags tag值可以随意填写,比如golang和gopher.任何语义的tag都可以填写.它被设置在markdown文件的front matter中,并且可以有多个tag.
建议填写单数形式的tag,比如rule而不是rules.这样可以避免tag的重复.
tags: - golang - gopher - hugo categories categories值是专题分类,比如go-project-dual-token-blog-system.它被设置在markdown文件的front matter中.
这个分类是分级的,比如go是一级分类,go-project是二级分类,go-project-dual-token-blog-system 是三级分类.子分类必须填写父分类,比如,对于在go-project-dual-token-blog-system分类下的文章,categories字段应该填写如下.
categories: - go - go-project - go-project-dual-token-blog-system 一篇文章可能是处于两个大分类下的,比如本文就可以同时处于hugo和go两个大分类下. 这种一定要谨慎考虑,不要乱填写.</description>
            <content type="html"><![CDATA[<h1 id="文章的分类系统">文章的分类系统</h1>
<p>文章的分类由<code>tags</code>和<code>categories</code>两个字段管理.<code>tag</code>用来做更加随意的分类,比如<code>golang</code>和<code>gopher</code>,<code>categories</code>用来做更加严格的
<strong>专题</strong>分类,比如<code>go-dual-token-blog-system</code>.</p>
<p><code>tags</code>和<code>categories</code>的列表页面的url分别是<code>/tags/</code>和<code>/categories/</code>.这两个url被设置到了导航栏中,点击后可以查看所有的<code>tags</code>
和<code>categories</code>,非常方便.</p>
<p>唯一需要注意的是这个列表的排序方式默认是按时间的,所以尽量避免过多的<code>tags</code>和<code>categories</code>,否则会导致列表页面的混乱.</p>
<h2 id="tags">tags</h2>
<p>tag值可以随意填写,比如<code>golang</code>和<code>gopher</code>.任何语义的tag都可以填写.它被设置在markdown文件的front matter中,并且可以有多个tag.</p>
<p>建议填写单数形式的tag,比如<code>rule</code>而不是<code>rules</code>.这样可以避免tag的重复.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">tags</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">golang</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">gopher</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">hugo</span>
</span></span></code></pre></div><h2 id="categories">categories</h2>
<p>categories值是专题分类,比如<code>go-project-dual-token-blog-system</code>.它被设置在markdown文件的front matter中.</p>
<p>这个分类是分级的,比如<code>go</code>是一级分类,<code>go-project</code>是二级分类,<code>go-project-dual-token-blog-system</code>
是三级分类.子分类必须填写父分类,比如,对于在<code>go-project-dual-token-blog-system</code>分类下的文章,<code>categories</code>字段应该填写如下.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">categories</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">go</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">go-project</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">go-project-dual-token-blog-system</span>
</span></span></code></pre></div><p>一篇文章可能是处于两个大分类下的,比如本文就可以同时处于<code>hugo</code>和<code>go</code>两个大分类下. 这种一定要谨慎考虑,不要乱填写.</p>
]]></content>
        </item>
        
        <item>
            <title>Two-Year Old Gopher</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/go/two-year-old-gopher/</link>
            <pubDate>Sat, 18 May 2024 20:49:18 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/go/two-year-old-gopher/</guid>
            <description>一个2年的go语言使用者 我从20222年10月开始接触go语言,到现在已经有2年了. 接触了go语言的我,对go语言有了一定的了解,并且在工作中也有了一定的实践.我想分享一下我对go语言的一些看法.
为什么学go? 我当时正在选择一门技术来让我在中国的互联网行业有一席之地.当时疫情刚结束,当年毕业的毕业生都说java就业形势不好,工作难找.大三的我选择了留学,离毕业还有2年,非常迷茫.我就去问我的老程序员伯伯,他让我试试golang,他们也在用.
漫漫学习路 于是我就开始学习这门语言.我必须要感谢他,仅从初级程序员学习来说,go非常舒服.go和rust作为新兴语言,都有着非常清晰的学习路径和几乎不存在的历史包袱.这对于初学者来说是非常友好的.
于是我学习了go的语法,go的并发,一些数据组件的go sdk,以及go的一些框架.我发现go的并发非常好用,go的sdk也非常丰富,go的框架也非常多.我也在工作中使用go写了一些小工具,也写了一些小服务.
我还参加了goCN的线下活动,在北京和go学友面基.那是疫情之后的第一届,在北京举行,前一天我还在拉萨,脑子一热,一个晚上我就赶到了北京,还要有江达哥收留,我在北京的这几天非常开心.
go语言的明星项目是docker和k8s,这两个项目都是用go语言写的.这两个项目的成功也让go语言在云计算领域有了一席之地,成功在老牌强劲语言java和c++的领域站稳了脚跟.
我后来业学习了云原生技术,但是一直在学习中,我觉得我要系统的学习它,因为我着实入了这一行.go语言成就了我.我在新加坡成为了TikTok Cloud infra的实习生,我也在这里学习了很多东西.
道阻且长 来到新加坡,并以go语言作为工作内容,这是对我最好的安排.我也许还要继续精进自己的go语言技术,也许还要学习更多的云原生技术,也许还要学习更多的东西.但是我相信,我会一直走下去,直到我不再喜欢这个行业.
当然,成为实习生和成为正式员工还是有很大的努力需要做出.介于形势,我需要同时学习leetcode算法,通用go后端技术,k8s为核心的云原生技术.我也许还要学习其他语言技术,比如系统学习cpp或pytorch,来保证我的就业广度.
这个专题会有什么? 目前我想把我之前做过的一些通用的go后端知识点都放在这个专题.这个go专题近期至少会有以下内容:
数据库专题 消息队列专题 安全与加密专题 网络编程专题 练手项目: 博客系统: 其实是本网站的前身,基于gin框架的单体,全部组件包括mysql和redis都是容器化的.鉴权部分设计了双token机制. 维护成本比较高,于是转向了hugo. 抽奖系统: 这里会是高并发技巧的融合练习. gpc框架: 这是一个基于go的rpc框架,我会在这里实现一个简单的rpc框架. 分布式搜索系统: 一个比较高级的练手项目,会涉及到分布式系统的一些知识. go语言的基础语法和go语言的并发可能近期不会有,因为他们又是一个很大的专题,我需要时间来整理.</description>
            <content type="html"><![CDATA[<h1 id="一个2年的go语言使用者">一个2年的go语言使用者</h1>
<p>我从20222年10月开始接触go语言,到现在已经有2年了. 接触了go语言的我,对go语言有了一定的了解,并且在工作中也有了一定的实践.我想分享一下我对go语言的一些看法.</p>
<h2 id="为什么学go">为什么学go?</h2>
<p>我当时正在选择一门技术来让我在中国的互联网行业有一席之地.当时疫情刚结束,当年毕业的毕业生都说java就业形势不好,工作难找.大三的我选择了留学,离毕业还有2年,非常迷茫.我就去问我的老程序员伯伯,他让我试试golang,他们也在用.</p>
<h2 id="漫漫学习路">漫漫学习路</h2>
<p>于是我就开始学习这门语言.我必须要感谢他,仅从初级程序员学习来说,go非常舒服.go和rust作为新兴语言,都有着非常清晰的学习路径和几乎不存在的历史包袱.这对于初学者来说是非常友好的.</p>
<p>于是我学习了go的语法,go的并发,一些数据组件的go sdk,以及go的一些框架.我发现go的并发非常好用,go的sdk也非常丰富,go的框架也非常多.我也在工作中使用go写了一些小工具,也写了一些小服务.</p>
<p>我还参加了goCN的线下活动,在北京和go学友面基.那是疫情之后的第一届,在北京举行,前一天我还在拉萨,脑子一热,一个晚上我就赶到了北京,还要有江达哥收留,我在北京的这几天非常开心.</p>
<p>go语言的明星项目是docker和k8s,这两个项目都是用go语言写的.这两个项目的成功也让go语言在云计算领域有了一席之地,成功在老牌强劲语言java和c++的领域站稳了脚跟.</p>
<p>我后来业学习了云原生技术,但是一直在学习中,我觉得我要系统的学习它,因为我着实入了这一行.go语言成就了我.我在新加坡成为了TikTok Cloud infra的实习生,我也在这里学习了很多东西.</p>
<h2 id="道阻且长">道阻且长</h2>
<p>来到新加坡,并以go语言作为工作内容,这是对我最好的安排.我也许还要继续精进自己的go语言技术,也许还要学习更多的云原生技术,也许还要学习更多的东西.但是我相信,我会一直走下去,直到我不再喜欢这个行业.</p>
<p>当然,成为实习生和成为正式员工还是有很大的努力需要做出.介于形势,我需要同时学习leetcode算法,通用go后端技术,k8s为核心的云原生技术.我也许还要学习其他语言技术,比如系统学习cpp或pytorch,来保证我的就业广度.</p>
<h2 id="这个专题会有什么">这个专题会有什么?</h2>
<p>目前我想把我之前做过的一些通用的go后端知识点都放在这个专题.这个go专题近期至少会有以下内容:</p>
<ul>
<li><strong>数据库专题</strong></li>
<li><strong>消息队列专题</strong></li>
<li><strong>安全与加密专题</strong></li>
<li><strong>网络编程专题</strong></li>
<li>练手项目:
<ul>
<li><strong>博客系统</strong>: 其实是本网站的前身,基于gin框架的单体,全部组件包括mysql和redis都是容器化的.鉴权部分设计了双token机制. 维护成本比较高,于是转向了hugo.</li>
<li><strong>抽奖系统</strong>: 这里会是高并发技巧的融合练习.</li>
<li><strong>gpc框架</strong>: 这是一个基于go的rpc框架,我会在这里实现一个简单的rpc框架.</li>
<li><strong>分布式搜索系统</strong>: 一个比较高级的练手项目,会涉及到分布式系统的一些知识.</li>
</ul>
</li>
</ul>
<p>go语言的基础语法和go语言的并发可能近期不会有,因为他们又是一个很大的专题,我需要时间来整理.</p>
]]></content>
        </item>
        
    </channel>
</rss>
