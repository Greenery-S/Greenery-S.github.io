<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Greenery&#39;s Blog Site</title>
        <link>https://Greenery-S.github.io/zh-cn/posts/</link>
        <description>Recent content in Posts on Greenery&#39;s Blog Site</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 04 Jun 2024 00:31:42 +0800</lastBuildDate>
        <atom:link href="https://Greenery-S.github.io/zh-cn/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Setup Local Pytorch</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/pytorch/setup-local-pytorch/</link>
            <pubDate>Tue, 04 Jun 2024 00:31:42 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/pytorch/setup-local-pytorch/</guid>
            <description>本地建设pytorch环境 1. 安装miniconda 可以使用pycharm自动安装,也可以手动安装.
检查是不是有jupyter notebook 和 jupyter lab
如果上面的都ok,那么就可以安装pytorch了.
2. 创建一个新的conda环境 conda create -n torch-gpu python=3.9 conda activate torch-gpu 3. 安装pytorch 到官网下载pytorch的安装命令 https://pytorch.org/ 可以是conda/pip的命令
4. 将kernel注册到jupyter lab conda install ipykernel sudo python -m ipykernel install --name=torch-gpu 5. 打开jupyter lab jupyter lab 6. 测试pytorch (apple silicon m1) 选取注册的kernel,然后运行代码:
test1.py
import torch import math # this ensures that the current MacOS version is at least 12.3+ print(torch.backends.mps.is_available()) # this ensures that the current current PyTorch installation was built with MPS activated.</description>
            <content type="html"><![CDATA[<h1 id="本地建设pytorch环境">本地建设pytorch环境</h1>
<h2 id="1-安装miniconda">1. 安装miniconda</h2>
<p>可以使用pycharm自动安装,也可以手动安装.</p>
<p>检查是不是有jupyter notebook 和 jupyter lab</p>
<p>如果上面的都ok,那么就可以安装pytorch了.</p>
<h2 id="2-创建一个新的conda环境">2. 创建一个新的conda环境</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>conda create -n torch-gpu python<span style="color:#f92672">=</span>3.9
</span></span><span style="display:flex;"><span>conda activate torch-gpu
</span></span></code></pre></div><h2 id="3-安装pytorch">3. 安装pytorch</h2>
<p>到官网下载pytorch的安装命令 <a href="https://pytorch.org/">https://pytorch.org/</a>
可以是conda/pip的命令</p>
<h2 id="4-将kernel注册到jupyter-lab">4. 将kernel注册到jupyter lab</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>conda install ipykernel
</span></span><span style="display:flex;"><span>sudo python -m ipykernel install --name<span style="color:#f92672">=</span>torch-gpu
</span></span></code></pre></div><h2 id="5-打开jupyter-lab">5. 打开jupyter lab</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>jupyter lab
</span></span></code></pre></div><h2 id="6-测试pytorch-apple-silicon-m1">6. 测试pytorch (apple silicon m1)</h2>
<p>选取注册的kernel,然后运行代码:</p>
<p>test1.py</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> torch
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> math
</span></span><span style="display:flex;"><span><span style="color:#75715e"># this ensures that the current MacOS version is at least 12.3+</span>
</span></span><span style="display:flex;"><span>print(torch<span style="color:#f92672">.</span>backends<span style="color:#f92672">.</span>mps<span style="color:#f92672">.</span>is_available())
</span></span><span style="display:flex;"><span><span style="color:#75715e"># this ensures that the current current PyTorch installation was built with MPS activated.</span>
</span></span><span style="display:flex;"><span>print(torch<span style="color:#f92672">.</span>backends<span style="color:#f92672">.</span>mps<span style="color:#f92672">.</span>is_built())
</span></span></code></pre></div><p>test2.py</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>dtype <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>float
</span></span><span style="display:flex;"><span>device <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>device(<span style="color:#e6db74">&#34;mps&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create random input and output data</span>
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>linspace(<span style="color:#f92672">-</span>math<span style="color:#f92672">.</span>pi, math<span style="color:#f92672">.</span>pi, <span style="color:#ae81ff">2000</span>, device<span style="color:#f92672">=</span>device, dtype<span style="color:#f92672">=</span>dtype)
</span></span><span style="display:flex;"><span>y <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>sin(x)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Randomly initialize weights</span>
</span></span><span style="display:flex;"><span>a <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>randn((), device<span style="color:#f92672">=</span>device, dtype<span style="color:#f92672">=</span>dtype)
</span></span><span style="display:flex;"><span>b <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>randn((), device<span style="color:#f92672">=</span>device, dtype<span style="color:#f92672">=</span>dtype)
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>randn((), device<span style="color:#f92672">=</span>device, dtype<span style="color:#f92672">=</span>dtype)
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>randn((), device<span style="color:#f92672">=</span>device, dtype<span style="color:#f92672">=</span>dtype)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>learning_rate <span style="color:#f92672">=</span> <span style="color:#ae81ff">1e-6</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> t <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">2000</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Forward pass: compute predicted y</span>
</span></span><span style="display:flex;"><span>    y_pred <span style="color:#f92672">=</span> a <span style="color:#f92672">+</span> b <span style="color:#f92672">*</span> x <span style="color:#f92672">+</span> c <span style="color:#f92672">*</span> x <span style="color:#f92672">**</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">+</span> d <span style="color:#f92672">*</span> x <span style="color:#f92672">**</span> <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Compute and print loss</span>
</span></span><span style="display:flex;"><span>    loss <span style="color:#f92672">=</span> (y_pred <span style="color:#f92672">-</span> y)<span style="color:#f92672">.</span>pow(<span style="color:#ae81ff">2</span>)<span style="color:#f92672">.</span>sum()<span style="color:#f92672">.</span>item()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> t <span style="color:#f92672">%</span> <span style="color:#ae81ff">100</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">99</span>:
</span></span><span style="display:flex;"><span>        print(t, loss)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Backprop to compute gradients of a, b, c, d with respect to loss</span>
</span></span><span style="display:flex;"><span>    grad_y_pred <span style="color:#f92672">=</span> <span style="color:#ae81ff">2.0</span> <span style="color:#f92672">*</span> (y_pred <span style="color:#f92672">-</span> y)
</span></span><span style="display:flex;"><span>    grad_a <span style="color:#f92672">=</span> grad_y_pred<span style="color:#f92672">.</span>sum()
</span></span><span style="display:flex;"><span>    grad_b <span style="color:#f92672">=</span> (grad_y_pred <span style="color:#f92672">*</span> x)<span style="color:#f92672">.</span>sum()
</span></span><span style="display:flex;"><span>    grad_c <span style="color:#f92672">=</span> (grad_y_pred <span style="color:#f92672">*</span> x <span style="color:#f92672">**</span> <span style="color:#ae81ff">2</span>)<span style="color:#f92672">.</span>sum()
</span></span><span style="display:flex;"><span>    grad_d <span style="color:#f92672">=</span> (grad_y_pred <span style="color:#f92672">*</span> x <span style="color:#f92672">**</span> <span style="color:#ae81ff">3</span>)<span style="color:#f92672">.</span>sum()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Update weights using gradient descent</span>
</span></span><span style="display:flex;"><span>    a <span style="color:#f92672">-=</span> learning_rate <span style="color:#f92672">*</span> grad_a
</span></span><span style="display:flex;"><span>    b <span style="color:#f92672">-=</span> learning_rate <span style="color:#f92672">*</span> grad_b
</span></span><span style="display:flex;"><span>    c <span style="color:#f92672">-=</span> learning_rate <span style="color:#f92672">*</span> grad_c
</span></span><span style="display:flex;"><span>    d <span style="color:#f92672">-=</span> learning_rate <span style="color:#f92672">*</span> grad_d
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;Result: y = </span><span style="color:#e6db74">{</span>a<span style="color:#f92672">.</span>item()<span style="color:#e6db74">}</span><span style="color:#e6db74"> + </span><span style="color:#e6db74">{</span>b<span style="color:#f92672">.</span>item()<span style="color:#e6db74">}</span><span style="color:#e6db74"> x + </span><span style="color:#e6db74">{</span>c<span style="color:#f92672">.</span>item()<span style="color:#e6db74">}</span><span style="color:#e6db74"> x^2 + </span><span style="color:#e6db74">{</span>d<span style="color:#f92672">.</span>item()<span style="color:#e6db74">}</span><span style="color:#e6db74"> x^3&#39;</span>)
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Fundamental</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/pytorch/review/fundamental/</link>
            <pubDate>Tue, 04 Jun 2024 00:05:06 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/pytorch/review/fundamental/</guid>
            <description>fundamentals import torch torch.__version__ &#39;2.4.0.dev20240602&#39; 1 Tensor #TODO: 读文档 torch.Tensor
1.1 scalar scalar = torch.tensor(9) scalar tensor(9) scalar.ndim, scalar.ndimension() (0, 0) scalar.item() 9 1.2 vector vector = torch.tensor([9, 9, 9]) vector tensor([9, 9, 9]) vector.ndim 1 vector.shape torch.Size([3]) 1.3 matrix matrix = torch.tensor([[9, 9, 9], [9, 9, 9]]) matrix tensor([[9, 9, 9], [9, 9, 9]]) matrix.ndim 2 matrix.shape torch.Size([2, 3]) matrix.size() torch.Size([2, 3]) 1.4 tensor tensor = torch.tensor( [ #dim0, 这对括号里面有两个matrix [ #dim1, 这对括号里面有三个vector [ #dim2, 这对括号里面有三个scalar 1, 2, 3, ], [1, 2, 3], [1, 2, 3] ], [ #dim1 [1, 2, 3], [1, 2, 3], [1, 2, 3] ] ] ) tensor tensor([[[1, 2, 3], [1, 2, 3], [1, 2, 3]], [[1, 2, 3], [1, 2, 3], [1, 2, 3]]]) tensor.</description>
            <content type="html"><![CDATA[<h1 id="fundamentals">fundamentals</h1>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> torch
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>torch<span style="color:#f92672">.</span>__version__
</span></span></code></pre></div><pre><code>'2.4.0.dev20240602'
</code></pre>
<h2 id="1-tensor">1 Tensor</h2>
<p>#TODO: 读文档 <a href="https://pytorch.org/docs/stable/tensors.html"><code>torch.Tensor</code></a></p>
<h3 id="11-scalar">1.1 scalar</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>scalar <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>tensor(<span style="color:#ae81ff">9</span>)
</span></span><span style="display:flex;"><span>scalar
</span></span></code></pre></div><pre><code>tensor(9)
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>scalar<span style="color:#f92672">.</span>ndim, scalar<span style="color:#f92672">.</span>ndimension()
</span></span></code></pre></div><pre><code>(0, 0)
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>scalar<span style="color:#f92672">.</span>item()
</span></span></code></pre></div><pre><code>9
</code></pre>
<h3 id="12-vector">1.2 vector</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>vector <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>tensor([<span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">9</span>])
</span></span><span style="display:flex;"><span>vector
</span></span></code></pre></div><pre><code>tensor([9, 9, 9])
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>vector<span style="color:#f92672">.</span>ndim
</span></span></code></pre></div><pre><code>1
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>vector<span style="color:#f92672">.</span>shape
</span></span></code></pre></div><pre><code>torch.Size([3])
</code></pre>
<h3 id="13-matrix">1.3 matrix</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>matrix <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>tensor([[<span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">9</span>],
</span></span><span style="display:flex;"><span>                       [<span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">9</span>]])
</span></span><span style="display:flex;"><span>matrix
</span></span></code></pre></div><pre><code>tensor([[9, 9, 9],
        [9, 9, 9]])
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>matrix<span style="color:#f92672">.</span>ndim
</span></span></code></pre></div><pre><code>2
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>matrix<span style="color:#f92672">.</span>shape
</span></span></code></pre></div><pre><code>torch.Size([2, 3])
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>matrix<span style="color:#f92672">.</span>size()
</span></span></code></pre></div><pre><code>torch.Size([2, 3])
</code></pre>
<h3 id="14-tensor">1.4 tensor</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>tensor <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>tensor(
</span></span><span style="display:flex;"><span>    [  <span style="color:#75715e">#dim0, 这对括号里面有两个matrix</span>
</span></span><span style="display:flex;"><span>        [  <span style="color:#75715e">#dim1, 这对括号里面有三个vector</span>
</span></span><span style="display:flex;"><span>            [  <span style="color:#75715e">#dim2, 这对括号里面有三个scalar</span>
</span></span><span style="display:flex;"><span>                <span style="color:#ae81ff">1</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#ae81ff">2</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#ae81ff">3</span>,
</span></span><span style="display:flex;"><span>            ],
</span></span><span style="display:flex;"><span>            [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>],
</span></span><span style="display:flex;"><span>            [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>]
</span></span><span style="display:flex;"><span>        ],
</span></span><span style="display:flex;"><span>        [  <span style="color:#75715e">#dim1</span>
</span></span><span style="display:flex;"><span>            [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>],
</span></span><span style="display:flex;"><span>            [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>],
</span></span><span style="display:flex;"><span>            [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>]
</span></span><span style="display:flex;"><span>        ]
</span></span><span style="display:flex;"><span>    ]
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>tensor
</span></span></code></pre></div><pre><code>tensor([[[1, 2, 3],
         [1, 2, 3],
         [1, 2, 3]],

        [[1, 2, 3],
         [1, 2, 3],
         [1, 2, 3]]])
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>tensor<span style="color:#f92672">.</span>ndim
</span></span></code></pre></div><pre><code>3
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>tensor<span style="color:#f92672">.</span>shape
</span></span></code></pre></div><pre><code>torch.Size([2, 3, 3])
</code></pre>
<h2 id="2-random-tensor">2 random tensor</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ramdom_tensor <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>rand(size<span style="color:#f92672">=</span>(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>))
</span></span><span style="display:flex;"><span>ramdom_tensor, ramdom_tensor<span style="color:#f92672">.</span>dtype
</span></span></code></pre></div><pre><code>(tensor([[0.9508, 0.0344, 0.1949, 0.2121],
         [0.6301, 0.8800, 0.0905, 0.8551],
         [0.1719, 0.8458, 0.5306, 0.7635]]),
 torch.float32)
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>random_image_size_tensor <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>rand(size<span style="color:#f92672">=</span>(<span style="color:#ae81ff">224</span>, <span style="color:#ae81ff">224</span>, <span style="color:#ae81ff">3</span>))
</span></span><span style="display:flex;"><span>random_image_size_tensor<span style="color:#f92672">.</span>shape, random_image_size_tensor<span style="color:#f92672">.</span>ndim
</span></span></code></pre></div><pre><code>(torch.Size([224, 224, 3]), 3)
</code></pre>
<h2 id="3-zeros-and-ones">3 zeros and ones</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>zeros <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>zeros(size<span style="color:#f92672">=</span>(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>))
</span></span><span style="display:flex;"><span>zeros, zeros<span style="color:#f92672">.</span>dtype
</span></span></code></pre></div><pre><code>(tensor([[0., 0., 0., 0.],
         [0., 0., 0., 0.],
         [0., 0., 0., 0.]]),
 torch.float32)
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ones <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>ones(size<span style="color:#f92672">=</span>(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>))
</span></span><span style="display:flex;"><span>ones, ones<span style="color:#f92672">.</span>dtype
</span></span></code></pre></div><pre><code>(tensor([[1., 1., 1., 1.],
         [1., 1., 1., 1.],
         [1., 1., 1., 1.]]),
 torch.float32)
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Use torch.arange(), torch.range() is deprecated </span>
</span></span><span style="display:flex;"><span>zero_to_ten_deprecated <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>range(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>zero_to_ten <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>arange(start<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, end<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>, step<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>zero_to_ten
</span></span></code></pre></div><pre><code>/var/folders/jw/r2366h9x7y99tvnxp8fzcrdh0000gn/T/ipykernel_18720/2515304713.py:2: UserWarning: torch.range is deprecated and will be removed in a future release because its behavior is inconsistent with Python's range builtin. Instead, use torch.arange, which produces values in [start, end).
  zero_to_ten_deprecated = torch.range(0, 10)





tensor([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>ten_zeros <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>zeros_like(input<span style="color:#f92672">=</span>zero_to_ten)
</span></span><span style="display:flex;"><span>ten_zeros
</span></span></code></pre></div><pre><code>tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
</code></pre>
<h2 id="4-tensor-data-type">4 tensor data type</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>float_32_tensor <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>tensor([<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>],
</span></span><span style="display:flex;"><span>                               dtype<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>,  <span style="color:#75715e"># default is float32</span>
</span></span><span style="display:flex;"><span>                               device<span style="color:#f92672">=</span><span style="color:#66d9ef">None</span>,  <span style="color:#75715e"># default is cpu</span>
</span></span><span style="display:flex;"><span>                               requires_grad<span style="color:#f92672">=</span><span style="color:#66d9ef">False</span>,
</span></span><span style="display:flex;"><span>                               <span style="color:#75715e"># if True, the tensor will keep track of the operations that created it</span>
</span></span><span style="display:flex;"><span>                               )
</span></span><span style="display:flex;"><span>float_32_tensor<span style="color:#f92672">.</span>shape, float_32_tensor<span style="color:#f92672">.</span>dtype, float_32_tensor<span style="color:#f92672">.</span>device, float_32_tensor<span style="color:#f92672">.</span>requires_grad
</span></span></code></pre></div><pre><code>(torch.Size([3]), torch.int64, device(type='cpu'), False)
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>float_16_tensor <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>tensor([<span style="color:#ae81ff">3.0</span>, <span style="color:#ae81ff">6.0</span>, <span style="color:#ae81ff">9.0</span>],
</span></span><span style="display:flex;"><span>                               dtype<span style="color:#f92672">=</span>torch<span style="color:#f92672">.</span>float16)  <span style="color:#75715e"># torch.half would also work</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>float_16_tensor<span style="color:#f92672">.</span>dtype
</span></span></code></pre></div><pre><code>torch.float16
</code></pre>
<h2 id="5-tensor-operations">5 tensor operations</h2>
<p>These operations are often a wonderful dance between:</p>
<ul>
<li>Addition</li>
<li>Substraction</li>
<li>Multiplication (element-wise)</li>
<li>Division</li>
<li>Matrix multiplication</li>
</ul>
<h3 id="51-basic-operations">5.1 basic operations</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>tensor <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>tensor([<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>])
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Tensors don&#39;t change unless reassigned, when you do an operation, you need to assign it to a new tensor</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>tensor <span style="color:#f92672">+</span> <span style="color:#ae81ff">10</span>, torch<span style="color:#f92672">.</span>add(tensor, <span style="color:#ae81ff">10</span>)
</span></span></code></pre></div><pre><code>(tensor([11, 12, 13]), tensor([11, 12, 13]))
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>tensor <span style="color:#f92672">-</span> <span style="color:#ae81ff">10</span>, torch<span style="color:#f92672">.</span>sub(tensor, <span style="color:#ae81ff">10</span>)
</span></span></code></pre></div><pre><code>(tensor([-9, -8, -7]), tensor([-9, -8, -7]))
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>tensor <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span>, torch<span style="color:#f92672">.</span>multiply(tensor, <span style="color:#ae81ff">10</span>), torch<span style="color:#f92672">.</span>mul(tensor, <span style="color:#ae81ff">10</span>)
</span></span></code></pre></div><pre><code>(tensor([10, 20, 30]), tensor([10, 20, 30]), tensor([10, 20, 30]))
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>tensor <span style="color:#f92672">/</span> <span style="color:#ae81ff">10</span>, torch<span style="color:#f92672">.</span>divide(tensor, <span style="color:#ae81ff">10</span>), torch<span style="color:#f92672">.</span>div(tensor, <span style="color:#ae81ff">10</span>)
</span></span></code></pre></div><pre><code>(tensor([0.1000, 0.2000, 0.3000]),
 tensor([0.1000, 0.2000, 0.3000]),
 tensor([0.1000, 0.2000, 0.3000]))
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Element-wise multiplication (each element multiplies its equivalent, index 0-&gt;0, 1-&gt;1, 2-&gt;2)</span>
</span></span><span style="display:flex;"><span>tensor <span style="color:#f92672">*</span> tensor, torch<span style="color:#f92672">.</span>mul(tensor, tensor)
</span></span></code></pre></div><pre><code>(tensor([1, 4, 9]), tensor([1, 4, 9]))
</code></pre>
<h3 id="52-matrix-multiplication-is-all-you-need">5.2 matrix multiplication (is all you need)</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> torch
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>tensor <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>tensor([<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>])
</span></span><span style="display:flex;"><span>tensor<span style="color:#f92672">.</span>shape
</span></span></code></pre></div><pre><code>torch.Size([3])
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>tensor <span style="color:#f92672">*</span> tensor, torch<span style="color:#f92672">.</span>mul(tensor, tensor)
</span></span></code></pre></div><pre><code>(tensor([1, 4, 9]), tensor([1, 4, 9]))
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>tensor <span style="color:#f92672">@</span> tensor, torch<span style="color:#f92672">.</span>matmul(tensor, tensor)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># torch.mm(tensor, tensor) this will error, as the tensors are not matrices</span>
</span></span></code></pre></div><pre><code>(tensor(14), tensor(14))
</code></pre>
<h3 id="53-common-error-shape-mismatch">5.3 common error, shape mismatch</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Shapes need to be in the right way  </span>
</span></span><span style="display:flex;"><span>tensor_A <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>tensor([[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>],
</span></span><span style="display:flex;"><span>                         [<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>],
</span></span><span style="display:flex;"><span>                         [<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">6</span>]], dtype<span style="color:#f92672">=</span>torch<span style="color:#f92672">.</span>float32)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>tensor_B <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>tensor([[<span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">10</span>],
</span></span><span style="display:flex;"><span>                         [<span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">11</span>],  <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>                         [<span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">12</span>]], dtype<span style="color:#f92672">=</span>torch<span style="color:#f92672">.</span>float32)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>torch<span style="color:#f92672">.</span>matmul(tensor_A, tensor_B)  <span style="color:#75715e"># (this will error)</span>
</span></span></code></pre></div><pre><code>---------------------------------------------------------------------------

RuntimeError                              Traceback (most recent call last)

Cell In[32], line 10
      2 tensor_A = torch.tensor([[1, 2],
      3                          [3, 4],
      4                          [5, 6]], dtype=torch.float32)
      6 tensor_B = torch.tensor([[7, 10],
      7                          [8, 11],  #
      8                          [9, 12]], dtype=torch.float32)
---&gt; 10 torch.matmul(tensor_A, tensor_B)


RuntimeError: mat1 and mat2 shapes cannot be multiplied (3x2 and 3x2)
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>print(tensor_A)
</span></span><span style="display:flex;"><span>print(tensor_B)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>print(tensor_A)
</span></span><span style="display:flex;"><span>print(tensor_B<span style="color:#f92672">.</span>T)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># The operation works when tensor_B is transposed</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Original shapes: tensor_A = </span><span style="color:#e6db74">{</span>tensor_A<span style="color:#f92672">.</span>shape<span style="color:#e6db74">}</span><span style="color:#e6db74">, tensor_B = </span><span style="color:#e6db74">{</span>tensor_B<span style="color:#f92672">.</span>shape<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;New shapes: tensor_A = </span><span style="color:#e6db74">{</span>tensor_A<span style="color:#f92672">.</span>shape<span style="color:#e6db74">}</span><span style="color:#e6db74"> (same as above), tensor_B.T = </span><span style="color:#e6db74">{</span>tensor_B<span style="color:#f92672">.</span>T<span style="color:#f92672">.</span>shape<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Multiplying: </span><span style="color:#e6db74">{</span>tensor_A<span style="color:#f92672">.</span>shape<span style="color:#e6db74">}</span><span style="color:#e6db74"> * </span><span style="color:#e6db74">{</span>tensor_B<span style="color:#f92672">.</span>T<span style="color:#f92672">.</span>shape<span style="color:#e6db74">}</span><span style="color:#e6db74"> &lt;- inner dimensions match</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Output:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>output <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>matmul(tensor_A, tensor_B<span style="color:#f92672">.</span>T)
</span></span><span style="display:flex;"><span>print(output)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Output shape: </span><span style="color:#e6db74">{</span>output<span style="color:#f92672">.</span>shape<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>tensor_A <span style="color:#f92672">@</span> tensor_B<span style="color:#f92672">.</span>T, torch<span style="color:#f92672">.</span>matmul(tensor_A, tensor_B<span style="color:#f92672">.</span>T), torch<span style="color:#f92672">.</span>mm(tensor_A, tensor_B<span style="color:#f92672">.</span>T)
</span></span></code></pre></div><h3 id="54-linear-layer">5.4 linear layer</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>torch<span style="color:#f92672">.</span>manual_seed(<span style="color:#ae81ff">42</span>)
</span></span><span style="display:flex;"><span>linear <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>nn<span style="color:#f92672">.</span>Linear(in_features<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>, out_features<span style="color:#f92672">=</span><span style="color:#ae81ff">6</span>)
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">=</span> tensor_A
</span></span><span style="display:flex;"><span>output <span style="color:#f92672">=</span> linear(x)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Input shape: </span><span style="color:#e6db74">{</span>x<span style="color:#f92672">.</span>shape<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Output:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">{</span>output<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">Output shape: </span><span style="color:#e6db74">{</span>output<span style="color:#f92672">.</span>shape<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><pre><code>Input shape: torch.Size([3, 2])

Output:
tensor([[2.2368, 1.2292, 0.4714, 0.3864, 0.1309, 0.9838],
        [4.4919, 2.1970, 0.4469, 0.5285, 0.3401, 2.4777],
        [6.7469, 3.1648, 0.4224, 0.6705, 0.5493, 3.9716]],
       grad_fn=&lt;AddmmBackward0&gt;)

Output shape: torch.Size([3, 6])
</code></pre>
<h2 id="6-aggregation-sum-mean-max-min-etc">6 aggregation: sum, mean, max, min, etc</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>x <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>arange(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">100</span>, <span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>x, x<span style="color:#f92672">.</span>dtype
</span></span></code></pre></div><pre><code>(tensor([ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90]), torch.int64)
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Minimum: </span><span style="color:#e6db74">{</span>x<span style="color:#f92672">.</span>min()<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Maximum: </span><span style="color:#e6db74">{</span>x<span style="color:#f92672">.</span>max()<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># print(f&#34;Mean: {x.mean()}&#34;) # this will error</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Mean: </span><span style="color:#e6db74">{</span>x<span style="color:#f92672">.</span>type(torch<span style="color:#f92672">.</span>float32)<span style="color:#f92672">.</span>mean()<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)  <span style="color:#75715e"># won&#39;t work without float datatype</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Sum: </span><span style="color:#e6db74">{</span>x<span style="color:#f92672">.</span>sum()<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><pre><code>Minimum: 0
Maximum: 90
Mean: 45.0
Sum: 450
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>torch<span style="color:#f92672">.</span>max(x), torch<span style="color:#f92672">.</span>min(x), torch<span style="color:#f92672">.</span>mean(x<span style="color:#f92672">.</span>type(torch<span style="color:#f92672">.</span>float32)), torch<span style="color:#f92672">.</span>sum(x)
</span></span></code></pre></div><pre><code>(tensor(90), tensor(0), tensor(45.), tensor(450))
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Create a tensor</span>
</span></span><span style="display:flex;"><span>tensor <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>arange(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">100</span>, <span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Tensor: </span><span style="color:#e6db74">{</span>tensor<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Returns index of max and min values</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Index where max value occurs: </span><span style="color:#e6db74">{</span>tensor<span style="color:#f92672">.</span>argmax()<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Index where min value occurs: </span><span style="color:#e6db74">{</span>tensor<span style="color:#f92672">.</span>argmin()<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><pre><code>Tensor: tensor([10, 20, 30, 40, 50, 60, 70, 80, 90])
Index where max value occurs: 8
Index where min value occurs: 0
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>torch<span style="color:#f92672">.</span>argmax(tensor), torch<span style="color:#f92672">.</span>argmin(tensor)
</span></span></code></pre></div><pre><code>(tensor(8), tensor(0))
</code></pre>
<h2 id="7-change-data-type">7 change data type</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>tensor<span style="color:#f92672">.</span>type(torch<span style="color:#f92672">.</span>float16)
</span></span></code></pre></div><pre><code>tensor([10., 20., 30., 40., 50., 60., 70., 80., 90.], dtype=torch.float16)
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>tensor<span style="color:#f92672">.</span>type(torch<span style="color:#f92672">.</span>int8)
</span></span></code></pre></div><pre><code>tensor([10, 20, 30, 40, 50, 60, 70, 80, 90], dtype=torch.int8)
</code></pre>
<h2 id="8-reshapestackingsqueezeunsqueeze">8 <strong>reshape,stacking,squeeze,unsqueeze</strong></h2>
<p>Often times you&rsquo;ll want to reshape or change the dimensions of your tensors without actually changing the values inside them.</p>
<p>To do so, some popular methods are:</p>
<table>
<thead>
<tr>
<th>Method</th>
<th>One-line description</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://pytorch.org/docs/stable/generated/torch.reshape.html#torch.reshape"><code>torch.reshape(input, shape)</code></a></td>
<td>Reshapes <code>input</code> to <code>shape</code> (if compatible), can also use <code>torch.Tensor.reshape()</code>.</td>
</tr>
<tr>
<td><a href="https://pytorch.org/docs/stable/generated/torch.Tensor.view.html"><code>Tensor.view(shape)</code></a></td>
<td>Returns a view of the original tensor in a different <code>shape</code> but shares the same data as the original tensor.</td>
</tr>
<tr>
<td><a href="https://pytorch.org/docs/1.9.1/generated/torch.stack.html"><code>torch.stack(tensors, dim=0)</code></a></td>
<td>Concatenates a sequence of <code>tensors</code> along a new dimension (<code>dim</code>), all <code>tensors</code> must be same size.</td>
</tr>
<tr>
<td><a href="https://pytorch.org/docs/stable/generated/torch.squeeze.html"><code>torch.squeeze(input)</code></a></td>
<td>Squeezes <code>input</code> to remove all the dimenions with value <code>1</code>.</td>
</tr>
<tr>
<td><a href="https://pytorch.org/docs/1.9.1/generated/torch.unsqueeze.html"><code>torch.unsqueeze(input, dim)</code></a></td>
<td>Returns <code>input</code> with a dimension value of <code>1</code> added at <code>dim</code>.</td>
</tr>
<tr>
<td><a href="https://pytorch.org/docs/stable/generated/torch.permute.html"><code>torch.permute(input, dims)</code></a></td>
<td>Returns a <em>view</em> of the original <code>input</code> with its dimensions permuted (rearranged) to <code>dims</code>.</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Create a tensor</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> torch
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>arange(<span style="color:#ae81ff">1.</span>, <span style="color:#ae81ff">8.</span>)
</span></span><span style="display:flex;"><span>x, x<span style="color:#f92672">.</span>shape
</span></span></code></pre></div><pre><code>(tensor([1., 2., 3., 4., 5., 6., 7.]), torch.Size([7]))
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>x_reshaped <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>reshape(x, (<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">7</span>))
</span></span><span style="display:flex;"><span>x_reshaped, x_reshaped<span style="color:#f92672">.</span>shape
</span></span></code></pre></div><pre><code>(tensor([[1., 2., 3., 4., 5., 6., 7.]]), torch.Size([1, 7]))
</code></pre>
<p>#TODO: 阅读 <a href="https://stackoverflow.com/a/54507446/7900723">https://stackoverflow.com/a/54507446/7900723</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>x_view <span style="color:#f92672">=</span> x<span style="color:#f92672">.</span>view(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">7</span>)
</span></span><span style="display:flex;"><span>x_view, x_view<span style="color:#f92672">.</span>shape
</span></span></code></pre></div><pre><code>(tensor([[1., 2., 3., 4., 5., 6., 7.]]), torch.Size([1, 7]))
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># change x_view, x_reshaped will also change</span>
</span></span><span style="display:flex;"><span>x_view[:, <span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">7</span>
</span></span><span style="display:flex;"><span>x_view, x
</span></span></code></pre></div><pre><code>(tensor([[7., 2., 3., 4., 5., 6., 7.]]), tensor([7., 2., 3., 4., 5., 6., 7.]))
</code></pre>
<p>If we wanted to stack our new tensor on top of itself five times, we could do so with <code>torch.stack()</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>x_stacked <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>stack([x, x, x, x, x], dim<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>x_stacked, x_stacked<span style="color:#f92672">.</span>shape
</span></span></code></pre></div><pre><code>(tensor([[7., 2., 3., 4., 5., 6., 7.],
         [7., 2., 3., 4., 5., 6., 7.],
         [7., 2., 3., 4., 5., 6., 7.],
         [7., 2., 3., 4., 5., 6., 7.],
         [7., 2., 3., 4., 5., 6., 7.]]),
 torch.Size([5, 7]))
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>x_stacked <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>stack([x, x, x, x, x], dim<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>x_stacked, x_stacked<span style="color:#f92672">.</span>shape
</span></span></code></pre></div><pre><code>(tensor([[7., 7., 7., 7., 7.],
         [2., 2., 2., 2., 2.],
         [3., 3., 3., 3., 3.],
         [4., 4., 4., 4., 4.],
         [5., 5., 5., 5., 5.],
         [6., 6., 6., 6., 6.],
         [7., 7., 7., 7., 7.]]),
 torch.Size([7, 5]))
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Previous tensor: </span><span style="color:#e6db74">{</span>x_reshaped<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Previous shape: </span><span style="color:#e6db74">{</span>x_reshaped<span style="color:#f92672">.</span>shape<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Remove extra dimension from x_reshaped</span>
</span></span><span style="display:flex;"><span>x_squeezed <span style="color:#f92672">=</span> x_reshaped<span style="color:#f92672">.</span>squeeze()
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">New tensor: </span><span style="color:#e6db74">{</span>x_squeezed<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;New shape: </span><span style="color:#e6db74">{</span>x_squeezed<span style="color:#f92672">.</span>shape<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><pre><code>Previous tensor: tensor([[7., 2., 3., 4., 5., 6., 7.]])
Previous shape: torch.Size([1, 7])

New tensor: tensor([7., 2., 3., 4., 5., 6., 7.])
New shape: torch.Size([7])
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Previous tensor: </span><span style="color:#e6db74">{</span>x_squeezed<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Previous shape: </span><span style="color:#e6db74">{</span>x_squeezed<span style="color:#f92672">.</span>shape<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## Add an extra dimension with unsqueeze</span>
</span></span><span style="display:flex;"><span>x_unsqueezed <span style="color:#f92672">=</span> x_squeezed<span style="color:#f92672">.</span>unsqueeze(dim<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">New tensor: </span><span style="color:#e6db74">{</span>x_unsqueezed<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;New shape: </span><span style="color:#e6db74">{</span>x_unsqueezed<span style="color:#f92672">.</span>shape<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><pre><code>Previous tensor: tensor([7., 2., 3., 4., 5., 6., 7.])
Previous shape: torch.Size([7])

New tensor: tensor([[7., 2., 3., 4., 5., 6., 7.]])
New shape: torch.Size([1, 7])
</code></pre>
<p>You can also rearrange the order of axes values with <code>torch.permute(input, dims)</code>, where the <code>input</code> gets turned into a <em>view</em> with new <code>dims</code>.</p>
<blockquote>
<p><strong>Note</strong>: Because permuting returns a <em>view</em> (shares the same data as the original), the values in the permuted tensor will be the same as the original tensor and if you change the values in the view, it will change the values of the original.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Create tensor with specific shape</span>
</span></span><span style="display:flex;"><span>x_original <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>rand(size<span style="color:#f92672">=</span>(<span style="color:#ae81ff">224</span>, <span style="color:#ae81ff">224</span>, <span style="color:#ae81ff">3</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Permute the original tensor to rearrange the axis order</span>
</span></span><span style="display:flex;"><span>x_permuted <span style="color:#f92672">=</span> x_original<span style="color:#f92672">.</span>permute(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>)  <span style="color:#75715e"># shifts axis 0-&gt;1, 1-&gt;2, 2-&gt;0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Previous shape: </span><span style="color:#e6db74">{</span>x_original<span style="color:#f92672">.</span>shape<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;New shape: </span><span style="color:#e6db74">{</span>x_permuted<span style="color:#f92672">.</span>shape<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><pre><code>Previous shape: torch.Size([224, 224, 3])
New shape: torch.Size([3, 224, 224])
</code></pre>
<h2 id="9-indexing-select-data-from-tensor">9 indexing: select data from tensor</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Create a tensor </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> torch
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>arange(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">10</span>)<span style="color:#f92672">.</span>reshape(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span>x, x<span style="color:#f92672">.</span>shape
</span></span></code></pre></div><pre><code>(tensor([[[1, 2, 3],
          [4, 5, 6],
          [7, 8, 9]]]),
 torch.Size([1, 3, 3]))
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Let&#39;s index bracket by bracket</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;First square bracket:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">{</span>x[<span style="color:#ae81ff">0</span>]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Second square bracket: </span><span style="color:#e6db74">{</span>x[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Third square bracket: </span><span style="color:#e6db74">{</span>x[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><pre><code>First square bracket:
tensor([[1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]])
Second square bracket: tensor([1, 2, 3])
Third square bracket: 1
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>x[<span style="color:#ae81ff">0</span>], x[<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>], x[<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>]
</span></span></code></pre></div><pre><code>(tensor([[1, 2, 3],
         [4, 5, 6],
         [7, 8, 9]]),
 tensor([1, 2, 3]),
 tensor(1))
</code></pre>
<p>You can also use <code>:</code> to specify &ldquo;all values in this dimension&rdquo; and then use a comma (<code>,</code>) to add another dimension.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Get all values of 0th dimension and the 0 index of 1st dimension</span>
</span></span><span style="display:flex;"><span>x[:, <span style="color:#ae81ff">0</span>]
</span></span></code></pre></div><pre><code>tensor([[1, 2, 3]])
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Get all values of 0th &amp; 1st dimensions but only index 1 of 2nd dimension</span>
</span></span><span style="display:flex;"><span>x[:, :, <span style="color:#ae81ff">1</span>]
</span></span></code></pre></div><pre><code>tensor([[2, 5, 8]])
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Get all values of the 0 dimension but only the 1 index value of the 1st and 2nd dimension</span>
</span></span><span style="display:flex;"><span>x[:, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>]
</span></span></code></pre></div><pre><code>tensor([5])
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Get index 0 of 0th and 1st dimension and all values of 2nd dimension </span>
</span></span><span style="display:flex;"><span>x[<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, :]  <span style="color:#75715e"># same as x[0][0]</span>
</span></span></code></pre></div><pre><code>tensor([1, 2, 3])
</code></pre>
<h2 id="10-pytorch-tensors--numpy">10 PyTorch tensors &amp; NumPy</h2>
<p>Since NumPy is a popular Python numerical computing library, PyTorch has functionality to interact with it nicely.</p>
<p>The two main methods you&rsquo;ll want to use for NumPy to PyTorch (and back again) are:</p>
<ul>
<li><a href="https://pytorch.org/docs/stable/generated/torch.from_numpy.html"><code>torch.from_numpy(ndarray)</code></a> - NumPy array -&gt; PyTorch tensor.</li>
<li><a href="https://pytorch.org/docs/stable/generated/torch.Tensor.numpy.html"><code>torch.Tensor.numpy()</code></a> - PyTorch tensor -&gt; NumPy array.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># NumPy array to tensor</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> torch
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span>array <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>arange(<span style="color:#ae81ff">1.0</span>, <span style="color:#ae81ff">8.0</span>)
</span></span><span style="display:flex;"><span>tensor <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>from_numpy(array)
</span></span><span style="display:flex;"><span>array, tensor
</span></span></code></pre></div><pre><code>(array([1., 2., 3., 4., 5., 6., 7.]),
 tensor([1., 2., 3., 4., 5., 6., 7.], dtype=torch.float64))
</code></pre>
<p>By default, NumPy arrays are created with the datatype <code>float64</code> and if you convert it to a PyTorch tensor, it&rsquo;ll keep the same datatype (as above).</p>
<p>However, many PyTorch calculations default to using <code>float32</code>.</p>
<p>So if you want to convert your NumPy array (float64) -&gt; PyTorch tensor (float64) -&gt; PyTorch tensor (float32), you can use <code>tensor = torch.from_numpy(array).type(torch.float32)</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>tensor<span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>from_numpy(array)<span style="color:#f92672">.</span>type(torch<span style="color:#f92672">.</span>float32)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Tensor to NumPy array</span>
</span></span><span style="display:flex;"><span>tensor <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>ones(<span style="color:#ae81ff">7</span>) <span style="color:#75715e"># create a tensor of ones with dtype=float32</span>
</span></span><span style="display:flex;"><span>numpy_tensor <span style="color:#f92672">=</span> tensor<span style="color:#f92672">.</span>numpy() <span style="color:#75715e"># will be dtype=float32 unless changed</span>
</span></span><span style="display:flex;"><span>tensor, numpy_tensor
</span></span></code></pre></div><pre><code>(tensor([1., 1., 1., 1., 1., 1., 1.]),
 array([1., 1., 1., 1., 1., 1., 1.], dtype=float32))
</code></pre>
<h2 id="11-reproducibility-trying-to-take-the-random-out-of-random">11 Reproducibility: trying to take the random out of random</h2>
<p>#TODO: <a href="https://pytorch.org/docs/stable/notes/randomness.html">The PyTorch reproducibility documentation</a></p>
<p>#TODO: <a href="https://en.wikipedia.org/wiki/Random_seed">The Wikipedia random seed page</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> torch
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Create two random tensors</span>
</span></span><span style="display:flex;"><span>random_tensor_A <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>rand(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span>random_tensor_B <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>rand(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Tensor A:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">{</span>random_tensor_A<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Tensor B:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">{</span>random_tensor_B<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Does Tensor A equal Tensor B? (anywhere)&#34;</span>)
</span></span><span style="display:flex;"><span>random_tensor_A <span style="color:#f92672">==</span> random_tensor_B
</span></span></code></pre></div><pre><code>Tensor A:
tensor([[0.8016, 0.3649, 0.6286, 0.9663],
        [0.7687, 0.4566, 0.5745, 0.9200],
        [0.3230, 0.8613, 0.0919, 0.3102]])

Tensor B:
tensor([[0.9536, 0.6002, 0.0351, 0.6826],
        [0.3743, 0.5220, 0.1336, 0.9666],
        [0.9754, 0.8474, 0.8988, 0.1105]])

Does Tensor A equal Tensor B? (anywhere)





tensor([[False, False, False, False],
        [False, False, False, False],
        [False, False, False, False]])
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> torch
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> random
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># # Set the random seed</span>
</span></span><span style="display:flex;"><span>RANDOM_SEED<span style="color:#f92672">=</span><span style="color:#ae81ff">42</span> <span style="color:#75715e"># try changing this to different values and see what happens to the numbers below</span>
</span></span><span style="display:flex;"><span>torch<span style="color:#f92672">.</span>manual_seed(seed<span style="color:#f92672">=</span>RANDOM_SEED) 
</span></span><span style="display:flex;"><span>random_tensor_C <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>rand(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Have to reset the seed every time a new rand() is called </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Without this, tensor_D would be different to tensor_C </span>
</span></span><span style="display:flex;"><span>torch<span style="color:#f92672">.</span>random<span style="color:#f92672">.</span>manual_seed(seed<span style="color:#f92672">=</span>RANDOM_SEED) <span style="color:#75715e"># try commenting this line out and seeing what happens</span>
</span></span><span style="display:flex;"><span>random_tensor_D <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>rand(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Tensor C:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">{</span>random_tensor_C<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Tensor D:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">{</span>random_tensor_D<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Does Tensor C equal Tensor D? (anywhere)&#34;</span>)
</span></span><span style="display:flex;"><span>random_tensor_C <span style="color:#f92672">==</span> random_tensor_D
</span></span></code></pre></div><pre><code>Tensor C:
tensor([[0.8823, 0.9150, 0.3829, 0.9593],
        [0.3904, 0.6009, 0.2566, 0.7936],
        [0.9408, 0.1332, 0.9346, 0.5936]])

Tensor D:
tensor([[0.8823, 0.9150, 0.3829, 0.9593],
        [0.3904, 0.6009, 0.2566, 0.7936],
        [0.9408, 0.1332, 0.9346, 0.5936]])

Does Tensor C equal Tensor D? (anywhere)





tensor([[True, True, True, True],
        [True, True, True, True],
        [True, True, True, True]])
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> torch
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> random
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># # Set the random seed</span>
</span></span><span style="display:flex;"><span>RANDOM_SEED<span style="color:#f92672">=</span><span style="color:#ae81ff">42</span> <span style="color:#75715e"># try changing this to different values and see what happens to the numbers below</span>
</span></span><span style="display:flex;"><span>torch<span style="color:#f92672">.</span>manual_seed(seed<span style="color:#f92672">=</span>RANDOM_SEED) 
</span></span><span style="display:flex;"><span>random_tensor_C <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>rand(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Have to reset the seed every time a new rand() is called </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Without this, tensor_D would be different to tensor_C </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># torch.random.manual_seed(seed=RANDOM_SEED) # try commenting this line out and seeing what happens</span>
</span></span><span style="display:flex;"><span>random_tensor_D <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>rand(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Tensor C:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">{</span>random_tensor_C<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Tensor D:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">{</span>random_tensor_D<span style="color:#e6db74">}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Does Tensor C equal Tensor D? (anywhere)&#34;</span>)
</span></span><span style="display:flex;"><span>random_tensor_C <span style="color:#f92672">==</span> random_tensor_D
</span></span></code></pre></div><pre><code>Tensor C:
tensor([[0.8823, 0.9150, 0.3829, 0.9593],
        [0.3904, 0.6009, 0.2566, 0.7936],
        [0.9408, 0.1332, 0.9346, 0.5936]])

Tensor D:
tensor([[0.8694, 0.5677, 0.7411, 0.4294],
        [0.8854, 0.5739, 0.2666, 0.6274],
        [0.2696, 0.4414, 0.2969, 0.8317]])

Does Tensor C equal Tensor D? (anywhere)





tensor([[False, False, False, False],
        [False, False, False, False],
        [False, False, False, False]])
</code></pre>
<h2 id="12-use-gpu">12 use gpu</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> torch<span style="color:#f92672">.</span>cuda<span style="color:#f92672">.</span>is_available():
</span></span><span style="display:flex;"><span>    device <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;cuda&#34;</span> <span style="color:#75715e"># Use NVIDIA GPU (if available)</span>
</span></span><span style="display:flex;"><span>    print(torch<span style="color:#f92672">.</span>cuda<span style="color:#f92672">.</span>device_count())
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">elif</span> torch<span style="color:#f92672">.</span>backends<span style="color:#f92672">.</span>mps<span style="color:#f92672">.</span>is_available():
</span></span><span style="display:flex;"><span>    device <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;mps&#34;</span> <span style="color:#75715e"># Use Apple Silicon GPU (if available)</span>
</span></span><span style="display:flex;"><span>    print(torch<span style="color:#f92672">.</span>mps<span style="color:#f92672">.</span>device_count())
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    device <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;cpu&#34;</span> <span style="color:#75715e"># Default to CPU if no GPU is available</span>
</span></span><span style="display:flex;"><span>    print(torch<span style="color:#f92672">.</span>cpu<span style="color:#f92672">.</span>device_count())
</span></span><span style="display:flex;"><span>device
</span></span></code></pre></div><pre><code>1





'mps'
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Create tensor (default on CPU)</span>
</span></span><span style="display:flex;"><span>tensor <span style="color:#f92672">=</span> torch<span style="color:#f92672">.</span>tensor([<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Tensor not on GPU</span>
</span></span><span style="display:flex;"><span>print(tensor, tensor<span style="color:#f92672">.</span>device)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Move tensor to GPU (if available)</span>
</span></span><span style="display:flex;"><span>tensor_on_gpu <span style="color:#f92672">=</span> tensor<span style="color:#f92672">.</span>to(device)
</span></span><span style="display:flex;"><span>tensor_on_gpu
</span></span></code></pre></div><pre><code>tensor([1, 2, 3]) cpu





tensor([1, 2, 3], device='mps:0')
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># If tensor is on GPU, can&#39;t transform it to NumPy (this will error)</span>
</span></span><span style="display:flex;"><span>tensor_on_gpu<span style="color:#f92672">.</span>numpy()
</span></span></code></pre></div><pre><code>---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

Cell In[65], line 2
      1 # If tensor is on GPU, can't transform it to NumPy (this will error)
----&gt; 2 tensor_on_gpu.numpy()


TypeError: can't convert mps:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Instead, copy the tensor back to cpu</span>
</span></span><span style="display:flex;"><span>tensor_back_on_cpu <span style="color:#f92672">=</span> tensor_on_gpu<span style="color:#f92672">.</span>cpu()<span style="color:#f92672">.</span>numpy()
</span></span><span style="display:flex;"><span>tensor_back_on_cpu
</span></span></code></pre></div><pre><code>array([1, 2, 3])
</code></pre>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>tensor_on_gpu
</span></span></code></pre></div><pre><code>tensor([1, 2, 3], device='mps:0')
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>The Road to Next Life Stage</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/life/the-road-to-next-life-stage/</link>
            <pubDate>Fri, 31 May 2024 12:42:42 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/life/the-road-to-next-life-stage/</guid>
            <description>通向下一个阶段的路 最近缺乏动力,感觉自己的生活失去了方向.我在身心上都遇到了一些挑战或抉择.我需要重新审视自己的生活,并为未来做出一些计划.
1 在人生的路口,我有什么选择? 我的NUS master也即将结束,我需要决定未来的方向.我有几个选择:
留在新加坡,找一份工作: 在新加坡,我有非常满意的实习,我有希望留在tt公司转正.当然能否转正,这是取决于当地政策,部门需求和个人能力.主要的卡点在于当地政策,我需要和leader double check EP是否有名额. 其他的新加坡公司,我感觉机会比较少,主要是技术栈的适配上,还有腾讯和米哈游可以看看.腾讯相关的就是运维开发,需要再复习一下k8s的东西.米哈游看上去是后端开发,需要继续学习go后端的内容. 回国,找一份工作: 国内的互联网公司稳定性比较缺乏. 国内的量化公司的it岗可以考虑,k8s的AI集群建设方面. 国内家乡找躺平工作,银行和小厂都是使用JAVA. 继续读博 港新的计算机博士,DL/RL方向可以看看,主要还是要把python/pytorch系统学起来. 2 面对这些选择,我该做些什么? 在技术层面我大概还要做到这些方面:
Golang的后端技术学习完, 还有我自己定下的那部分知识. python和pytorch需要再重拾一下,我购买了udmey的课程. k8s我也寻得了一些资料&amp;hellip;不看浪费.需要再看一下. cpp我觉得周期太长了,也没有什么实际的项目,暂时放一放. 摊子不能铺太大.我需要把自己的精力集中在一两个方向上.我需要做出一些选择,并且坚持下去.
3 自己的身体健康 我最近的身体状况也不是很好.六月中我会回一趟中国,做一些医学检查.
我需要多运动,多锻炼.每周可以去参加一次羽毛球,早睡早起,多喝水,多吃水果.我需要保持好的身体状态,才能更好的工作和学习.</description>
            <content type="html"><![CDATA[<h1 id="通向下一个阶段的路">通向下一个阶段的路</h1>
<p>最近缺乏动力,感觉自己的生活失去了方向.我在身心上都遇到了一些挑战或抉择.我需要重新审视自己的生活,并为未来做出一些计划.</p>
<h2 id="1-在人生的路口我有什么选择">1 在人生的路口,我有什么选择?</h2>
<p>我的NUS master也即将结束,我需要决定未来的方向.我有几个选择:</p>
<ol>
<li>留在新加坡,找一份工作:
<ol>
<li>在新加坡,我有非常满意的实习,我有希望留在tt公司转正.当然能否转正,这是取决于当地政策,部门需求和个人能力.主要的卡点在于当地政策,我需要和leader double check EP是否有名额.</li>
<li>其他的新加坡公司,我感觉机会比较少,主要是技术栈的适配上,还有腾讯和米哈游可以看看.腾讯相关的就是运维开发,需要再复习一下k8s的东西.米哈游看上去是后端开发,需要继续学习go后端的内容.</li>
</ol>
</li>
<li>回国,找一份工作:
<ol>
<li>国内的互联网公司稳定性比较缺乏.</li>
<li>国内的量化公司的it岗可以考虑,k8s的AI集群建设方面.</li>
<li>国内家乡找躺平工作,银行和小厂都是使用JAVA.</li>
</ol>
</li>
<li>继续读博
<ol>
<li>港新的计算机博士,DL/RL方向可以看看,主要还是要把python/pytorch系统学起来.</li>
</ol>
</li>
</ol>
<h2 id="2-面对这些选择我该做些什么">2 面对这些选择,我该做些什么?</h2>
<p>在技术层面我大概还要做到这些方面:</p>
<ol>
<li>Golang的后端技术学习完, 还有我自己定下的那部分知识.</li>
<li>python和pytorch需要再重拾一下,我购买了udmey的课程.</li>
<li>k8s我也寻得了一些资料&hellip;不看浪费.需要再看一下.</li>
<li>cpp我觉得周期太长了,也没有什么实际的项目,暂时放一放.</li>
</ol>
<p>摊子不能铺太大.我需要把自己的精力集中在一两个方向上.我需要做出一些选择,并且坚持下去.</p>
<h2 id="3-自己的身体健康">3 自己的身体健康</h2>
<p>我最近的身体状况也不是很好.六月中我会回一趟中国,做一些医学检查.</p>
<p>我需要多运动,多锻炼.每周可以去参加一次羽毛球,早睡早起,多喝水,多吃水果.我需要保持好的身体状态,才能更好的工作和学习.</p>
]]></content>
        </item>
        
        <item>
            <title>Argo Workflow 7</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-7/</link>
            <pubDate>Sun, 26 May 2024 22:52:54 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-7/</guid>
            <description>Argo Workflow (7) Walk through 章节的相关特性还剩下:
Kubernetes Resource https://argo-workflows.readthedocs.io/en/latest/walk-through/kubernetes-resources/ Daemon Container Sidecar Container Custom Template Variables Continuous Integration Example 下次有机会再总结. 目前学的这些够用了.</description>
            <content type="html"><![CDATA[<h1 id="argo-workflow-7">Argo Workflow (7)</h1>
<p>Walk through 章节的相关特性还剩下:</p>
<ul>
<li>Kubernetes Resource <a href="https://argo-workflows.readthedocs.io/en/latest/walk-through/kubernetes-resources/">https://argo-workflows.readthedocs.io/en/latest/walk-through/kubernetes-resources/</a></li>
<li>Daemon Container</li>
<li>Sidecar Container</li>
<li>Custom Template Variables</li>
<li>Continuous Integration Example</li>
</ul>
<p>下次有机会再总结. 目前学的这些够用了.</p>
]]></content>
        </item>
        
        <item>
            <title>Argo Workflow 6</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-6/</link>
            <pubDate>Sun, 26 May 2024 14:36:26 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-6/</guid>
            <description>Argo Workflow (6) 1 Conditionals 支持条件执行.语法是由 govaluate 实现的,它提供了对复杂语法的支持.请参见以下示例:
apiVersion: argoproj.io/v1alpha1 kind: Workflow metadata: generateName: coinflip- spec: entrypoint: coinflip templates: - name: coinflip steps: # flip a coin - - name: flip-coin template: flip-coin # evaluate the result in parallel - - name: heads template: heads # call heads template if &amp;#34;heads&amp;#34; when: &amp;#34;{{steps.flip-coin.outputs.result}} == heads&amp;#34; - name: tails template: tails # call tails template if &amp;#34;tails&amp;#34; when: &amp;#34;{{steps.flip-coin.outputs.result}} == tails&amp;#34; - - name: flip-again template: flip-coin - - name: complex-condition template: heads-tails-or-twice-tails # call heads template if first flip was &amp;#34;heads&amp;#34; and second was &amp;#34;tails&amp;#34; OR both were &amp;#34;tails&amp;#34; when: &amp;gt;- ( {{steps.</description>
            <content type="html"><![CDATA[<h1 id="argo-workflow-6">Argo Workflow (6)</h1>
<h2 id="1-conditionals">1 Conditionals</h2>
<p>支持条件执行.语法是由 govaluate 实现的,它提供了对复杂语法的支持.请参见以下示例:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">coinflip-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">coinflip</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">coinflip</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># flip a coin</span>
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">flip-coin</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">flip-coin</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># evaluate the result in parallel</span>
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">heads</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">heads                      </span> <span style="color:#75715e"># call heads template if &#34;heads&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">when</span>: <span style="color:#e6db74">&#34;{{steps.flip-coin.outputs.result}} == heads&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">tails</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">tails                      </span> <span style="color:#75715e"># call tails template if &#34;tails&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">when</span>: <span style="color:#e6db74">&#34;{{steps.flip-coin.outputs.result}} == tails&#34;</span>
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">flip-again</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">flip-coin</span>
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">complex-condition</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">heads-tails-or-twice-tails</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># call heads template if first flip was &#34;heads&#34; and second was &#34;tails&#34; OR both were &#34;tails&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">when</span>: &gt;-<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            ( {{steps.flip-coin.outputs.result}} == heads &amp;&amp;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">              {{steps.flip-again.outputs.result}} == tails
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            ) ||
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            ( {{steps.flip-coin.outputs.result}} == tails &amp;&amp;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">              {{steps.flip-again.outputs.result}} == tails )</span>            
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">heads-regex</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">heads                      </span> <span style="color:#75715e"># call heads template if ~ &#34;hea&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">when</span>: <span style="color:#e6db74">&#34;{{steps.flip-again.outputs.result}} =~ hea&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">tails-regex</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">tails                      </span> <span style="color:#75715e"># call heads template if ~ &#34;tai&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">when</span>: <span style="color:#e6db74">&#34;{{steps.flip-again.outputs.result}} =~ tai&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Return heads or tails based on a random number</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">flip-coin</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">script</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">python:alpine3.6</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">python]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">source</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        import random
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        result = &#34;heads&#34; if random.randint(0,1) == 0 else &#34;tails&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        print(result)</span>        
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">heads</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:3.6</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo \&#34;it was heads\&#34;&#34;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">tails</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:3.6</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo \&#34;it was tails\&#34;&#34;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">heads-tails-or-twice-tails</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:3.6</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo \&#34;it was heads the first flip and tails the second. Or it was two times tails.\&#34;&#34;</span>]
</span></span></code></pre></div>
    <img src="/images/argo-workflow-conditionals.png"  alt="argo-workflow-conditionals"  class="center"  style="border-radius: 8px;"  />


<h2 id="2-recursion">2 Recursion</h2>
<p>模板之间的递归调用是允许的.请参见以下示例.这个示例会使得翻硬币直到正面朝上,才会结束.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">coinflip-recursive-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">coinflip</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">coinflip</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># flip a coin</span>
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">flip-coin</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">flip-coin</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># evaluate the result in parallel</span>
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">heads</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">heads                </span> <span style="color:#75715e"># call heads template if &#34;heads&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">when</span>: <span style="color:#e6db74">&#34;{{steps.flip-coin.outputs.result}} == heads&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">tails                    </span> <span style="color:#75715e"># keep flipping coins if &#34;tails&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">coinflip</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">when</span>: <span style="color:#e6db74">&#34;{{steps.flip-coin.outputs.result}} == tails&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">flip-coin</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">script</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">python:alpine3.6</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">python]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">source</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        import random
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        result = &#34;heads&#34; if random.randint(0,1) == 0 else &#34;tails&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        print(result)</span>        
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">heads</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:3.6</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo \&#34;it was heads\&#34;&#34;</span>]
</span></span></code></pre></div>
    <img src="/images/argo-workflow-recursion.png"  alt="argo-workflow-recursion"  class="center"  style="border-radius: 8px;"  />


<h2 id="3-retry失败或错误的步骤">3 Retry失败或错误的步骤</h2>
<p>可以指定一个重试策略,该策略将决定如何重试失败或错误的步骤:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># 此示例演示了如何使用重试退避</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">retry-backoff-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">retry-backoff</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">retry-backoff</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">retryStrategy</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">limit</span>: <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">retryPolicy</span>: <span style="color:#e6db74">&#34;Always&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">backoff</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">duration</span>: <span style="color:#e6db74">&#34;1&#34;</span>      <span style="color:#75715e"># 必须是字符串。默认单位是秒。也可以是持续时间，例如：&#34;2m&#34;, &#34;6h&#34;, &#34;1d&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">factor</span>: <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">maxDuration</span>: <span style="color:#e6db74">&#34;1m&#34;</span>  <span style="color:#75715e"># 必须是字符串。默认单位是秒。也可以是持续时间，例如：&#34;2m&#34;, &#34;6h&#34;, &#34;1d&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">affinity</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">nodeAntiAffinity</span>: {}
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">python:alpine3.6</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#e6db74">&#34;python&#34;</span>, -<span style="color:#ae81ff">c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># 有66%的概率失败</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;import random; import sys; exit_code = random.choice([0, 1, 1]); sys.exit(exit_code)&#34;</span>]
</span></span></code></pre></div><ul>
<li><code>limit</code> 是容器将被重试的最大次数.</li>
<li><code>retryPolicy</code> 指定容器在失败,错误,两者都有或仅在瞬态错误(例如 i/o 或 TLS 握手超时)时是否会被重试.&ldquo;Always&rdquo; 在错误和失败时都会重试.也可用:OnFailure(默认),&ldquo;OnError&rdquo;,和 &ldquo;OnTransientError&rdquo;(在 v3.0.0-rc2 之后可用).</li>
<li><code>backoff</code> 是一个指数退避</li>
<li><code>nodeAntiAffinity</code> 防止在同一主机上运行步骤.当前实现只允许空的 nodeAntiAffinity(即 nodeAntiAffinity: {}),并且默认使用标签 kubernetes.io/hostname 作为选择器.</li>
</ul>
<p>提供一个空的重试策略(即 retryStrategy::{})将导致容器重试直到完成.</p>
<h2 id="4-exit-handlers">4 Exit handlers</h2>
<p>退出处理器是一个始终在工作流结束时执行的模板，无论成功还是失败。</p>
<p>退出处理器的一些常见用途包括：</p>
<ul>
<li>在工作流运行后进行清理</li>
<li>发送工作流状态通知（例如，电子邮件/Slack）</li>
<li>将通过/失败状态发布到web-hook结果（例如，GitHub构建结果）</li>
<li>重新提交或提交另一个工作流</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">exit-handlers-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">intentional-fail</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">onExit</span>: <span style="color:#ae81ff">exit-handler                 </span> <span style="color:#75715e"># invoke exit-handler template at end of the workflow</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># primary workflow template</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">intentional-fail</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:latest</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo intentional failure; exit 1&#34;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Exit handler templates</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># After the completion of the entrypoint template, the status of the</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># workflow is made available in the global variable {{workflow.status}}.</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># {{workflow.status}} will be one of: Succeeded, Failed, Error</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">exit-handler</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">notify</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">send-email</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">celebrate</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">celebrate</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">when</span>: <span style="color:#e6db74">&#34;{{workflow.status}} == Succeeded&#34;</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cry</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">cry</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">when</span>: <span style="color:#e6db74">&#34;{{workflow.status}} != Succeeded&#34;</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">send-email</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:latest</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo send e-mail: {{workflow.name}} {{workflow.status}} {{workflow.duration}}&#34;</span>]
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">celebrate</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:latest</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo hooray!&#34;</span>]
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cry</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:latest</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo boohoo!&#34;</span>]
</span></span></code></pre></div>
    <img src="/images/argo-workflow-exit-handlers.png"  alt="argo-workflow-exit-handlers"  class="center"  style="border-radius: 8px;"  />


<h2 id="5-timeouts">5 Timeouts</h2>
<p>您可以使用字段 <code>activeDeadlineSeconds</code> 来限制工作流的运行时间:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">timeouts-wf-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">activeDeadlineSeconds</span>: <span style="color:#ae81ff">10</span> <span style="color:#75715e"># 在10秒后终止工作流</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">sleep</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">sleep</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:latest</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo sleeping for 1m; sleep 60; echo done&#34;</span>]
</span></span></code></pre></div><p>您也可以限制特定模板的运行时间:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">timeouts-tpl-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">sleep</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">sleep</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">activeDeadlineSeconds</span>: <span style="color:#ae81ff">10</span> <span style="color:#75715e"># 在10秒后终止容器模板</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:latest</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo sleeping for 1m; sleep 60; echo done&#34;</span>]
</span></span></code></pre></div><h2 id="6-suspending">6 Suspending</h2>
<p>工作流可以通过以下方式挂起:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>argo suspend WORKFLOW
</span></span></code></pre></div><p>或者在工作流中指定一个挂起步骤:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">suspend-template-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">suspend</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">suspend</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">build</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>            - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;I am suspended&#34;</span>
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">approve</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">approve</span>
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">delay</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">delay</span>
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">release</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;I am released&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">approve</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">suspend</span>: {}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">delay</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">suspend</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">duration</span>: <span style="color:#e6db74">&#34;20&#34;</span>    <span style="color:#75715e"># 必须是字符串。默认单位是秒。也可以是持续时间，例如：&#34;2m&#34;, &#34;6h&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">yky8/argosay:v2</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [ <span style="color:#e6db74">&#34;/usr/local/bin/argosay&#34;</span> ]
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [ <span style="color:#e6db74">&#34;echo&#34;</span> ,<span style="color:#e6db74">&#34;{{inputs.parameters.message}}&#34;</span> ]
</span></span></code></pre></div><p>一旦挂起,工作流将不会安排任何新的步骤,直到它被恢复.它可以通过以下方式手动恢复:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>argo resume WORKFLOW
</span></span></code></pre></div><p>或者像上面的例子那样,通过设置一个持续时间限制来自动恢复.</p>

    <img src="/images/argo-workflow-suspending.png"  alt="argo-workflow-suspending"  class="center"  style="border-radius: 8px;"  />


<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>&gt; argo resume suspend-template-9plrz -n argo
</span></span><span style="display:flex;"><span>INFO<span style="color:#f92672">[</span>2024-05-26T22:10:50.883Z<span style="color:#f92672">]</span> Workflow to be dehydrated                     Workflow Size<span style="color:#f92672">=</span><span style="color:#ae81ff">3079</span>
</span></span><span style="display:flex;"><span>workflow suspend-template-9plrz resumed
</span></span></code></pre></div>
    <img src="/images/argo-workflow-resume.png"  alt="argo-workflow-resume"  class="center"  style="border-radius: 8px;"  />


]]></content>
        </item>
        
        <item>
            <title>Argo Workflow 5</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-5/</link>
            <pubDate>Sun, 26 May 2024 00:58:41 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-5/</guid>
            <description>Argo Workflow (5) 1 Loops 编写工作流时，能够迭代一组输入是非常有用的，因为这就是 Argo Workflows 执行循环的方式。
有三种基本方法可以多次运行一个模板。
withSequence 迭代一个数字序列。 withItems 接受一个待处理的项目列表，可以是 纯的单个值，在模板中可以通过 {{item}} 使用 JSON 对象，其中每个元素可以通过它的键作为 {{item.key}} 来引用 withParam 接受一个 JSON 数组，并对其进行迭代——同样地，这些项目可以像 withItems 一样是对象。这非常强大，因为你可以在工作流的另一步生成 JSON，从而创建一个动态工作流。 withSequence 示例 apiVersion: argoproj.io/v1alpha1 kind: Workflow metadata: generateName: loop-sequence- spec: entrypoint: loop-sequence-example templates: - name: loop-sequence-example steps: - - name: hello-world-x5 template: hello-world withSequence: count: &amp;#34;5&amp;#34; - name: hello-world container: image: yky8/argosay:v2 command: [ &amp;#34;/usr/local/bin/argosay&amp;#34; ] args: [ &amp;#34;echo&amp;#34;,&amp;#34;hello world!&amp;#34; ] argo submit loop-withsequence.</description>
            <content type="html"><![CDATA[<h1 id="argo-workflow-5">Argo Workflow (5)</h1>
<h2 id="1-loops">1 Loops</h2>
<p>编写工作流时，能够迭代一组输入是非常有用的，因为这就是 Argo Workflows 执行循环的方式。</p>
<p>有三种基本方法可以多次运行一个模板。</p>
<ol>
<li><code>withSequence</code> 迭代一个数字序列。</li>
<li><code>withItems</code> 接受一个待处理的项目列表，可以是
<ul>
<li>纯的单个值，在模板中可以通过 <code>{{item}}</code> 使用</li>
<li>JSON 对象，其中每个元素可以通过它的键作为 <code>{{item.key}}</code> 来引用</li>
</ul>
</li>
<li><code>withParam</code> 接受一个 JSON 数组，并对其进行迭代——同样地，这些项目可以像 <code>withItems</code> 一样是对象。这非常强大，因为你可以在工作流的另一步生成 JSON，从而创建一个动态工作流。</li>
</ol>
<h3 id="withsequence-示例"><code>withSequence</code> 示例</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">loop-sequence-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">loop-sequence-example</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">loop-sequence-example</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>           - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">hello-world-x5</span>
</span></span><span style="display:flex;"><span>               <span style="color:#f92672">template</span>: <span style="color:#ae81ff">hello-world</span>
</span></span><span style="display:flex;"><span>               <span style="color:#f92672">withSequence</span>:
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">count</span>: <span style="color:#e6db74">&#34;5&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">hello-world</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>           <span style="color:#f92672">image</span>: <span style="color:#ae81ff">yky8/argosay:v2</span>
</span></span><span style="display:flex;"><span>           <span style="color:#f92672">command</span>: [ <span style="color:#e6db74">&#34;/usr/local/bin/argosay&#34;</span> ]
</span></span><span style="display:flex;"><span>           <span style="color:#f92672">args</span>: [ <span style="color:#e6db74">&#34;echo&#34;</span>,<span style="color:#e6db74">&#34;hello world!&#34;</span> ]
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>argo submit loop-withsequence.yaml -n argo
</span></span></code></pre></div>
    <img src="/images/argo-workflow-loop-with-sequence.png"  alt="argo-workflow-loop-with-sequence"  class="center"  style="border-radius: 0px; width: 85%;"  />


<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Name:                loop-sequence-h5hzj
</span></span><span style="display:flex;"><span>Namespace:           argo
</span></span><span style="display:flex;"><span>ServiceAccount:      unset (will run with the default ServiceAccount)
</span></span><span style="display:flex;"><span>Status:              Succeeded
</span></span><span style="display:flex;"><span>Conditions:
</span></span><span style="display:flex;"><span> PodRunning          False
</span></span><span style="display:flex;"><span> Completed           True
</span></span><span style="display:flex;"><span>Created:             Sun May 26 11:23:07 +0800 (10 seconds ago)
</span></span><span style="display:flex;"><span>Started:             Sun May 26 11:23:07 +0800 (10 seconds ago)
</span></span><span style="display:flex;"><span>Finished:            Sun May 26 11:23:17 +0800 (now)
</span></span><span style="display:flex;"><span>Duration:            10 seconds
</span></span><span style="display:flex;"><span>Progress:            5/5
</span></span><span style="display:flex;"><span>ResourcesDuration:   11s*(100Mi memory),0s*(1 cpu)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>STEP                        TEMPLATE               PODNAME                                     DURATION  MESSAGE
</span></span><span style="display:flex;"><span> ✔ loop-sequence-h5hzj      loop-sequence-example
</span></span><span style="display:flex;"><span> └─┬─✔ hello-world-x5(0:0)  hello-world            loop-sequence-h5hzj-hello-world-4274112881  4s
</span></span><span style="display:flex;"><span>   ├─✔ hello-world-x5(1:1)  hello-world            loop-sequence-h5hzj-hello-world-276427469   4s
</span></span><span style="display:flex;"><span>   ├─✔ hello-world-x5(2:2)  hello-world            loop-sequence-h5hzj-hello-world-634880841   4s
</span></span><span style="display:flex;"><span>   ├─✔ hello-world-x5(3:3)  hello-world            loop-sequence-h5hzj-hello-world-2194008477  4s
</span></span><span style="display:flex;"><span>   └─✔ hello-world-x5(4:4)  hello-world            loop-sequence-h5hzj-hello-world-2552461849  4s
</span></span></code></pre></div><h3 id="withitems-基础示例"><code>withItems</code> 基础示例</h3>
<p>这将使用 <code>withItems</code> 遍历一个项目列表,为每个实例化的模板替换一个字符串.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">loops-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">loop-example</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">loop-example</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;{{item}}&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">withItems</span>:              <span style="color:#75715e"># invoke whalesay once for each item in parallel</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">hello world          </span> <span style="color:#75715e"># item 1</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">goodbye world        </span> <span style="color:#75715e"># item 2</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">yky8/argosay:v2</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [ <span style="color:#e6db74">&#34;/usr/local/bin/argosay&#34;</span> ]
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo&#34;</span>, <span style="color:#e6db74">&#34;{{inputs.parameters.message}}&#34;</span>]
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>argo submit loop-withitems-basic.yaml -n argo
</span></span></code></pre></div>
    <img src="/images/argo-workflow-loop-with-items.png"  alt="argo-workflow-loop-with-items"  class="center"  style="border-radius: 0px; width: 60%;"  />


<h3 id="withitems-json对象示例"><code>withItems</code> json对象示例</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">loops-maps-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">loop-map-example</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">loop-map-example</span> <span style="color:#75715e"># parameter specifies the list to iterate over</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">test-linux</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">cat-os-release</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">image</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;{{item.image}}&#34;</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">tag</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;{{item.tag}}&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">withItems</span>:
</span></span><span style="display:flex;"><span>        - { <span style="color:#f92672">image: &#39;debian&#39;, tag</span>: <span style="color:#e6db74">&#39;9.1&#39;</span> }       <span style="color:#75715e">#item set 1</span>
</span></span><span style="display:flex;"><span>        - { <span style="color:#f92672">image: &#39;debian&#39;, tag</span>: <span style="color:#e6db74">&#39;8.9&#39;</span> }       <span style="color:#75715e">#item set 2</span>
</span></span><span style="display:flex;"><span>        - { <span style="color:#f92672">image: &#39;alpine&#39;, tag</span>: <span style="color:#e6db74">&#39;3.6&#39;</span> }       <span style="color:#75715e">#item set 3</span>
</span></span><span style="display:flex;"><span>        - { <span style="color:#f92672">image: &#39;ubuntu&#39;, tag</span>: <span style="color:#e6db74">&#39;17.10&#39;</span> }     <span style="color:#75715e">#item set 4</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cat-os-release</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">image</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">tag</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#e6db74">&#34;{{inputs.parameters.image}}:{{inputs.parameters.tag}}&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">cat]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#ae81ff">/etc/os-release]</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>argo submit loop-withitems-json.yaml -n argo
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Name:                loops-maps-dfkdd
</span></span><span style="display:flex;"><span>Namespace:           argo
</span></span><span style="display:flex;"><span>ServiceAccount:      unset (will run with the default ServiceAccount)
</span></span><span style="display:flex;"><span>Status:              Succeeded
</span></span><span style="display:flex;"><span>Conditions:
</span></span><span style="display:flex;"><span> PodRunning          False
</span></span><span style="display:flex;"><span> Completed           True
</span></span><span style="display:flex;"><span>Created:             Sun May 26 14:01:38 +0800 (1 minute ago)
</span></span><span style="display:flex;"><span>Started:             Sun May 26 14:01:38 +0800 (1 minute ago)
</span></span><span style="display:flex;"><span>Finished:            Sun May 26 14:03:06 +0800 (now)
</span></span><span style="display:flex;"><span>Duration:            1 minute 28 seconds
</span></span><span style="display:flex;"><span>Progress:            4/4
</span></span><span style="display:flex;"><span>ResourcesDuration:   0s*(1 cpu),2m13s*(100Mi memory)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>STEP                                         TEMPLATE          PODNAME                                     DURATION  MESSAGE
</span></span><span style="display:flex;"><span> ✔ loops-maps-dfkdd                          loop-map-example
</span></span><span style="display:flex;"><span> └─┬─✔ test-linux(0:image:debian,tag:9.1)    cat-os-release    loops-maps-dfkdd-cat-os-release-1435759788  1m
</span></span><span style="display:flex;"><span>   ├─✔ test-linux(1:image:debian,tag:8.9)    cat-os-release    loops-maps-dfkdd-cat-os-release-3975793734  1m
</span></span><span style="display:flex;"><span>   ├─✔ test-linux(2:image:alpine,tag:3.6)    cat-os-release    loops-maps-dfkdd-cat-os-release-3565729669  12s
</span></span><span style="display:flex;"><span>   └─✔ test-linux(3:image:ubuntu,tag:17.10)  cat-os-release    loops-maps-dfkdd-cat-os-release-1306728920  43s
</span></span></code></pre></div><h3 id="withparam-示例"><code>withParam</code> 示例</h3>
<p>为了避免硬编码,可以使用parameters来传递一个json数组.使用<code>withParam</code>迭代这个数组.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">loops-param-arg-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">loop-param-arg-example</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">os-list                                    </span> <span style="color:#75715e"># a list of items</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">value</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        [
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          { &#34;image&#34;: &#34;debian&#34;, &#34;tag&#34;: &#34;9.1&#34; },
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          { &#34;image&#34;: &#34;debian&#34;, &#34;tag&#34;: &#34;8.9&#34; },
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          { &#34;image&#34;: &#34;alpine&#34;, &#34;tag&#34;: &#34;3.6&#34; },
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          { &#34;image&#34;: &#34;ubuntu&#34;, &#34;tag&#34;: &#34;17.10&#34; }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        ]</span>        
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">loop-param-arg-example</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">os-list</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">test-linux</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">cat-os-release</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">image</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;{{item.image}}&#34;</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">tag</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;{{item.tag}}&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">withParam</span>: <span style="color:#e6db74">&#34;{{inputs.parameters.os-list}}&#34;</span>      <span style="color:#75715e"># parameter specifies the list to iterate over</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># This template is the same as in the previous example</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cat-os-release</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">image</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">tag</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#e6db74">&#34;{{inputs.parameters.image}}:{{inputs.parameters.tag}}&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">cat]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#ae81ff">/etc/os-release]</span>
</span></span></code></pre></div><h3 id="withparam-step之间传递数据示例"><code>withParam</code> step之间传递数据示例</h3>
<p><code>withParam</code> 也可以用来在步骤之间传递数据.这是最有用的.在这个例子中,我们将一个步骤的输出作为另一个步骤的输入.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">loops-param-result-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">loop-param-result-example</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">loop-param-result-example</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">generate</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">gen-number-list</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Iterate over the list of numbers generated by the generate step above</span>
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">sleep</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">sleep-n-sec</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">seconds</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;{{item}}&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">withParam</span>: <span style="color:#e6db74">&#34;{{steps.generate.outputs.result}}&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Generate a list of numbers in JSON format</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">gen-number-list</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">script</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">python:alpine3.6</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">python]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">source</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        import json
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        import sys
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        json.dump([i for i in range(20, 31)], sys.stdout)</span>        
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">sleep-n-sec</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">seconds</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:latest</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo sleeping for {{inputs.parameters.seconds}} seconds; sleep {{inputs.parameters.seconds}}; echo done&#34;</span>]
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>argo submit loop-withparam-advance.yaml -n argo
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>STEP                         TEMPLATE                   PODNAME                                              DURATION  MESSAGE
</span></span><span style="display:flex;"><span> ✔ loops-param-result-tlqk6  loop-param-result-example
</span></span><span style="display:flex;"><span> ├───✔ generate              gen-number-list            loops-param-result-tlqk6-gen-number-list-2820570766  3s
</span></span><span style="display:flex;"><span> └─┬─✔ sleep(0:20)           sleep-n-sec                loops-param-result-tlqk6-sleep-n-sec-2838083538      29s
</span></span><span style="display:flex;"><span>   ├─✔ sleep(1:21)           sleep-n-sec                loops-param-result-tlqk6-sleep-n-sec-1673755972      27s
</span></span><span style="display:flex;"><span>   ├─✔ sleep(2:22)           sleep-n-sec                loops-param-result-tlqk6-sleep-n-sec-1057415402      1m
</span></span><span style="display:flex;"><span>   ├─✔ sleep(3:23)           sleep-n-sec                loops-param-result-tlqk6-sleep-n-sec-3164894936      39s
</span></span><span style="display:flex;"><span>   ├─✔ sleep(4:24)           sleep-n-sec                loops-param-result-tlqk6-sleep-n-sec-478396042       57s
</span></span><span style="display:flex;"><span>   ├─✔ sleep(5:25)           sleep-n-sec                loops-param-result-tlqk6-sleep-n-sec-1092769612      1m
</span></span><span style="display:flex;"><span>   ├─✔ sleep(6:26)           sleep-n-sec                loops-param-result-tlqk6-sleep-n-sec-3524356130      48s
</span></span><span style="display:flex;"><span>   ├─✔ sleep(7:27)           sleep-n-sec                loops-param-result-tlqk6-sleep-n-sec-803927512       41s
</span></span><span style="display:flex;"><span>   ├─✔ sleep(8:28)           sleep-n-sec                loops-param-result-tlqk6-sleep-n-sec-1975034882      57s
</span></span><span style="display:flex;"><span>   ├─✔ sleep(9:29)           sleep-n-sec                loops-param-result-tlqk6-sleep-n-sec-1202660980      49s
</span></span><span style="display:flex;"><span>   └─✔ sleep(10:30)          sleep-n-sec                loops-param-result-tlqk6-sleep-n-sec-291803978       56s
</span></span></code></pre></div><h3 id="访问循环的聚合结果">访问循环的聚合结果</h3>
<p>一旦循环完成,可以将所有迭代的输出作为JSON数组进行访问,下面的示例展示了如何读取它.</p>
<p>请注意:每次迭代的输出必须是有效的JSON.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">WorkflowTemplate</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">loop-test</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">main</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">main</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">execute-parallel-steps</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">print-json-entry</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">index</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#39;{{item}}&#39;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">withParam</span>: <span style="color:#e6db74">&#39;[1, 2, 3]&#39;</span>
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">call-access-aggregate-output</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">access-aggregate-output</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">aggregate-results</span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># If the value of each loop iteration isn&#39;t a valid JSON,</span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># you get a JSON parse error:</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#39;{{steps.execute-parallel-steps.outputs.result}}&#39;</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print-json-entry</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">index</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># The output must be a valid JSON</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">script</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:latest</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">source</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        cat &lt;&lt;EOF
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;input&#34;: &#34;{{inputs.parameters.index}}&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;transformed-input&#34;: &#34;{{inputs.parameters.index}}.jpeg&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        EOF</span>        
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">access-aggregate-output</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">aggregate-results</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#39;no-value&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">script</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:latest</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">source</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        echo &#39;inputs.parameters.aggregate-results: &#34;{{inputs.parameters.aggregate-results}}&#34;&#39;</span>        
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>argo submit loop-withparam-aggr-result.yaml -n argo
</span></span></code></pre></div>
    <img src="/images/argo-workflow-loop-withparam-aggr-result.png"  alt="argo-workflow-loop-withparam-aggr-result"  class="center"  style="border-radius: 0px; width: 60%;"  />


<p>上述工作流的最后一步应该有以下输出: inputs.parameters.aggregate-results: &ldquo;[{&ldquo;input&rdquo;:&ldquo;1&rdquo;,&ldquo;transformed-input&rdquo;:&ldquo;1.jpeg&rdquo;},{&ldquo;input&rdquo;:&ldquo;2&rdquo;,&ldquo;transformed-input&rdquo;:&ldquo;2.jpeg&rdquo;},{&ldquo;input&rdquo;:&ldquo;3&rdquo;,&ldquo;transformed-input&rdquo;:&ldquo;3.jpeg&rdquo;}]&rdquo;</p>
]]></content>
        </item>
        
        <item>
            <title>Argo Workflow 4</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-4/</link>
            <pubDate>Sat, 25 May 2024 22:25:36 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-4/</guid>
            <description>Argo Workflow (4) 1 Secrets Argo Workflow支持在workflow中使用Kubernetes的Secret。Secret是一种用来存储敏感信息的对象，比如密码、OAuth令牌等。Secret可以以明文或base64编码的形式存储在Etcd中。在workflow中使用Secret时，需要在workflow的spec中定义一个secrets字段，然后在workflow的template中使用{{workflow.spec.secrets}}引用。
先创建一个secret，然后在workflow中使用这个secret。
kubectl create secret generic my-secret --from-literal=mypassword=S00perS3cretPa55word -n argo # To run this example, first create the secret by running: # kubectl create secret generic my-secret --from-literal=mypassword=S00perS3cretPa55word apiVersion: argoproj.io/v1alpha1 kind: Workflow metadata: generateName: secret-example- spec: entrypoint: argosay # To access secrets as files, add a volume entry in spec.volumes[] and # then in the container template spec, add a mount using volumeMounts. volumes: - name: my-secret-vol secret: secretName: my-secret # name of an existing k8s secret templates: - name: argosay container: image: alpine:3.</description>
            <content type="html"><![CDATA[<h1 id="argo-workflow-4">Argo Workflow (4)</h1>
<h2 id="1-secrets">1 Secrets</h2>
<p>Argo Workflow支持在workflow中使用Kubernetes的Secret。Secret是一种用来存储敏感信息的对象，比如密码、OAuth令牌等。Secret可以以明文或base64编码的形式存储在Etcd中。在workflow中使用Secret时，需要在workflow的spec中定义一个<code>secrets</code>字段，然后在workflow的template中使用<code>{{workflow.spec.secrets}}</code>引用。</p>
<p>先创建一个secret，然后在workflow中使用这个secret。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>kubectl create secret generic my-secret --from-literal<span style="color:#f92672">=</span>mypassword<span style="color:#f92672">=</span>S00perS3cretPa55word -n argo
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># To run this example, first create the secret by running:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># kubectl create secret generic my-secret --from-literal=mypassword=S00perS3cretPa55word</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">secret-example-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># To access secrets as files, add a volume entry in spec.volumes[] and</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># then in the container template spec, add a mount using volumeMounts.</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">my-secret-vol</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">secret</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">secretName</span>: <span style="color:#ae81ff">my-secret    </span> <span style="color:#75715e"># name of an existing k8s secret</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:3.7</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        echo &#34;secret from env: $MYSECRETPASSWORD&#34;;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        echo &#34;secret from file: `cat /secret/mountpath/mypassword`&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#39;</span>]
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># To access secrets as environment variables, use the k8s valueFrom and</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># secretKeyRef constructs.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">MYSECRETPASSWORD </span> <span style="color:#75715e"># name of env var</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">valueFrom</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">secretKeyRef</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">name</span>: <span style="color:#ae81ff">my-secret    </span> <span style="color:#75715e"># name of an existing k8s secret</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">key</span>: <span style="color:#ae81ff">mypassword    </span> <span style="color:#75715e"># &#39;key&#39; subcomponent of the secret</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">volumeMounts</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">my-secret-vol    </span> <span style="color:#75715e"># mount file containing secret at /secret/mountpath</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">mountPath</span>: <span style="color:#e6db74">&#34;/secret/mountpath&#34;</span>
</span></span></code></pre></div><h2 id="2-volumes">2 Volumes</h2>
<p>一下例子会动态创建一个volume,然后在2步的workflow中使用这个volume.</p>
<p>pv是一个持久卷，pvc是一个持久卷声明，pv和pvc是k8s中的两个资源对象。pv是一个持久卷的实际对象，pvc是一个持久卷的声明对象。pv是一个集群级别的资源，pvc是一个命名空间级别的资源。pv是一个持久卷的实际对象，pvc是一个持久卷的声明对象。pv是一个集群级别的资源，pvc是一个命名空间级别的资源。</p>
<p>这里的pvc是临时存在的,workflow结束后会被删除.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">volumes-pvc-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">volumes-pvc-example</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">volumeClaimTemplates</span>:                 <span style="color:#75715e"># define volume, same syntax as k8s Pod spec</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">workdir                    </span> <span style="color:#75715e"># name of volume claim</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">accessModes</span>: [ <span style="color:#e6db74">&#34;ReadWriteOnce&#34;</span> ]
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">resources</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">requests</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">storage</span>: <span style="color:#ae81ff">1Gi                 </span> <span style="color:#75715e"># Gi =&gt; 1024 * 1024 * 1024</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">volumes-pvc-example</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">generate</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">yky8/argosay:v2</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo generating message in volume; cowsay hello world | tee /mnt/vol/hello_world.txt&#34;</span>]
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># Mount workdir volume at /mnt/vol before invoking docker/whalesay</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">volumeMounts</span>:                     <span style="color:#75715e"># same syntax as k8s Pod spec</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">workdir</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">mountPath</span>: <span style="color:#ae81ff">/mnt/vol</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:latest</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo getting message from volume; find /mnt/vol; cat /mnt/vol/hello_world.txt&#34;</span>]
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># Mount workdir volume at /mnt/vol before invoking docker/whalesay</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">volumeMounts</span>:                     <span style="color:#75715e"># same syntax as k8s Pod spec</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">workdir</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">mountPath</span>: <span style="color:#ae81ff">/mnt/vol</span>
</span></span></code></pre></div><p>Volume 是一种非常有效的方式,可以将大量数据从工作流的一个步骤移动到另一个步骤.根据系统的不同,一些卷可能可以从多个步骤同时访问.</p>
<p>有些时候,我们想要去获取已经存在的卷,而不是动态创建一个新的卷:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># Define Kubernetes PVC</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">PersistentVolumeClaim</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">my-existing-volume</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">accessModes</span>: [ <span style="color:#e6db74">&#34;ReadWriteOnce&#34;</span> ]
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">resources</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">requests</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">storage</span>: <span style="color:#ae81ff">1Gi</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">volumes-existing-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">volumes-existing-example</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Pass my-existing-volume as an argument to the volumes-existing-example template</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Same syntax as k8s Pod spec</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">workdir</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">persistentVolumeClaim</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">claimName</span>: <span style="color:#ae81ff">my-existing-volume</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">volumes-existing-example</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">generate</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">yky8/argosay:v2</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo generating message in volume; cowsay hello world | tee /mnt/vol/hello_world.txt&#34;</span>]
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">volumeMounts</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">workdir</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">mountPath</span>: <span style="color:#ae81ff">/mnt/vol</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:latest</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo getting message from volume; find /mnt/vol; cat /mnt/vol/hello_world.txt&#34;</span>]
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">volumeMounts</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">workdir</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">mountPath</span>: <span style="color:#ae81ff">/mnt/vol</span>
</span></span></code></pre></div><p>也可以在workflow的template字段下使用<strong>resource</strong>步骤来定义volume,这样可以在workflow的spec字段下定义volume,然后在workflow的template中使用这个volume.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">template-level-volume-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">generate-and-use-volume</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">generate-and-use-volume</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">generate-volume</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">generate-volume</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>            - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">pvc-size</span>
</span></span><span style="display:flex;"><span>              <span style="color:#75715e"># In a real-world example, this could be generated by a previous workflow step.</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#39;1Gi&#39;</span>
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">generate</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>            - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">pvc-name</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#39;{{steps.generate-volume.outputs.parameters.pvc-name}}&#39;</span>
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>            - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">pvc-name</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#39;{{steps.generate-volume.outputs.parameters.pvc-name}}&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">generate-volume</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">pvc-size</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">resource</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">action</span>: <span style="color:#ae81ff">create</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">setOwnerReference</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">manifest</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        apiVersion: v1
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        kind: PersistentVolumeClaim
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        metadata:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          generateName: pvc-example-
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        spec:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          accessModes: [&#39;ReadWriteOnce&#39;, &#39;ReadOnlyMany&#39;]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          resources:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            requests:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">              storage: &#39;{{inputs.parameters.pvc-size}}&#39;</span>        
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">outputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">pvc-name</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">valueFrom</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">jsonPath</span>: <span style="color:#e6db74">&#39;{.metadata.name}&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">pvc-name</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">workdir</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">persistentVolumeClaim</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">claimName</span>: <span style="color:#e6db74">&#39;{{inputs.parameters.pvc-name}}&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">yky8/argosay:v2</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo generating message in volume; cowsay hello world | tee /mnt/vol/hello_world.txt&#34;</span>]
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">volumeMounts</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">workdir</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">mountPath</span>: <span style="color:#ae81ff">/mnt/vol</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">pvc-name</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">workdir</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">persistentVolumeClaim</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">claimName</span>: <span style="color:#e6db74">&#39;{{inputs.parameters.pvc-name}}&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:latest</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo getting message from volume; find /mnt/vol; cat /mnt/vol/hello_world.txt&#34;</span>]
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">volumeMounts</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">workdir</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">mountPath</span>: <span style="color:#ae81ff">/mnt/vol</span>
</span></span></code></pre></div><p>如果要执行这个,需要先确定argo的namespace下有default service account的权限,否则会报错.</p>
<p>像我这个开始是没有pvc创建权限的,需要给default service account添加权限.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># role.yaml</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Role</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">argo</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">pvc-creator</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">rules</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">apiGroups</span>: [<span style="color:#e6db74">&#34;&#34;</span>]
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">resources</span>: [<span style="color:#e6db74">&#34;persistentvolumeclaims&#34;</span>]
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">verbs</span>: [<span style="color:#e6db74">&#34;create&#34;</span>, <span style="color:#e6db74">&#34;delete&#34;</span>, <span style="color:#e6db74">&#34;get&#34;</span>, <span style="color:#e6db74">&#34;list&#34;</span>, <span style="color:#e6db74">&#34;watch&#34;</span>]
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#75715e"># rolebinding.yaml</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">RoleBinding</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">pvc-creator-binding</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">argo</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">subjects</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ServiceAccount</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">default</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">argo</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">roleRef</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Role</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">pvc-creator</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">apiGroup</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>kubectl apply -f role_bind.yaml
</span></span><span style="display:flex;"><span>argo submit volume-tpl.yaml -n argo
</span></span></code></pre></div>
    <img src="/images/argo-workflow-pvc-tpl.png"  alt="argo-workflow-tpl"  class="center"  style="border-radius: 0px; width: 80%;"  />


]]></content>
        </item>
        
        <item>
            <title>Argo Workflow 3</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-3/</link>
            <pubDate>Sat, 25 May 2024 17:14:53 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-3/</guid>
            <description>Argo Workflow (3) 1 Artifacts 在运行工作流时，步骤生成或使用工件是非常常见的情况。通常，一个步骤的输出工件可能会被后续步骤作为输入工件使用。
下面的工作流规范包含两个按顺序运行的步骤。第一个名为 generate-artifact 的步骤将使用 argosay 模板生成一个工件，该工件将被第二个名为 print-message 的步骤使用，print-message 将消费生成的工件。
apiVersion: argoproj.io/v1alpha1 kind: Workflow metadata: generateName: artifact-passing- spec: entrypoint: artifact-example templates: - name: artifact-example steps: - - name: generate-artifact template: argosay - - name: consume-artifact template: print-message arguments: artifacts: # bind message to the hello-art artifact # generated by the generate-artifact step - name: message from: &amp;#34;{{steps.generate-artifact.outputs.artifacts.hello-art}}&amp;#34; - name: argosay container: image: yky8/argosay:v2 # sh -c，你可以在其后面提供一个字符串， # 这个字符串将被 sh 作为一个完整的 shell 命令来执行 command: [sh, -c] # The tee command is used in Linux and Unix systems.</description>
            <content type="html"><![CDATA[<h1 id="argo-workflow-3">Argo Workflow (3)</h1>
<h2 id="1-artifacts">1 Artifacts</h2>
<p>在运行工作流时，步骤生成或使用工件是非常常见的情况。通常，一个步骤的输出工件可能会被后续步骤作为输入工件使用。</p>
<p>下面的工作流规范包含两个按顺序运行的步骤。第一个名为 generate-artifact 的步骤将使用 argosay 模板生成一个工件，该工件将被第二个名为 print-message 的步骤使用，print-message 将消费生成的工件。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">artifact-passing-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">artifact-example</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">artifact-example</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">generate-artifact</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">consume-artifact</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">artifacts</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># bind message to the hello-art artifact</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># generated by the generate-artifact step</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">from</span>: <span style="color:#e6db74">&#34;{{steps.generate-artifact.outputs.artifacts.hello-art}}&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">yky8/argosay:v2</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># sh -c，你可以在其后面提供一个字符串，</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># 这个字符串将被 sh 作为一个完整的 shell 命令来执行</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># The tee command is used in Linux and Unix systems. </span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># It reads from the standard input and writes to both standard output and one or more files simultaneously. </span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># This can be useful when you want to save the output of a command to a file while also viewing it in the terminal.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;/usr/local/bin/argosay echo &#39;hello world&#39; | tee /tmp/hello_world.txt&#34;</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">outputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">artifacts</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># generate hello-art artifact from /tmp/hello_world.txt</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># artifacts can be directories as well as files</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">hello-art</span> <span style="color:#75715e"># 被 consume-artifact 步骤使用,&#34;from&#34;字段指定</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/tmp/hello_world.txt</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">artifacts</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># unpack the message input artifact</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># and put it at /tmp/message</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/tmp/message</span> <span style="color:#75715e"># put it at /tmp/message</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:latest</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;cat /tmp/message&#34;</span>]
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>argo submit artifacts.yaml -n argo
</span></span></code></pre></div>
    <img src="/images/argo-workflow-artifacts.png"  alt="argo-workflow-artifacts"  class="center"  style="border-radius: 0px; width: 30%;"  />


<h3 id="对于过大的工件artifact">对于过大的工件Artifact</h3>
<p>在运行工作流时，步骤生成或使用工件是非常常见的情况。通常，一个步骤的输出工件可能会被后续步骤作为输入工件使用。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">&lt;... snipped ...&gt;</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print-large-artifact</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># below patch gets merged with the actual pod spec and increses the memory</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># request of the init container.</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">podSpecPatch</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      initContainers:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        - name: init
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          resources:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            requests:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">              memory: 2Gi
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">              cpu: 300m</span>      
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">artifacts</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">data</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/tmp/large-file</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:latest</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;cat /tmp/large-file&#34;</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">&lt;... snipped ...&gt;</span>
</span></span></code></pre></div><h3 id="工件打包策略">工件打包策略</h3>
<p>在 Argo Workflows 中，工件默认被打包为 Tarball 并进行 gzip 压缩。您可以通过指定存档策略（archive strategy）来自定义此行为。以下是一个示例，展示了如何使用 archive 字段来自定义工件的存档策略：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">&lt;... snipped ...&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">outputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">artifacts</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># default behavior - tar+gzip default compression.</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">hello-art-1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/tmp/hello_world.txt</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># disable archiving entirely - upload the file / directory as is.</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># this is useful when the container layout matches the desired target repository layout.   </span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">hello-art-2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/tmp/hello_world.txt</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">archive</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">none</span>: {}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># customize the compression behavior (disabling it here).</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># this is useful for files with varying compression benefits, </span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># e.g. disabling compression for a cached build workspace and large binaries, </span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># or increasing compression for &#34;perfect&#34; textual data - like a json/xml export of a large database.</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">hello-art-3</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/tmp/hello_world.txt</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">archive</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">tar</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># no compression (also accepts the standard gzip 1 to 9 values)</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">compressionLevel</span>: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">&lt;... snipped ...&gt;</span>
</span></span></code></pre></div><h3 id="工件的垃圾收集">工件的垃圾收集</h3>
<p>存储引擎支持,文档: <a href="https://argo-workflows.readthedocs.io/en/latest/configure-artifact-repository/">https://argo-workflows.readthedocs.io/en/latest/configure-artifact-repository/</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">artifact-gc-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">main</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">artifactGC</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">strategy</span>: <span style="color:#ae81ff">OnWorkflowDeletion </span> <span style="color:#75715e"># default Strategy set here applies to all Artifacts by default</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">main</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">argoproj/argosay:v2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">command</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">sh</span>
</span></span><span style="display:flex;"><span>          - -<span style="color:#ae81ff">c</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">args</span>:
</span></span><span style="display:flex;"><span>          - |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            echo &#34;can throw this away&#34; &gt; /tmp/temporary-artifact.txt
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            echo &#34;keep this&#34; &gt; /tmp/keep-this.txt</span>            
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">outputs</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">artifacts</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">temporary-artifact</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/tmp/temporary-artifact.txt</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">s3</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">key</span>: <span style="color:#ae81ff">temporary-artifact.txt</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">keep-this</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/tmp/keep-this.txt</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">s3</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">key</span>: <span style="color:#ae81ff">keep-this.txt</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">artifactGC</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">strategy</span>: <span style="color:#ae81ff">Never  </span> <span style="color:#75715e"># optional override for an Artifact</span>
</span></span></code></pre></div><h3 id="工件命名建议--参数化">工件命名建议&ndash;参数化</h3>
<p>如果有可能存在并发运行的相同工作流，那么应该考虑使用参数化的S3键，例如使用<code>{{workflow.uid}}</code>等。这样做的目的是为了避免一个工作流正在删除一个工件，而另一个工作流正在为同一个S3键生成工件的情况。</p>
<p>例如，假设你有两个并发运行的工作流，它们都使用相同的S3键来存储工件。如果一个工作流完成并删除了它的工件，而另一个工作流还在生成工件，那么可能会出现问题。因为第二个工作流可能会发现它的工件已经被删除，或者它可能会覆盖第一个工作流的工件。</p>
<p>为了避免这种情况，你可以使用参数化的S3键，这样每个工作流都会有一个唯一的S3键。例如，你可以使用<code>{{workflow.uid}}</code>作为S3键的一部分，这样每个工作流都会有一个唯一的S3键，因为每个工作流的<code>uid</code>都是唯一的。</p>
<h3 id="存储服务的服务账号或iam注释">存储服务的服务账号或IAM注释</h3>
<p>如果要使用存储服务的服务账号或IAM注释，可以在工作流规范中指定这些注释。这些注释将被传递给存储服务，以便存储服务可以使用这些注释来控制对存储桶的访问。</p>
<p>可以改整个workflow的存储服务的服务账号或IAM注释，也可以为每个工件指定不同的服务账号或IAM注释。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">artifact-gc-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">main</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">artifactGC</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">strategy</span>: <span style="color:#ae81ff">OnWorkflowDeletion </span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">##############################################################################################</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#    Workflow Level Service Account and Metadata</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">##############################################################################################</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">serviceAccountName</span>: <span style="color:#ae81ff">my-sa</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">podMetadata</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">eks.amazonaws.com/role-arn</span>: <span style="color:#ae81ff">arn:aws:iam::111122223333:role/my-iam-role</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">main</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">argoproj/argosay:v2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">command</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">sh</span>
</span></span><span style="display:flex;"><span>          - -<span style="color:#ae81ff">c</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">args</span>:
</span></span><span style="display:flex;"><span>          - |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            echo &#34;can throw this away&#34; &gt; /tmp/temporary-artifact.txt
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            echo &#34;keep this&#34; &gt; /tmp/keep-this.txt</span>            
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">outputs</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">artifacts</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">temporary-artifact</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/tmp/temporary-artifact.txt</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">s3</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">key</span>: <span style="color:#ae81ff">temporary-artifact-{{workflow.uid}}.txt</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">artifactGC</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#75715e">####################################################################################</span>
</span></span><span style="display:flex;"><span>              <span style="color:#75715e">#    Optional override capability</span>
</span></span><span style="display:flex;"><span>              <span style="color:#75715e">####################################################################################</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">serviceAccountName</span>: <span style="color:#ae81ff">artifact-specific-sa</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">podMetadata</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">eks.amazonaws.com/role-arn</span>: <span style="color:#ae81ff">arn:aws:iam::111122223333:role/artifact-specific-iam-role</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">keep-this</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/tmp/keep-this.txt</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">s3</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">key</span>: <span style="color:#ae81ff">keep-this-{{workflow.uid}}.txt</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">artifactGC</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">strategy</span>: <span style="color:#ae81ff">Never</span>
</span></span></code></pre></div><p>要支持自建服务账号,需要创建Role和RoleBinding,并将Role绑定到ServiceAccount上:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Role</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">workflows.argoproj.io/description</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      This is the minimum recommended permissions needed if you want to use artifact GC.</span>      
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">artifactgc</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">rules</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">apiGroups</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">argoproj.io</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">resources</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">workflowartifactgctasks</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">verbs</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">list</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">watch</span>
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">apiGroups</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">argoproj.io</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">resources</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">workflowartifactgctasks/status</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">verbs</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">patch</span>
</span></span></code></pre></div><p>如果你使用了快速启动的manifest文件进行安装，那么你会得到一个名为artifactgc的角色（Role）。如果你使用的是发布版本的install.yaml文件进行安装，那么同样的权限会在argo-cluster-role中。</p>
<p>如果你没有使用自己的ServiceAccount，而是使用默认的ServiceAccount，那么你需要创建一个RoleBinding或ClusterRoleBinding，将artifactgc角色或argo-cluster-role绑定到默认的ServiceAccount上。这样，当Argo Workflow运行时，它就可以使用这些角色的权限。</p>
<h3 id="argo-workflow中的垃圾收集garbage-collectiongc失败时会发生什么">Argo Workflow中的垃圾收集（Garbage Collection，GC）失败时会发生什么?</h3>
<p>如果由于某种原因（除了工件已经被删除，这不被视为失败）删除工件失败，工作流的状态将被标记为新的条件，以指示&quot;Artifact GC Failure&quot;。同时，Kubernetes会发出一个事件，Argo Server UI也会显示失败信息。为了进一步调试，用户应该找到一个或多个名为<code>&lt;wfName&gt;-artgc-*</code>的Pod，并查看其日志。</p>
<p>如果用户需要删除工作流及其子CRD对象，他们需要修补工作流以删除阻止删除的终结器（finalizer）：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">finalizers</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">workflows.argoproj.io/artifact-gc</span>
</span></span></code></pre></div><p>可以通过以下命令删除终结器：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>kubectl patch workflow my-wf <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --type json <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --patch<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;[ { &#34;op&#34;: &#34;remove&#34;, &#34;path&#34;: &#34;/metadata/finalizers&#34; } ]&#39;</span>
</span></span></code></pre></div><p>或者为了简化操作，可以使用Argo CLI的<code>argo delete</code>命令并带上<code>--force</code>标志，这在底层会在执行删除操作前移除终结器。</p>
<p>在3.5及更高版本的发布版本中，Workflow Spec中添加了一个名为<code>forceFinalizerRemoval</code>的标志，即使Artifact GC失败，也可以强制移除终结器：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">artifactGC</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">strategy</span>: <span style="color:#ae81ff">OnWorkflowDeletion </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">forceFinalizerRemoval</span>: <span style="color:#66d9ef">true</span>
</span></span></code></pre></div><p>这意味着，即使工件的垃圾收集失败，也可以强制删除工作流。</p>
<h2 id="2-内置工件">2 内置工件</h2>
<p>有一些非常常见的工件类型，Argo Workflows提供了内置支持。这些工件类型包括：git仓库,http资源,GCS存储桶,S3存储桶的支持. 当然,你可以用任何容器做任何事情,但是这些内置工件类型可以让你更容易地使用这些常见的工件类型。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">hardwired-artifact-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">hardwired-artifact</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">hardwired-artifact</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">podSpecPatch</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        initContainers:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          - name: init
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            resources:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">              requests:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                memory: 2Gi
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                cpu: 300m</span>        
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">artifacts</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># Check out the main branch of the argo repo and place it at /src</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># revision can be anything that git checkout accepts: branch, commit, tag, etc.</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">argo-source</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/src</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">git</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">repo</span>: <span style="color:#ae81ff">https://github.com/argoproj/argo-workflows.git</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">revision</span>: <span style="color:#e6db74">&#34;main&#34;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># Download kubectl 1.8.0 and place it at /bin/kubectl</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">kubectl</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/bin/kubectl</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">mode</span>: <span style="color:#ae81ff">0755</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">http</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">url</span>: <span style="color:#ae81ff">https://storage.googleapis.com/kubernetes-release/release/v1.8.0/bin/linux/amd64/kubectl</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Copy an s3 compatible artifact repository bucket (such as AWS, GCS and MinIO) and place it at /s3</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># - name: objects</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">#   path: /s3</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">#   s3:</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">#     endpoint: storage.googleapis.com</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">#     bucket: my-bucket-name</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">#     key: path/in/bucket</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">#     accessKeySecret:</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">#       name: my-s3-credentials</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">#       key: accessKey</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">#     secretKeySecret:</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">#       name: my-s3-credentials</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">#       key: secretKey</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">debian</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;ls -l /src /bin/kubectl&#34;</span>] <span style="color:#75715e"># /s3 is not tested here</span>
</span></span></code></pre></div><p>这些是Argo Workflow中的工件（Artifacts）的使用示例。工件是在工作流执行过程中生成或使用的文件或目录。在这个例子中，工作流的模板定义了三个输入工件：</p>
<ol>
<li>
<p><code>argo-source</code>：这个工件使用git类型，它会从指定的git仓库（在这个例子中是https://github.com/argoproj/argo-workflows.git）检出指定的版本（在这个例子中是&quot;main&quot;分支），并将其放在<code>/src</code>目录下。</p>
</li>
<li>
<p><code>kubectl</code>：这个工件使用HTTP类型，它会从指定的URL（在这个例子中是https://storage.googleapis.com/kubernetes-release/release/v1.8.0/bin/linux/amd64/kubectl）下载文件，并将其放在<code>/bin/kubectl</code>。<code>mode: 0755</code>表示这个文件将被设置为可执行。</p>
</li>
<li>
<p><code>objects</code>：这个工件使用S3类型，它会从指定的S3兼容的存储服务（在这个例子中是storage.googleapis.com）的指定存储桶（在这个例子中是<code>my-bucket-name</code>）和键（在这个例子中是<code>path/in/bucket</code>）下载文件或目录，并将其放在<code>/s3</code>目录下。<code>accessKeySecret</code>和<code>secretKeySecret</code>字段指定了存储AWS访问密钥和秘密密钥的Kubernetes secrets。</p>
</li>
</ol>
<p>然后，这个模板定义了一个容器，这个容器会运行一个命令来列出<code>/src</code>、<code>/bin/kubectl</code>和<code>/s3</code>目录的内容，这些目录就是上面定义的输入工件被放置的地方。</p>
<h2 id="3-script">3 Script</h2>
<p>有时候我们想让工作流执行一些脚本，而不是直接运行一个容器。这时候我们可以使用<code>script</code>类型的工件。<code>script</code>类型的工件是一个脚本，它可以是一个shell脚本、Python脚本、Perl脚本、Ruby脚本等等。在这个例子中，我们将展示如何使用<code>script</code>类型的工件。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">scripts-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">bash-script-example</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">bash-script-example</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">generate-from-bash</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">gen-random-int-bash</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">generate-from-python</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">gen-random-int-python</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">generate-from-javascript</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">gen-random-int-javascript</span>
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print-for-bash</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;[BASH] {{steps.generate-from-bash.outputs.result}}&#34;</span>  <span style="color:#75715e"># The result of the here-script</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print-for-python</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;[PY] {{steps.generate-from-python.outputs.result}}&#34;</span>  <span style="color:#75715e"># The result of the Python script</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print-for-javascript</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;[JS] {{steps.generate-from-javascript.outputs.result}}&#34;</span>  <span style="color:#75715e"># The result of the JavaScript script</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">gen-random-int-bash</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">script</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">debian:9.4</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">bash]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">source</span>: <span style="color:#ae81ff">|                                        </span> <span style="color:#75715e"># Contents of the here-script</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">cat /dev/urandom | od -N2 -An -i | awk -v f=1 -v r=100 &#39;{printf &#34;%i\n&#34;, f + r * $1 / 65536}&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">gen-random-int-python</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">script</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">python:alpine3.6</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">python]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">source</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        import random
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        i = random.randint(1, 100)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        print(i)</span>        
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">gen-random-int-javascript</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">script</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">node:9.1-alpine</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">node]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">source</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        var rand = Math.floor(Math.random() * 100);
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        console.log(rand);</span>        
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:latest</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo result was: {{inputs.parameters.message}}&#34;</span>]
</span></span></code></pre></div><p>&ldquo;script&quot;关键字允许<strong>使用&quot;source&quot;标签来指定脚本体</strong>。这将创建一个包含脚本体的临时文件，然后将<strong>临时文件的名称作为最后一个参数传递给&quot;command&rdquo;</strong>，&ldquo;command&quot;应该是一个执行脚本体的解释器。</p>
<p>使用&quot;script&quot;特性还会将<strong>运行脚本的标准输出分配给一个名为&quot;result&quot;的特殊输出参数</strong>。这允许你在工作流规范的其余部分中使用运行脚本本身的结果。在这个例子中，结果简单地被&quot;print-message&quot;模板回显。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>argo submit scripts-parallel.yaml -n argo --watch
</span></span></code></pre></div>
    <img src="/images/argo-workflow-scripts-parallel.png"  alt="argo-workflow-script"  class="center"  style="border-radius: 0px; width: 50%;"  />


<h2 id="4-outputs-parameters">4 Outputs Parameters</h2>
<p>输出参数提供了一种通用机制,可以将步骤的结果用作参数(而不仅仅是作为工件).这允许你使用任何类型步骤的结果,而不仅仅是脚本. 用于条件测试,循环和参数. 输出参数的工作方式类似于脚本结果,只是输出参数的值被设置为生成的文件的内容,而不是stdout的内容.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">output-parameter-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">output-parameter</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">output-parameter</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>        - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">generate-parameter</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">template</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>        - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">consume-parameter</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">template</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#75715e"># Pass the hello-param output from the generate-parameter step as the message input to print-message</span>
</span></span><span style="display:flex;"><span>                - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;{{steps.generate-parameter.outputs.parameters.hello-param}}&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">yky8/argosay:v2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">command</span>: [ <span style="color:#ae81ff">sh, -c ]</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">args</span>: [ <span style="color:#e6db74">&#34;echo -n hello world &gt; /tmp/hello_world.txt&#34;</span> ]  <span style="color:#75715e"># generate the content of hello_world.txt</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">outputs</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">hello-param </span> <span style="color:#75715e"># name of output parameter</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">valueFrom</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/tmp/hello_world.txt</span> <span style="color:#75715e"># set the value of hello-param to the contents of this hello-world.txt</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">yky8/argosay:v2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">command</span>: [ <span style="color:#e6db74">&#34;/usr/local/bin/argosay&#34;</span> ]
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">args</span>: [ <span style="color:#e6db74">&#34;echo&#34;</span>,<span style="color:#e6db74">&#34;{{inputs.parameters.message}}&#34;</span> ]
</span></span></code></pre></div><p>这里拿取step的输出参数作为输入参数,而不是工件.这个例子中,<code>generate-parameter</code>步骤生成一个名为<code>hello-param</code>的输出参数,然后<code>consume-parameter</code>步骤将这个输出参数作为输入参数传递给<code>print-message</code>步骤。</p>
<p>如果是dag的话,可以使用<code>{{tasks.generate-parameter.outputs.parameters.hello-param}}</code>来获取输出参数.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>argo submit output-params.yaml -n argo --watch
</span></span></code></pre></div><h3 id="outputsresult捕获标准输出"><code>outputs.result</code>捕获标准输出</h3>
<p>只有标准输出流的256 kb会被捕获.</p>
<ul>
<li>
<p>script的输出就是用过<code>outputs.result</code>来捕获的.可以参考上一节的内容.</p>
</li>
<li>
<p>容器Steps和Tasks的标准输出也会被捕获并存储在结果参数中.</p>
<ul>
<li>例如,如果有一个名为 log-int 的任务,那么它的结果可以通过 {{ tasks.log-int.outputs.result }} 来访问. 如果你在使用步骤,那么可以将 tasks 替换为 steps,即 {{ steps.log-int.outputs.result }}.这样,你就可以在工作流的其他部分使用这个步骤或任务的输出结果.</li>
</ul>
</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Argo Workflow 2</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-2/</link>
            <pubDate>Sat, 25 May 2024 14:30:03 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-2/</guid>
            <description>Argo Workflow (2) 1 Steps 多步骤的工作流可以通过steps字段来定义。每个步骤都是一个独立的容器，可以并行执行。
apiVersion: argoproj.io/v1alpha1 kind: Workflow metadata: generateName: steps- spec: entrypoint: hello-hello-hello # This spec contains two templates: hello-hello-hello and whalesay templates: - name: hello-hello-hello # Instead of just running a container # This template has a sequence of steps steps: - - name: hello1 # hello1 is run before the following steps template: argosay arguments: parameters: - name: message value: &amp;#34;hello1&amp;#34; - - name: hello2a # double dash =&amp;gt; run after previous step template: argosay arguments: parameters: - name: message value: &amp;#34;hello2a&amp;#34; - name: hello2b # single dash =&amp;gt; run in parallel with previous step template: argosay arguments: parameters: - name: message value: &amp;#34;hello2b&amp;#34; # This is the same template as from the previous example - name: argosay inputs: parameters: - name: message container: image: yky8/argosay:v2 command: [ &amp;#34;/usr/local/bin/argosay&amp;#34; ] args: [ &amp;#34;echo&amp;#34;,&amp;#34;{{inputs.</description>
            <content type="html"><![CDATA[<h1 id="argo-workflow-2">Argo Workflow (2)</h1>
<h2 id="1-steps">1 Steps</h2>
<p>多步骤的工作流可以通过<code>steps</code>字段来定义。每个步骤都是一个独立的容器，可以并行执行。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">steps-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">hello-hello-hello</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># This spec contains two templates: hello-hello-hello and whalesay</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">hello-hello-hello</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># Instead of just running a container</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># This template has a sequence of steps</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>        - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">hello1           </span> <span style="color:#75715e"># hello1 is run before the following steps</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">template</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>                - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;hello1&#34;</span>
</span></span><span style="display:flex;"><span>        - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">hello2a          </span> <span style="color:#75715e"># double dash =&gt; run after previous step</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">template</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>                - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;hello2a&#34;</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">hello2b          </span> <span style="color:#75715e"># single dash =&gt; run in parallel with previous step</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">template</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>                - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;hello2b&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># This is the same template as from the previous example</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">yky8/argosay:v2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">command</span>: [ <span style="color:#e6db74">&#34;/usr/local/bin/argosay&#34;</span> ]
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">args</span>: [ <span style="color:#e6db74">&#34;echo&#34;</span>,<span style="color:#e6db74">&#34;{{inputs.parameters.message}}&#34;</span> ]
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>argo submit multi-steps.yaml -n argo --watch
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Name:                steps-kl27q
</span></span><span style="display:flex;"><span>Namespace:           argo
</span></span><span style="display:flex;"><span>ServiceAccount:      unset (will run with the default ServiceAccount)
</span></span><span style="display:flex;"><span>Status:              Succeeded
</span></span><span style="display:flex;"><span>Conditions:
</span></span><span style="display:flex;"><span> PodRunning          False
</span></span><span style="display:flex;"><span> Completed           True
</span></span><span style="display:flex;"><span>Created:             Sat May 25 14:44:26 +0800 (20 seconds ago)
</span></span><span style="display:flex;"><span>Started:             Sat May 25 14:44:26 +0800 (20 seconds ago)
</span></span><span style="display:flex;"><span>Finished:            Sat May 25 14:44:46 +0800 (now)
</span></span><span style="display:flex;"><span>Duration:            20 seconds
</span></span><span style="display:flex;"><span>Progress:            3/3
</span></span><span style="display:flex;"><span>ResourcesDuration:   0s*(1 cpu),6s*(100Mi memory)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>STEP            TEMPLATE           PODNAME                         DURATION  MESSAGE
</span></span><span style="display:flex;"><span> ✔ steps-kl27q  hello-hello-hello
</span></span><span style="display:flex;"><span> ├───✔ hello1   argosay            steps-kl27q-argosay-3962065941  3s
</span></span><span style="display:flex;"><span> └─┬─✔ hello2a  argosay            steps-kl27q-argosay-3285575750  3s
</span></span><span style="display:flex;"><span>   └─✔ hello2b  argosay            steps-kl27q-argosay-3268798131  3s
</span></span></code></pre></div><h2 id="2-dag">2 DAG</h2>
<p>作为指定步骤序列的替代方案,您可以通过指定每个任务的依赖关系,将工作流定义为有向无环图(DAG)
.对于复杂的工作流,DAGs可能更容易维护,并且允许任务在运行时达到最大的并行性.</p>
<p>在以下工作流中,步骤 A 首先运行,因为它没有依赖关系.一旦 A 完成,步骤 B 和 C 并行运行.最后,一旦 B 和 C 完成,步骤 D 运行.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">dag-diamond-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">diamond</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">echo</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:3.7</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">command</span>: [ <span style="color:#ae81ff">echo, &#34;{{inputs.parameters.message}}&#34; ]</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">diamond</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">dag</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">tasks</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">A</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">template</span>: <span style="color:#ae81ff">echo</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">parameters</span>: [ { <span style="color:#f92672">name: message, value</span>: <span style="color:#ae81ff">A } ]</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">B</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">dependencies</span>: [ <span style="color:#ae81ff">A ]</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">template</span>: <span style="color:#ae81ff">echo</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">parameters</span>: [ { <span style="color:#f92672">name: message, value</span>: <span style="color:#ae81ff">B } ]</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">C</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">dependencies</span>: [ <span style="color:#ae81ff">A ]</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">template</span>: <span style="color:#ae81ff">echo</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">parameters</span>: [ { <span style="color:#f92672">name: message, value</span>: <span style="color:#ae81ff">C } ]</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">D</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">dependencies</span>: [ <span style="color:#ae81ff">B, C ]</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">template</span>: <span style="color:#ae81ff">echo</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">parameters</span>: [ { <span style="color:#f92672">name: message, value</span>: <span style="color:#ae81ff">D } ]</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>argo submit dag.yaml -n argo --watch
</span></span></code></pre></div>
    <img src="/images/argo-workflow-dag.png"  alt="argo-workflow-dag"  class="center"  style="border-radius: 0px; width: 30%;"  />


<h3 id="加强的depends">加强的Depends</h3>
<p>depend字段可以加强, 例如<code>depends: &quot;A &amp;&amp; B&quot;</code>表示任务D依赖于任务A和任务B同时完成,等价于<code>depends: [A, B]</code>.
还可以考察task的终态,例如<code>depends: &quot;A.Succeeded&quot;</code>表示任务D依赖于任务A成功完成.</p>
<p>这是您要的 Markdown 表格：</p>
<table>
<thead>
<tr>
<th>Task Result</th>
<th>Description</th>
<th>Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>.Succeeded</td>
<td>Task Succeeded</td>
<td>Task finished with no error</td>
</tr>
<tr>
<td>.Failed</td>
<td>Task Failed</td>
<td>Task exited with a non-0 exit code</td>
</tr>
<tr>
<td>.Errored</td>
<td>Task Errored</td>
<td>Task had an error other than a non-0 exit code</td>
</tr>
<tr>
<td>.Skipped</td>
<td>Task Skipped</td>
<td>Task was skipped</td>
</tr>
<tr>
<td>.Omitted</td>
<td>Task Omitted</td>
<td>Task was omitted</td>
</tr>
<tr>
<td>.Daemoned</td>
<td>Task is Daemoned and is not Pending</td>
<td></td>
</tr>
</tbody>
</table>
<p>默认省略状态就是成功状态, 例如:</p>
<ul>
<li><code>depends: &quot;A&quot;</code>等价于<code>depends: &quot;(A.Succeeded || A.Skipped || A.Daemoned)&quot;</code>.</li>
<li><code>depends: &quot;task || task-2.Failed&quot;</code>
等价于 <code>depends: (task.Succeeded || task.Skipped || task.Daemoned) || task-2.Failed</code>.</li>
</ul>
<p>逻辑运算符有: <code>&amp;&amp;</code>,<code>||</code>,<code>!</code>.</p>
<h3 id="multi-root-dag">multi-root DAG</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># The following workflow executes a multi-root workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   A   B</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#  / \ /</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># C   D</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">dag-multiroot-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">multiroot</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">echo</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:3.7</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">command</span>: [ <span style="color:#ae81ff">echo, &#34;{{inputs.parameters.message}}&#34; ]</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">multiroot</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">dag</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">tasks</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">A</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">template</span>: <span style="color:#ae81ff">echo</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">parameters</span>: [ { <span style="color:#f92672">name: message, value</span>: <span style="color:#ae81ff">A } ]</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">B</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">template</span>: <span style="color:#ae81ff">echo</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">parameters</span>: [ { <span style="color:#f92672">name: message, value</span>: <span style="color:#ae81ff">B } ]</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">C</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">depends</span>: <span style="color:#e6db74">&#34;A&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">template</span>: <span style="color:#ae81ff">echo</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">parameters</span>: [ { <span style="color:#f92672">name: message, value</span>: <span style="color:#ae81ff">C } ]</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">D</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">depends</span>: <span style="color:#e6db74">&#34;A &amp;&amp; B&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">template</span>: <span style="color:#ae81ff">echo</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">parameters</span>: [ { <span style="color:#f92672">name: message, value</span>: <span style="color:#ae81ff">D } ]</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>argo submit multi-root-dag.yaml -n argo --watch
</span></span></code></pre></div>
    <img src="/images/argo-workflow-multi-root.png"  alt="argo-workflow-multiroot-dag"  class="center"  style="border-radius: 0px; width: 40%;"  />


<h2 id="3-工作流规范的结构">3 工作流规范的结构</h2>
<p>现在我们已经对工作流规范的基本组成部分有了足够的了解。回顾一下其基本结构：</p>
<ul>
<li>Kubernetes头部，包括元数据</li>
<li>规范主体
<ul>
<li>入口点调用，可选参数</li>
<li>模板定义列表
<ul>
<li>对于每个模板定义
<ul>
<li>模板的名称</li>
<li>可选的输入列表</li>
<li>可选的输出列表</li>
<li>容器调用（叶模板）或步骤列表
<ul>
<li>对于每个步骤，模板调用</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>总结一下，工作流规范由一组 Argo 模板组成，每个模板由一个可选的输入部分、一个可选的输出部分以及<strong>一个容器调用</strong>或<strong>一组步骤组成</strong>，<strong>每个步骤都调用另一个模板</strong>。</p>
<p>请注意，工作流规范的容器部分将接受与 pod 规范的容器部分相同的选项，包括但不限于环境变量、秘密和卷挂载。同样，对于卷声明和卷。</p>
]]></content>
        </item>
        
        <item>
            <title>Argo Workflow 1</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-1/</link>
            <pubDate>Sat, 25 May 2024 03:46:15 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-1/</guid>
            <description>Argo Workflow (1) 大量例子在此: https://github.com/argoproj/argo-workflows/tree/main/examples 但是,由于docker/whalesay镜像不再支持,导致很多例子无法运行,需要自己构建一个镜像来替代它.
1 Argo CLI argo submit hello-world.yaml # submit a workflow spec to Kubernetes argo list # list current workflows argo get hello-world-xxx # get info about a specific workflow argo logs hello-world-xxx # print the logs from a workflow argo delete hello-world-xxx # delete workflow 用kubectl也可以, 都要指定namespace
2 Hello World apiVersion: argoproj.io/v1alpha1 kind: Workflow # new type of k8s spec metadata: generateName: hello-world- # name of the workflow spec spec: entrypoint: argosay # invoke the whalesay template templates: - name: argosay # name of the template container: image: yky8/argosay:v2 command: [&amp;#34;/usr/local/bin/argosay&amp;#34;] args: [&amp;#34;echo&amp;#34;, &amp;#34;hello world!</description>
            <content type="html"><![CDATA[<h1 id="argo-workflow-1">Argo Workflow (1)</h1>
<p>大量例子在此: <a href="https://github.com/argoproj/argo-workflows/tree/main/examples">https://github.com/argoproj/argo-workflows/tree/main/examples</a>
但是,由于<code>docker/whalesay</code>镜像不再支持,导致很多例子无法运行,需要自己构建一个镜像来替代它.</p>
<h2 id="1-argo-cli">1 Argo CLI</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>argo submit hello-world.yaml    <span style="color:#75715e"># submit a workflow spec to Kubernetes</span>
</span></span><span style="display:flex;"><span>argo list                       <span style="color:#75715e"># list current workflows</span>
</span></span><span style="display:flex;"><span>argo get hello-world-xxx        <span style="color:#75715e"># get info about a specific workflow</span>
</span></span><span style="display:flex;"><span>argo logs hello-world-xxx       <span style="color:#75715e"># print the logs from a workflow</span>
</span></span><span style="display:flex;"><span>argo delete hello-world-xxx     <span style="color:#75715e"># delete workflow</span>
</span></span></code></pre></div><p>用<code>kubectl</code>也可以, 都要指定<code>namespace</code></p>
<h2 id="2-hello-world">2 Hello World</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow                 </span> <span style="color:#75715e"># new type of k8s spec</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">hello-world-   </span> <span style="color:#75715e"># name of the workflow spec</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">argosay         </span> <span style="color:#75715e"># invoke the whalesay template</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">argosay             </span> <span style="color:#75715e"># name of the template</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">yky8/argosay:v2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">command</span>: [<span style="color:#e6db74">&#34;/usr/local/bin/argosay&#34;</span>]
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo&#34;</span>, <span style="color:#e6db74">&#34;hello world!&#34;</span>]
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">resources</span>: <span style="color:#75715e"># limit the resources</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">limits</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">memory</span>: <span style="color:#ae81ff">32Mi</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">cpu</span>: <span style="color:#ae81ff">100m</span>
</span></span></code></pre></div><p>执行 <code>argo submit -n argo --watch hello-world.yaml</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Name:                hello-world-852mj
</span></span><span style="display:flex;"><span>Namespace:           argo
</span></span><span style="display:flex;"><span>ServiceAccount:      unset (will run with the default ServiceAccount)
</span></span><span style="display:flex;"><span>Status:              Succeeded
</span></span><span style="display:flex;"><span>Conditions:
</span></span><span style="display:flex;"><span> PodRunning          False
</span></span><span style="display:flex;"><span> Completed           True
</span></span><span style="display:flex;"><span>Created:             Sat May 25 02:58:27 +0800 (10 seconds ago)
</span></span><span style="display:flex;"><span>Started:             Sat May 25 02:58:27 +0800 (10 seconds ago)
</span></span><span style="display:flex;"><span>Finished:            Sat May 25 02:58:37 +0800 (now)
</span></span><span style="display:flex;"><span>Duration:            10 seconds
</span></span><span style="display:flex;"><span>Progress:            1/1
</span></span><span style="display:flex;"><span>ResourcesDuration:   0s*(1 cpu),1s*(100Mi memory)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>STEP                  TEMPLATE  PODNAME            DURATION  MESSAGE
</span></span><span style="display:flex;"><span> ✔ hello-world-852mj  argosay   hello-world-852mj  3s
</span></span></code></pre></div><h2 id="3-parameters">3 Parameters</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">hello-world-parameters-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># invoke the whalesay template with</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># &#34;hello world&#34; as the argument</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># to the message parameter</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">value</span>: <span style="color:#ae81ff">hello world</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message      </span> <span style="color:#75715e"># parameter declaration</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># run cowsay with that message input parameter as args</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">yky8/argosay:v2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">command</span>: [ <span style="color:#e6db74">&#34;/usr/local/bin/argosay&#34;</span> ]
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">args</span>: [ <span style="color:#e6db74">&#34;echo&#34;</span> ,<span style="color:#e6db74">&#34;{{inputs.parameters.message}}&#34;</span> ]
</span></span></code></pre></div><p><strong>第一种: parameter 来自 <code>-p</code> 参数</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>argo submit arguments-parameters.yaml -n argo -p message<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;goodbye world&#34;</span>
</span></span></code></pre></div><p><strong>第二种: parameter 来自 文件</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># params.yaml</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">message</span>: <span style="color:#ae81ff">goodbye world</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>argo submit arguments-parameters.yaml -n argo --parameter-file params.yaml
</span></span></code></pre></div><p><strong>改写任意spec中的参数</strong>
命令行参数也可以用于覆盖默认入口点，并调用工作流规范中的任何模板。例如，如果您添加了一个名为 argosay-caps 的新版本的 argosay 模板，但您不想更改默认的入口点，您可以通过以下命令行调用它：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>argo submit arguments-parameters.yaml -n argo --entrypoint argosay-caps
</span></span></code></pre></div><p>通过结合 <code>--entrypoint</code> 和 <code>-p</code> 参数的使用，您可以调用工作流规范中的任何模板，并传递任何您喜欢的参数。</p>
<p>在 <code>spec.arguments.parameters</code> 中设置的值是全局作用域的，可以通过 <code>{{workflow.parameters.parameter_name}}</code> 访问。这对于将信息传递给工作流中的多个步骤非常有用。例如，如果您希望以每个容器环境中设置的不同日志级别运行工作流，您可以创建类似以下的 YAML 文件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">global-parameters-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">A</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">log-level</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">value</span>: <span style="color:#ae81ff">INFO</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">A</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">containerA</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">LOG_LEVEL</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;{{workflow.parameters.log-level}}&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">runA]</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">B</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">containerB</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">LOG_LEVEL</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;{{workflow.parameters.log-level}}&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">runB]</span>
</span></span></code></pre></div><p>在这个工作流中，步骤 A 和 B 都将日志级别设置为 INFO，并且可以使用 <code>-p</code> 标志在工作流提交之间轻松更改。</p>
<h3 id="workflowparametersparam_name-和-inputsparametersparam_name-有什么区别">{{workflow.parameters.param_name}} 和 {{inputs.parameters.param_name}} 有什么区别?</h3>
<ul>
<li>{{workflow.parameters.param_name}}：这种形式的参数是在工作流级别定义的，也就是说，这些参数是在整个工作流中都可以访问的。这些参数通常在工作流的 spec.arguments.parameters 部分定义，并且可以在提交工作流时通过命令行参数进行覆盖。</li>
<li>{{inputs.parameters.param_name}}：这种形式的参数是在模板级别定义的，也就是说，这些参数只能在定义它们的模板中访问。这些参数通常在模板的 inputs.parameters 部分定义，并且可以通过工作流或其他模板传递给它们。</li>
</ul>
<p>在 Argo Workflow 中，<code>{{workflow.parameters.param_name}}</code> 和 <code>{{inputs.parameters.param_name}}</code> 的使用可以通过以下例子来说明：</p>
<p>假设我们有一个工作流定义如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">example-workflow-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">main</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">workflow-param</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;This is a workflow parameter&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">main</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">step-one</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;{{workflow.parameters.workflow-param}}&#34;</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:latest</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">echo]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;{{inputs.parameters.message}}&#34;</span>]
</span></span></code></pre></div><p>在这个例子中，我们定义了一个工作流参数 <code>workflow-param</code>，并在 <code>main</code> 模板中的步骤 <code>step-one</code> 中使用了它。我们通过 <code>{{workflow.parameters.workflow-param}}</code> 来引用这个工作流参数，并将其值传递给 <code>print-message</code> 模板的 <code>message</code> 参数。</p>
<p>然后，在 <code>print-message</code> 模板中，我们定义了一个输入参数 <code>message</code>，并在容器的命令中使用了它。我们通过 <code>{{inputs.parameters.message}}</code> 来引用这个输入参数。</p>
<p>所以，当我们运行这个工作流时，<code>print-message</code> 模板的容器会打印出 &ldquo;This is a workflow parameter&rdquo;，这就是 <code>workflow-param</code> 参数的值。</p>
]]></content>
        </item>
        
        <item>
            <title>Quick Start With Self Build Image</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/quick-start-with-self-build-image/</link>
            <pubDate>Sat, 25 May 2024 02:17:44 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/quick-start-with-self-build-image/</guid>
            <description>比较坎坷的 &amp;ldquo;Quick&amp;rdquo; Start 最近想复习一下argo workflow，于是打算从官方文档开始，按照文档的步骤一步步来。然而，事情并没有那么顺利。官方的 docker/whalesay 镜像在新的docker版本下不支持了,这导致数百个以此为基础的hello world示例都无法正常运行。于是我决定自己构建一个镜像，来替代官方的docker/whalesay镜像。
1 创建本地k8s集群 用miniKube创建一个本地的k8s集群，方便测试。
brew install minikube minikube start minikube dashboard 2 下载argo workflow kubectl create namespace argo kubectl apply -n argo -f https://github.com/argoproj/argo-workflows/releases/download/v&amp;lt;&amp;lt;ARGO_WORKFLOWS_VERSION&amp;gt;&amp;gt;/quick-start-minimal.yaml 3 构建自己的镜像 Copy whalesay 的逻辑到 argosay 这个大概用法就是 argosay [command] [args], 然后根据command执行不同的逻辑。
如果command是空的，就输出&amp;quot;hello argo&amp;quot; 如果command是assert_contains，就在第二个参数中查找第三个参数 如果command是cat，就输出第二个参数的内容 如果command是echo，就输出第二个参数的内容 如果command是exit，就退出 如果command是sleep，就睡眠 如果command是sh，就执行第二个参数的shell命令 其他情况，就退出 # argosay #!/bin/sh set -eu case ${1:-} in &amp;#39;&amp;#39;) echo &amp;#34;hello argo&amp;#34; ;; assert_contains) grep -F &amp;#34;$3&amp;#34; &amp;#34;$2&amp;#34; ;; cat) cat &amp;#34;$2&amp;#34; ;; echo) case $# in 1) echo &amp;#34;hello argo&amp;#34; ;; 2) echo &amp;#34;$2&amp;#34; ;; 3) mkdir -p &amp;#34;$(dirname $3)&amp;#34; echo &amp;#34;$2&amp;#34; &amp;gt; &amp;#34;$3&amp;#34; sleep 0.</description>
            <content type="html"><![CDATA[<h1 id="比较坎坷的-quick-start">比较坎坷的 &ldquo;Quick&rdquo; Start</h1>
<p>最近想复习一下argo workflow，于是打算从官方文档开始，按照文档的步骤一步步来。然而，事情并没有那么顺利。官方的 docker/whalesay 镜像在新的docker版本下不支持了,这导致数百个以此为基础的hello world示例都无法正常运行。于是我决定自己构建一个镜像，来替代官方的docker/whalesay镜像。</p>
<h2 id="1-创建本地k8s集群">1 创建本地k8s集群</h2>
<p>用miniKube创建一个本地的k8s集群，方便测试。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>brew install minikube
</span></span><span style="display:flex;"><span>minikube start
</span></span><span style="display:flex;"><span>minikube dashboard
</span></span></code></pre></div><h2 id="2-下载argo-workflow">2 下载argo workflow</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>kubectl create namespace argo
</span></span><span style="display:flex;"><span>kubectl apply -n argo -f https://github.com/argoproj/argo-workflows/releases/download/v&lt;&lt;ARGO_WORKFLOWS_VERSION&gt;&gt;/quick-start-minimal.yaml
</span></span></code></pre></div><h2 id="3-构建自己的镜像">3 构建自己的镜像</h2>
<h3 id="copy-whalesay-的逻辑到-argosay">Copy whalesay 的逻辑到 argosay</h3>
<p>这个大概用法就是 <code>argosay [command] [args]</code>, 然后根据command执行不同的逻辑。</p>
<ul>
<li>如果command是空的，就输出&quot;hello argo&quot;</li>
<li>如果command是assert_contains，就在第二个参数中查找第三个参数</li>
<li>如果command是cat，就输出第二个参数的内容</li>
<li>如果command是echo，就输出第二个参数的内容</li>
<li>如果command是exit，就退出</li>
<li>如果command是sleep，就睡眠</li>
<li>如果command是sh，就执行第二个参数的shell命令</li>
<li>其他情况，就退出</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># argosay</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#!/bin/sh</span>
</span></span><span style="display:flex;"><span>set -eu
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> <span style="color:#e6db74">${</span>1<span style="color:#66d9ef">:-</span><span style="color:#e6db74">}</span> in
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;hello argo&#34;</span>
</span></span><span style="display:flex;"><span>    ;;
</span></span><span style="display:flex;"><span>  assert_contains<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    grep -F <span style="color:#e6db74">&#34;</span>$3<span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#34;</span>$2<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>  ;;
</span></span><span style="display:flex;"><span>  cat<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    cat <span style="color:#e6db74">&#34;</span>$2<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>  ;;
</span></span><span style="display:flex;"><span>  echo<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> $# in
</span></span><span style="display:flex;"><span>    1<span style="color:#f92672">)</span> echo <span style="color:#e6db74">&#34;hello argo&#34;</span> ;;
</span></span><span style="display:flex;"><span>    2<span style="color:#f92672">)</span> echo <span style="color:#e6db74">&#34;</span>$2<span style="color:#e6db74">&#34;</span> ;;
</span></span><span style="display:flex;"><span>    3<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>      mkdir -p <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>dirname $3<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>      echo <span style="color:#e6db74">&#34;</span>$2<span style="color:#e6db74">&#34;</span> &gt; <span style="color:#e6db74">&#34;</span>$3<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>      sleep 0.1 ;<span style="color:#75715e"># sleep so the PNS executor has time to secure root file</span>
</span></span><span style="display:flex;"><span>      ;;
</span></span><span style="display:flex;"><span>    default<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>      exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">esac</span>
</span></span><span style="display:flex;"><span>    ;;
</span></span><span style="display:flex;"><span>  exit<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    exit <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>2<span style="color:#66d9ef">:-</span>0<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    ;;
</span></span><span style="display:flex;"><span>  sleep<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    sleep <span style="color:#e6db74">&#34;</span>$2<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    ;;
</span></span><span style="display:flex;"><span>  sh<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    sh <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>2<span style="color:#66d9ef">:-</span>0<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    ;;
</span></span><span style="display:flex;"><span>  *<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">esac</span>
</span></span></code></pre></div><h3 id="构建镜像">构建镜像</h3>
<p>先写一个Dockerfile:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-DOCKERFILE" data-lang="DOCKERFILE"><span style="display:flex;"><span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> alpine:latest</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> argosay /usr/local/bin/argosay<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> chmod +x /usr/local/bin/argosay<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENTRYPOINT</span> [<span style="color:#e6db74">&#34;/usr/local/bin/argosay&#34;</span>]<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>登录docker hub，创建一个新的repository，然后push镜像。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>docker login
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>docker build -t argosay .
</span></span><span style="display:flex;"><span>docker tag argosay:latest <span style="color:#e6db74">&lt;&lt;DOCKER_HUB_USERNAME&gt;&gt;/argosay:latest
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">docker push &lt;&lt;DOCKER_HUB_USERNAME</span>&gt;&gt;/argosay:latest
</span></span></code></pre></div><h3 id="写新的workflow-manifest">写新的workflow manifest</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># argo-demo.yaml</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">argosay-example-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">argosay-example</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">argosay-example</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">&lt;&lt;DOCKER_HUB_USERNAME&gt;&gt;/argosay:latest </span> <span style="color:#75715e"># 替换为您在远程仓库中的镜像路径</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#e6db74">&#34;/usr/local/bin/argosay&#34;</span>]
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo&#34;</span>, <span style="color:#e6db74">&#34;hello world!&#34;</span>]
</span></span></code></pre></div><h2 id="4-提交workflow">4 提交workflow</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>argo submit -n argo --watch argo-demo.yaml
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 查看workflow</span>
</span></span><span style="display:flex;"><span>argo list -n argo
</span></span><span style="display:flex;"><span>argo get -n argo <span style="color:#e6db74">&lt;&lt;WORKFLOW_NAME&gt;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">argo logs -n argo &lt;&lt;WORKFLOW_NAME</span>&gt;&gt;
</span></span></code></pre></div><h2 id="5-ui查看">5 UI查看</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>kubectl port-forward svc/argo-server -n argo 2746:2746
</span></span><span style="display:flex;"><span>open http://localhost:2746
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Hash Function vs Symmetric Encryption</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/go/encryption/hash-function-vs-symmetric-encryption/</link>
            <pubDate>Wed, 22 May 2024 23:29:47 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/go/encryption/hash-function-vs-symmetric-encryption/</guid>
            <description>对称加密和散列算法的核心区别 1 对称加密 目的: 保护数据的机密性，使其无法被未授权方读取。
工作原理: 使用相同的密钥对数据进行加密和解密。
特点:
可逆性：可以使用相同的密钥解密密文得到原始数据。 密钥管理：需要安全地共享密钥，否则数据无法解密。 应用场景: 安全通信、数据存储、数字签名等。
2 散列算法 目的: 验证数据的完整性和真实性。
工作原理: 将任意长度的输入转换为固定长度的哈希值。
特点:
单向性：无法从哈希值推算出原始数据。 抗碰撞性：难以找到两个不同的输入产生相同的哈希值。 完整性：数据的任何修改都会导致哈希值改变。 应用场景: 文件完整性校验、密码存储、数字签名等。
3 总结 特性 对称加密 散列算法 目的 保密性 完整性和真实性 可逆性 可逆 不可逆 密钥管理 需要密钥管理 无需密钥管理 输出 加密数据 哈希值 对称加密和散列算法都是重要的密码学技术，用于保护数据的安全。它们在工作原理、应用场景和安全性等方面都有所不同。选择哪种技术取决于具体的应用需求。</description>
            <content type="html"><![CDATA[<h1 id="对称加密和散列算法的核心区别">对称加密和散列算法的核心区别</h1>
<h2 id="1-对称加密">1 对称加密</h2>
<p><strong>目的:</strong> 保护数据的机密性，使其无法被未授权方读取。</p>
<p><strong>工作原理:</strong> 使用相同的密钥对数据进行加密和解密。</p>
<p><strong>特点:</strong></p>
<ul>
<li>可逆性：可以使用相同的密钥解密密文得到原始数据。</li>
<li>密钥管理：需要安全地共享密钥，否则数据无法解密。</li>
</ul>
<p><strong>应用场景:</strong> 安全通信、数据存储、数字签名等。</p>
<h2 id="2-散列算法">2 散列算法</h2>
<p><strong>目的:</strong> 验证数据的完整性和真实性。</p>
<p><strong>工作原理:</strong> 将任意长度的输入转换为固定长度的哈希值。</p>
<p><strong>特点:</strong></p>
<ul>
<li>单向性：无法从哈希值推算出原始数据。</li>
<li>抗碰撞性：难以找到两个不同的输入产生相同的哈希值。</li>
<li>完整性：数据的任何修改都会导致哈希值改变。</li>
</ul>
<p><strong>应用场景:</strong> 文件完整性校验、密码存储、数字签名等。</p>
<h2 id="3-总结">3 总结</h2>
<table>
<thead>
<tr>
<th>特性</th>
<th>对称加密</th>
<th>散列算法</th>
</tr>
</thead>
<tbody>
<tr>
<td>目的</td>
<td>保密性</td>
<td>完整性和真实性</td>
</tr>
<tr>
<td>可逆性</td>
<td>可逆</td>
<td>不可逆</td>
</tr>
<tr>
<td>密钥管理</td>
<td>需要密钥管理</td>
<td>无需密钥管理</td>
</tr>
<tr>
<td>输出</td>
<td>加密数据</td>
<td>哈希值</td>
</tr>
</tbody>
</table>
<p>对称加密和散列算法都是重要的密码学技术，用于保护数据的安全。它们在工作原理、应用场景和安全性等方面都有所不同。选择哪种技术取决于具体的应用需求。</p>
]]></content>
        </item>
        
        <item>
            <title>Open Compare to Openfile</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/go/memo/open-compare-to-openfile/</link>
            <pubDate>Wed, 22 May 2024 22:15:28 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/go/memo/open-compare-to-openfile/</guid>
            <description>os.Open 与 os.OpenFile 1 差异 在 Go 语言中，os.Open 和 os.OpenFile 都是用于打开文件的函数，但它们的使用场景和功能有所不同。
os.Open：这是一个较为简单的打开文件的函数，它只接受一个参数，即要打开的文件的路径。它以只读模式打开文件，如果文件不存在，它会返回一个错误。 file, err := os.Open(&amp;#34;example.txt&amp;#34;) if err != nil { log.Fatal(err) } defer file.Close() os.OpenFile：这是一个更为强大的打开文件的函数，它接受三个参数：文件路径、打开文件的模式和文件权限。它可以以各种模式（如只读、只写、读写、追加、创建等）打开文件，如果文件不存在，它可以创建一个新文件。 file, err := os.OpenFile(&amp;#34;example.txt&amp;#34;, os.O_CREATE|os.O_WRONLY, 0644) if err != nil { log.Fatal(err) } defer file.Close() 在这个例子中，os.OpenFile 以写入模式打开文件，如果文件不存在，它会创建一个新文件。文件的权限被设置为 0644，这意味着文件所有者可以读写文件，而其他用户只能读取文件。
总的来说，如果你只需要以只读模式打开文件，可以使用 os.Open。如果你需要更多的控制（如设置文件权限，或以不同的模式打开文件），则应使用 os.OpenFile。
2 模式与权限 当你在 Go 语言中使用 os.OpenFile 函数打开或创建文件时，你需要指定两个参数：模式（flag）和权限（permission）。
模式（flag） 这个参数决定了你如何打开文件。Go 语言提供了一些预定义的常量来设置这个参数：
os.O_RDONLY：以只读模式打开文件。 os.O_WRONLY：以只写模式打开文件。 os.O_RDWR：以读写模式打开文件。 os.O_APPEND：在写入数据时，将数据追加到文件的末尾，而不是覆盖现有的内容。 os.O_CREATE：如果文件不存在，就创建一个新文件。 os.O_TRUNC：如果文件已经存在，就先清空文件的内容，然后再写入数据。 这些常量可以通过逻辑 OR 运算符（|）组合在一起，以设置多个模式。例如，os.O_CREATE|os.O_WRONLY 会以只写模式打开文件，如果文件不存在，就创建一个新文件。
权限（permission） 这个参数决定了文件的权限。它是一个八进制数，通常由三个数字组成。每个数字分别代表文件所有者、文件所属的用户组和其他用户的权限。
第一个数字代表文件所有者的权限。 第二个数字代表文件所属的用户组的权限。 第三个数字代表其他用户的权限。 每个数字都是 0 到 7 的整数，代表以下三种权限的组合：</description>
            <content type="html"><![CDATA[<h1 id="osopen-与-osopenfile">os.Open 与 os.OpenFile</h1>
<h2 id="1-差异">1 差异</h2>
<p>在 Go 语言中，<code>os.Open</code> 和 <code>os.OpenFile</code> 都是用于打开文件的函数，但它们的使用场景和功能有所不同。</p>
<ol>
<li><code>os.Open</code>：这是一个较为简单的打开文件的函数，它只接受一个参数，即要打开的文件的路径。它以只读模式打开文件，如果文件不存在，它会返回一个错误。</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">file</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#e6db74">&#34;example.txt&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">file</span>.<span style="color:#a6e22e">Close</span>()
</span></span></code></pre></div><ol start="2">
<li><code>os.OpenFile</code>：这是一个更为强大的打开文件的函数，它接受三个参数：文件路径、打开文件的模式和文件权限。它可以以各种模式（如只读、只写、读写、追加、创建等）打开文件，如果文件不存在，它可以创建一个新文件。</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">file</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">OpenFile</span>(<span style="color:#e6db74">&#34;example.txt&#34;</span>, <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">O_CREATE</span>|<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">O_WRONLY</span>, <span style="color:#ae81ff">0644</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">file</span>.<span style="color:#a6e22e">Close</span>()
</span></span></code></pre></div><p>在这个例子中，<code>os.OpenFile</code> 以写入模式打开文件，如果文件不存在，它会创建一个新文件。文件的权限被设置为 0644，这意味着文件所有者可以读写文件，而其他用户只能读取文件。</p>
<p>总的来说，如果你只需要以只读模式打开文件，可以使用 <code>os.Open</code>。如果你需要更多的控制（如设置文件权限，或以不同的模式打开文件），则应使用 <code>os.OpenFile</code>。</p>
<h2 id="2-模式与权限">2 模式与权限</h2>
<p>当你在 Go 语言中使用 <code>os.OpenFile</code> 函数打开或创建文件时，你需要指定两个参数：模式（flag）和权限（permission）。</p>
<h3 id="模式flag">模式（flag）</h3>
<p>这个参数决定了你如何打开文件。Go 语言提供了一些预定义的常量来设置这个参数：</p>
<ul>
<li><code>os.O_RDONLY</code>：以只读模式打开文件。</li>
<li><code>os.O_WRONLY</code>：以只写模式打开文件。</li>
<li><code>os.O_RDWR</code>：以读写模式打开文件。</li>
<li><code>os.O_APPEND</code>：在写入数据时，将数据追加到文件的末尾，而不是覆盖现有的内容。</li>
<li><code>os.O_CREATE</code>：如果文件不存在，就创建一个新文件。</li>
<li><code>os.O_TRUNC</code>：如果文件已经存在，就先清空文件的内容，然后再写入数据。</li>
</ul>
<p>这些常量可以通过逻辑 OR 运算符（<code>|</code>）组合在一起，以设置多个模式。例如，<code>os.O_CREATE|os.O_WRONLY</code> 会以只写模式打开文件，如果文件不存在，就创建一个新文件。</p>
<h3 id="权限permission">权限（permission）</h3>
<p>这个参数决定了文件的权限。它是一个八进制数，通常由三个数字组成。每个数字分别代表文件所有者、文件所属的用户组和其他用户的权限。</p>
<ul>
<li>第一个数字代表文件所有者的权限。</li>
<li>第二个数字代表文件所属的用户组的权限。</li>
<li>第三个数字代表其他用户的权限。</li>
</ul>
<p>每个数字都是 0 到 7 的整数，代表以下三种权限的组合：</p>
<ul>
<li>4：读取权限</li>
<li>2：写入权限</li>
<li>1：执行权限</li>
</ul>
<p>例如:</p>
<ul>
<li>权限 0644 表示文件所有者有读写权限（6 = 4 + 2），文件所属的用户组和其他用户只有读取权限（4）。</li>
<li>权限 0777 表示所有用户都有读取、写入和执行权限。</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>File Encryption</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/go/encryption/file-encryption/</link>
            <pubDate>Wed, 22 May 2024 17:42:47 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/go/encryption/file-encryption/</guid>
            <description>文件加密 code: https://github.com/Greenery-S/go-encryption/tree/master/enc_file
1 对称加密 加密过程的每一步都是可逆的 加密和解密用的是同一组密钥 异或是最简单的对称加密算法 典型对称加密算法：DES（Data Encryption Standard）AES(Advanced Encryption Standard)
2 分组加密 分组加密：对原始数据（明文）进行分组，每组64位，最后一组不足64位时按一定规则填充。每一组上单独施加DES算法 CBC（Cipher Block Chaining）密文分组链接模式，将当前明文分组与前一个密文分组进行异或运算，然后再进行加密 代码见code链接.
数字填充 PKCS#5 和 PKCS#7 是两种常见的数据填充标准，它们都属于 PKCS (Public-Key Cryptography Standards) 系列标准的一部分。
PKCS#5：主要用于描述密码学中的分组密码的填充方式。在实际应用中，当数据块的大小不是密码算法所需要的固定长度时，就需要进行填充。PKCS#5 填充方式是在数据块末尾填充一个字节序列，每个字节的值等于缺少的字节的数量。例如，如果数据块长度为 6，而密码算法需要的长度为 8，则需要在数据块末尾填充两个字节，每个字节的值为 2。 PKCS#7：是 PKCS#5 的扩展，它支持任何长度的数据块，而不仅仅是 8 字节。PKCS#7 的填充方式与 PKCS#5 相同，都是在数据块末尾填充一个字节序列，每个字节的值等于缺少的字节的数量。 // pkcs7padding和pkcs5padding的填充方式相同，填充字节的值都等于填充字节的个数。 // 例如需要填充4个字节，则填充的值为&amp;#34;4 4 4 4&amp;#34;。 var ( // only difference is the block size, PKCS5 is 8 bytes, PKCS7 can be any bytes PKCS5 = &amp;amp;pkcs5{} PKCS7 = &amp;amp;pkcs5{} ErrPaddingSize = errors.</description>
            <content type="html"><![CDATA[<h1 id="文件加密">文件加密</h1>
<blockquote>
<p>code: <a href="https://github.com/Greenery-S/go-encryption/tree/master/enc_file">https://github.com/Greenery-S/go-encryption/tree/master/enc_file</a></p>
</blockquote>
<h2 id="1-对称加密">1 对称加密</h2>

    <img src="/images/file-encryption-symmetric.png"  alt="symmetric-encryption"  class="center"  style="border-radius: 0px; width: 50%;"  />


<ul>
<li>加密过程的每一步都是<strong>可逆的</strong></li>
<li>加密和解密用的是<strong>同一组密钥</strong></li>
<li>异或是最简单的对称加密算法

    <img src="/images/file-encryption-xor.png"  alt="symmetric-encryption"  class="center"  style="border-radius: 0px; width: 80%;"  />

</li>
</ul>
<p>典型对称加密算法：DES（Data Encryption Standard）AES(Advanced Encryption Standard)</p>
<h2 id="2-分组加密">2 分组加密</h2>
<ul>
<li>分组加密：对原始数据（明文）进行分组，每组64位，最后一组不足64位时按一定规则填充。每一组上单独施加DES算法</li>
<li>CBC（Cipher Block Chaining）密文分组链接模式，将当前明文分组与前一个密文分组进行异或运算，然后再进行加密</li>
</ul>

    <img src="/images/file-encryption-cbc.png"  alt="symmetric-encryption"  class="center"  style="border-radius: 0px; width: 100%;"  />


<p>代码见code链接.</p>
<h3 id="数字填充">数字填充</h3>
<p>PKCS#5 和 PKCS#7 是两种常见的数据填充标准，它们都属于 PKCS (Public-Key Cryptography Standards) 系列标准的一部分。</p>
<ul>
<li>PKCS#5：主要用于描述密码学中的分组密码的填充方式。在实际应用中，当数据块的大小不是密码算法所需要的固定长度时，就需要进行填充。PKCS#5 填充方式是在数据块末尾填充一个字节序列，<strong>每个字节的值等于缺少的字节的数量</strong>。例如，如果数据块长度为 6，而<strong>密码算法需要的长度为 8</strong>，则需要在数据块末尾填充两个字节，每个字节的值为 2。</li>
<li>PKCS#7：是 PKCS#5 的扩展，它支持任何长度的数据块，而不仅仅是 8 字节。PKCS#7 的<strong>填充方式与 PKCS#5 相同</strong>，都是在数据块末尾填充一个字节序列，每个字节的值等于缺少的字节的数量。</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// pkcs7padding和pkcs5padding的填充方式相同，填充字节的值都等于填充字节的个数。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 例如需要填充4个字节，则填充的值为&#34;4 4 4 4&#34;。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> (
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// only difference is the block size, PKCS5 is 8 bytes, PKCS7 can be any bytes
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">PKCS5</span>          = <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">pkcs5</span>{}
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">PKCS7</span>          = <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">pkcs5</span>{}
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ErrPaddingSize</span> = <span style="color:#a6e22e">errors</span>.<span style="color:#a6e22e">New</span>(<span style="color:#e6db74">&#34;padding size error&#34;</span>)
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// pkcs5Padding is a pkcs5 padding struct.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">pkcs5</span> <span style="color:#66d9ef">struct</span>{}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Padding implements the Padding interface Padding method.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">p</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">pkcs5</span>) <span style="color:#a6e22e">Padding</span>(<span style="color:#a6e22e">src</span> []<span style="color:#66d9ef">byte</span>, <span style="color:#a6e22e">blockSize</span> <span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">byte</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">srcLen</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">src</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">//注意： 当srcLen是blockSize的整倍数时，padLen等于blockSize而非0
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">padLen</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">blockSize</span> <span style="color:#f92672">-</span> (<span style="color:#a6e22e">srcLen</span> <span style="color:#f92672">%</span> <span style="color:#a6e22e">blockSize</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">padText</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">bytes</span>.<span style="color:#a6e22e">Repeat</span>([]<span style="color:#66d9ef">byte</span>{byte(<span style="color:#a6e22e">padLen</span>)}, <span style="color:#a6e22e">padLen</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> append(<span style="color:#a6e22e">src</span>, <span style="color:#a6e22e">padText</span><span style="color:#f92672">...</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Unpadding implements the Padding interface Unpadding method.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">p</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">pkcs5</span>) <span style="color:#a6e22e">Unpadding</span>(<span style="color:#a6e22e">src</span> []<span style="color:#66d9ef">byte</span>, <span style="color:#a6e22e">blockSize</span> <span style="color:#66d9ef">int</span>) ([]<span style="color:#66d9ef">byte</span>, <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">srcLen</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">src</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">paddingLen</span> <span style="color:#f92672">:=</span> int(<span style="color:#a6e22e">src</span>[<span style="color:#a6e22e">srcLen</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>])
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">paddingLen</span> <span style="color:#f92672">&gt;=</span> <span style="color:#a6e22e">srcLen</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">paddingLen</span> &gt; <span style="color:#a6e22e">blockSize</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">ErrPaddingSize</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">src</span>[:<span style="color:#a6e22e">srcLen</span><span style="color:#f92672">-</span><span style="color:#a6e22e">paddingLen</span>], <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">o</span> <span style="color:#f92672">:=</span> []byte(<span style="color:#e6db74">&#34;hello world!&#34;</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">p</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">PKCS5</span>.<span style="color:#a6e22e">Padding</span>(<span style="color:#a6e22e">o</span>, <span style="color:#ae81ff">8</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">u</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">PKCS5</span>.<span style="color:#a6e22e">Unpadding</span>(<span style="color:#a6e22e">p</span>, <span style="color:#ae81ff">8</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">p</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// [104 101 108 108 111 32 119 111 114 108 100 33 4 4 4 4]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">u</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// [104 101 108 108 111 32 119 111 114 108 100 33]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><h2 id="3-非对称加密">3 非对称加密</h2>

    <img src="/images/file-encryption-asymmetric.png"  alt="asymmetric-encryption"  class="center"  style="border-radius: 0px; width: 50%;"  />


<ul>
<li>使用公钥加密，使用私钥解密</li>
<li>公钥和私钥不同
<ul>
<li>公钥可以公布给所有人</li>
<li><strong>私钥只有自己保存</strong></li>
</ul>
</li>
<li><strong>公钥是从私钥中派生出来的</strong></li>
<li>相比于对称加密，<strong>运算速度非常慢</strong></li>
<li>区块链技术就是运用了非对称加密技术

    <img src="/images/file-encryption-blockchain.png"  alt="asymmetric-encryption"  class="center"  style="border-radius: 0px; width: 80%;"  />

</li>
</ul>
<p>典型韭对称加密算法：RSA（Ron Rivest, Adi Shamir, Leonard Adleman），ECC（Elliptic Curve Cryptography）椭圆曲线加密算法</p>
<p>在下一讲&quot;数字签名&quot;中，我们将会讲到非对称加密的go代码.</p>
]]></content>
        </item>
        
        <item>
            <title>Introduction to Clickhouse</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/go/database/introduction-to-clickhouse/</link>
            <pubDate>Wed, 22 May 2024 15:08:40 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/go/database/introduction-to-clickhouse/</guid>
            <description>ClickHouse code: https://github.com/Greenery-S/go-database/tree/master/clickhouse
1 简介 ClickHouse是一个用于联机分析（OLAP）的列式数据库管理系统（DBMS）。
在传统的行式数据库系统（MySQL、SQL Server）中，处于同一行中的数据总是被物理的存储在一起。在列式数据库系统（ClickHouse、HBase、Druid）中，来自同一列的数据被存储在一起。
OLAP场景的关键特征 (基于埋点数据进行业务的统计分析):
绝大多数是读请求，已添加到数据库的数据不能修改 宽表，即每个表包含着大量的列 对于读取，从数据库中提取相当多的行，但只提取列的一小部分 查询相对较少（通常每台服务器每秒查询数百次或更少） 对于简单查询，允许延迟大约50毫秒 列中的数据相对较小：数字和短字符串（例如，每个URL 60个字节） 处理单个查询时需要高吞吐量（每台服务器每秒可达数十亿行） 事务不是必须的 2 使用方法 它的SQL语法和MySQL类似，但是有一些不同之处。
创建数据库,表：
create database test; -- json type is experimental feature set allow_experimental_object_type = 1; CREATE TABLE test.user ( user_id UInt32 comment &amp;#39;用户ID&amp;#39;, -- 用户ID name String comment &amp;#39;用户姓名&amp;#39;, -- 用户名 create_time DateTime comment &amp;#39;注册时间&amp;#39;, -- 注册时间 extra Json comment &amp;#39;附加信息&amp;#39; -- 附加信息,json可自由扩充字段 ) ENGINE = MergeTree() PRIMARY KEY (create_time); 查询数据:</description>
            <content type="html"><![CDATA[<h1 id="clickhouse">ClickHouse</h1>
<blockquote>
<p>code: <a href="https://github.com/Greenery-S/go-database/tree/master/clickhouse">https://github.com/Greenery-S/go-database/tree/master/clickhouse</a></p>
</blockquote>
<h2 id="1-简介">1 简介</h2>
<p>ClickHouse是一个用于联机分析（OLAP）的列式数据库管理系统（DBMS）。</p>
<p>在传统的行式数据库系统（MySQL、SQL Server）中，处于同一行中的数据总是被物理的存储在一起。在列式数据库系统（ClickHouse、HBase、Druid）中，来自同一列的数据被存储在一起。</p>
<p>OLAP场景的关键特征 (基于埋点数据进行业务的统计分析):</p>
<ol>
<li>绝大多数是读请求，已添加到数据库的数据不能修改</li>
<li>宽表，即每个表包含着大量的列</li>
<li>对于读取，从数据库中提取相当多的行，但只提取列的一小部分</li>
<li>查询相对较少（通常每台服务器每秒查询数百次或更少）</li>
<li>对于简单查询，允许延迟大约50毫秒</li>
<li>列中的数据相对较小：数字和短字符串（例如，每个URL 60个字节）</li>
<li>处理单个查询时需要高吞吐量（每台服务器每秒可达数十亿行）</li>
<li>事务不是必须的</li>
</ol>
<h2 id="2-使用方法">2 使用方法</h2>
<p>它的SQL语法和MySQL类似，但是有一些不同之处。</p>
<p>创建数据库,表：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">database</span> test;
</span></span><span style="display:flex;"><span>       
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- json type is experimental feature
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">set</span> allow_experimental_object_type <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>; 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> test.<span style="color:#66d9ef">user</span>
</span></span><span style="display:flex;"><span>(
</span></span><span style="display:flex;"><span>    user_id     UInt32 <span style="color:#66d9ef">comment</span> <span style="color:#e6db74">&#39;用户ID&#39;</span>,     <span style="color:#75715e">-- 用户ID
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    name        String <span style="color:#66d9ef">comment</span> <span style="color:#e6db74">&#39;用户姓名&#39;</span>,   <span style="color:#75715e">-- 用户名
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    create_time DateTime <span style="color:#66d9ef">comment</span> <span style="color:#e6db74">&#39;注册时间&#39;</span>, <span style="color:#75715e">-- 注册时间
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    extra       Json <span style="color:#66d9ef">comment</span> <span style="color:#e6db74">&#39;附加信息&#39;</span>      <span style="color:#75715e">-- 附加信息,json可自由扩充字段
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>) ENGINE <span style="color:#f92672">=</span> MergeTree()
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">PRIMARY</span> <span style="color:#66d9ef">KEY</span> (create_time);
</span></span></code></pre></div><p>查询数据:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">WITH</span>
</span></span><span style="display:flex;"><span>    toDateTime(<span style="color:#e6db74">&#39;2023-09-01&#39;</span>, <span style="color:#e6db74">&#39;UTC&#39;</span>) <span style="color:#66d9ef">AS</span> begin_day,
</span></span><span style="display:flex;"><span>    toDateTime(<span style="color:#e6db74">&#39;2023-09-08&#39;</span>, <span style="color:#e6db74">&#39;UTC&#39;</span>) <span style="color:#66d9ef">AS</span> end_day
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">SELECT</span> toDate(create_time) <span style="color:#66d9ef">AS</span> date,
</span></span><span style="display:flex;"><span>       uniq(user_id)       <span style="color:#66d9ef">AS</span> <span style="color:#f92672">`</span><span style="color:#960050;background-color:#1e0010">注册用户数</span><span style="color:#f92672">`</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">FROM</span> test.<span style="color:#66d9ef">user</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">WHERE</span> (create_time <span style="color:#f92672">&gt;=</span> begin_day)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">AND</span> (create_time <span style="color:#f92672">&lt;</span> end_day)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">GROUP</span> <span style="color:#66d9ef">BY</span> date
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">ORDER</span> <span style="color:#66d9ef">BY</span> date;
</span></span></code></pre></div><h2 id="3-go-sdk">3 Go sdk</h2>
<p>见code.</p>
<h2 id="4-制作dashboard">4 制作dashboard</h2>
<p>基于Clickhouse+grafana生成业务报表.</p>

    <img src="/images/introduction-to-clickhouse-dashboard.png"  alt="dashboard"  class="center"  style="border-radius: 0px; width: 100%;"  />


]]></content>
        </item>
        
        <item>
            <title>Introduction to Mongo</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/go/database/introduction-to-mongo/</link>
            <pubDate>Wed, 22 May 2024 01:23:35 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/go/database/introduction-to-mongo/</guid>
            <description>MongoDB code: https://github.com/Greenery-S/go-database/tree/master/mongo
1 简介 Mongo是一个面向文档存储的数据库，它跟关系型数据库的概念对比如下。 Mongo最大的特点是模式自由，即你可以将结构完全不同的文档存储同一个集合中。特别适合于业务初期，表字段不稳定的时候。 相比于MySQL，Mongo更适合存储大尺寸、低价值的数据，大文档的读写性能比MySQL好。 2 语法 use test; 切换到test库，如果没有则（创建集合时）会自动创建 show collections 查看库里有哪些集合 db.createCollection(&amp;#34;student&amp;#34;); 创建collection db.createUser({user: &amp;#34;tester&amp;#34;,pwd: &amp;#34;123456&amp;#34;, roles: [{role: &amp;#34;dbAdmin&amp;#34;, db: &amp;#34;test&amp;#34;}]});创建用户 用刚创建的tester用户身份登录： mongo --port 27017 -u &amp;#34;tester&amp;#34; -p &amp;#34;123456&amp;#34; --authenticationDatabase &amp;#34;test&amp;#34; db.student.createIndex({name:1,unique:1})在name上创建唯一索引,1表示升序，-1表示降序 db.student.dropIndex(&amp;#34; name_1_unique_1 &amp;#34;) 删除索引 db.student.getIndexes() 查看索引 db.student.insertOne({name:&amp;#34;张三&amp;#34;,city:&amp;#34;北京&amp;#34;}); 插入一条记录 db.student.insertMany([{name:&amp;#34;张三&amp;#34;,city:&amp;#34;北京&amp;#34;},{name:&amp;#34;李四&amp;#34;,gender:&amp;#34;女&amp;#34;}]) 插入多条记录 db.student.find({name:&amp;#34;张三&amp;#34;}); 查找满足条件的记录 db.student.find({}); 查看集合里的全部内容 db.student.updateOne({name:&amp;#34;张三&amp;#34;},{$set:{gender:&amp;#34;女&amp;#34;}}) 更新一条记录 db.student.updateMany({name:&amp;#34;张三&amp;#34;},{$set:{gender:&amp;#34;女&amp;#34;}}) 更新满足条件的所有记录 db.student.deleteOne({name:&amp;#34;张三&amp;#34;}); db.student.deleteMany({name:&amp;#34;张三&amp;#34;}); 删除记录 db.student.drop() 删除集合 3 Go操作Mongo 连接 func main() { ctx := context.Background() option := options.</description>
            <content type="html"><![CDATA[<h1 id="mongodb">MongoDB</h1>
<blockquote>
<p>code: <a href="https://github.com/Greenery-S/go-database/tree/master/mongo">https://github.com/Greenery-S/go-database/tree/master/mongo</a></p>
</blockquote>
<h2 id="1-简介">1 简介</h2>

    <img src="/images/introduction-to-mongo-compare-to-mysql.png"  alt="compare-to-mysql"  class="center"  style="border-radius: 0px; width: 80%;"  />


<ul>
<li>Mongo是一个面向文档存储的数据库，它跟关系型数据库的概念对比如下。</li>
<li>Mongo最大的特点是模式自由，即你可以将结构完全不同的文档存储同一个集合中。特别适合于业务初期，表字段不稳定的时候。</li>
<li>相比于MySQL，Mongo更适合存储大尺寸、低价值的数据，大文档的读写性能比MySQL好。</li>
</ul>
<h2 id="2-语法">2 语法</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>use test;  切换到test库，如果没有则（创建集合时）会自动创建
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>show collections  查看库里有哪些集合
</span></span><span style="display:flex;"><span>db.createCollection<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;student&#34;</span><span style="color:#f92672">)</span>;  创建collection
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>db.createUser<span style="color:#f92672">({</span>user: <span style="color:#e6db74">&#34;tester&#34;</span>,pwd: <span style="color:#e6db74">&#34;123456&#34;</span>, roles: <span style="color:#f92672">[{</span>role: <span style="color:#e6db74">&#34;dbAdmin&#34;</span>, db: <span style="color:#e6db74">&#34;test&#34;</span><span style="color:#f92672">}]})</span>;创建用户
</span></span><span style="display:flex;"><span>用刚创建的tester用户身份登录：
</span></span><span style="display:flex;"><span>mongo --port <span style="color:#ae81ff">27017</span> -u <span style="color:#e6db74">&#34;tester&#34;</span> -p <span style="color:#e6db74">&#34;123456&#34;</span> --authenticationDatabase <span style="color:#e6db74">&#34;test&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>db.student.createIndex<span style="color:#f92672">({</span>name:1,unique:1<span style="color:#f92672">})</span>在name上创建唯一索引,1表示升序，-1表示降序
</span></span><span style="display:flex;"><span>db.student.dropIndex<span style="color:#f92672">(</span><span style="color:#e6db74">&#34; name_1_unique_1 &#34;</span><span style="color:#f92672">)</span>  删除索引
</span></span><span style="display:flex;"><span>db.student.getIndexes<span style="color:#f92672">()</span>  查看索引
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>db.student.insertOne<span style="color:#f92672">({</span>name:<span style="color:#e6db74">&#34;张三&#34;</span>,city:<span style="color:#e6db74">&#34;北京&#34;</span><span style="color:#f92672">})</span>;    插入一条记录
</span></span><span style="display:flex;"><span>db.student.insertMany<span style="color:#f92672">([{</span>name:<span style="color:#e6db74">&#34;张三&#34;</span>,city:<span style="color:#e6db74">&#34;北京&#34;</span><span style="color:#f92672">}</span>,<span style="color:#f92672">{</span>name:<span style="color:#e6db74">&#34;李四&#34;</span>,gender:<span style="color:#e6db74">&#34;女&#34;</span><span style="color:#f92672">}])</span>      插入多条记录
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>db.student.find<span style="color:#f92672">({</span>name:<span style="color:#e6db74">&#34;张三&#34;</span><span style="color:#f92672">})</span>;     查找满足条件的记录          
</span></span><span style="display:flex;"><span>db.student.find<span style="color:#f92672">({})</span>;    查看集合里的全部内容
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>db.student.updateOne<span style="color:#f92672">({</span>name:<span style="color:#e6db74">&#34;张三&#34;</span><span style="color:#f92672">}</span>,<span style="color:#f92672">{</span>$set:<span style="color:#f92672">{</span>gender:<span style="color:#e6db74">&#34;女&#34;</span><span style="color:#f92672">}})</span>      更新一条记录
</span></span><span style="display:flex;"><span>db.student.updateMany<span style="color:#f92672">({</span>name:<span style="color:#e6db74">&#34;张三&#34;</span><span style="color:#f92672">}</span>,<span style="color:#f92672">{</span>$set:<span style="color:#f92672">{</span>gender:<span style="color:#e6db74">&#34;女&#34;</span><span style="color:#f92672">}})</span>      更新满足条件的所有记录
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>db.student.deleteOne<span style="color:#f92672">({</span>name:<span style="color:#e6db74">&#34;张三&#34;</span><span style="color:#f92672">})</span>;     db.student.deleteMany<span style="color:#f92672">({</span>name:<span style="color:#e6db74">&#34;张三&#34;</span><span style="color:#f92672">})</span>;         删除记录
</span></span><span style="display:flex;"><span>db.student.drop<span style="color:#f92672">()</span>   删除集合
</span></span></code></pre></div><h2 id="3-go操作mongo">3 Go操作Mongo</h2>
<h3 id="连接">连接</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">ctx</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">option</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">options</span>.<span style="color:#a6e22e">Client</span>().<span style="color:#a6e22e">ApplyURI</span>(<span style="color:#e6db74">&#34;mongodb://127.0.0.1:27017&#34;</span>).
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">SetConnectTimeout</span>(<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Second</span>). <span style="color:#75715e">//连接超时时长
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">//AuthSource代表Database
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">SetAuth</span>(<span style="color:#a6e22e">options</span>.<span style="color:#a6e22e">Credential</span>{<span style="color:#a6e22e">Username</span>: <span style="color:#e6db74">&#34;tester&#34;</span>, <span style="color:#a6e22e">Password</span>: <span style="color:#e6db74">&#34;123456&#34;</span>, <span style="color:#a6e22e">AuthSource</span>: <span style="color:#e6db74">&#34;test&#34;</span>})
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">client</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">mongo</span>.<span style="color:#a6e22e">Connect</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">option</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">CheckError</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">Ping</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#66d9ef">nil</span>) <span style="color:#75715e">//Connect没有返回error并不代表连接成功，ping成功才代表连接成功
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">CheckError</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">Disconnect</span>(<span style="color:#a6e22e">ctx</span>) <span style="color:#75715e">//释放链接
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#75715e">// ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><h3 id="curd">CURD</h3>
<p>见code.</p>
]]></content>
        </item>
        
        <item>
            <title>Be Careful When Choosing House</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/life/singapore/be-careful-when-choosing-house/</link>
            <pubDate>Wed, 22 May 2024 00:43:27 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/life/singapore/be-careful-when-choosing-house/</guid>
            <description>来新加坡，选择住处时要慎重 来新加坡，选择住处时要慎重。
什么是穷人的房子？我指的是那些把自住的房子出租其中一间的人。
这些房东通常经济压力较大。一方面，他们买了HDB，却需要通过出租房间来减轻贷款压力；另一方面，他们虽然敞开家门，但可能对租户非常挑剔，容易产生矛盾，最终生活得像学生宿舍一样不和谐。
让我先说说正常的租房流程：看房、交押金、入住、交月租、退房、验房、退押金。只要保证退房时的房间和入住时一样，几乎不应该扣押金。就像计算机中的“最终一致性”：你只要保证最后交房时的状态是OK的，那就没问题。我住过的网红公寓Interlace Place就是这样，房东或中介不会干涉你的正常生活。
然而，住“穷人的房子”会有所不同。房东可能会频繁查看你的房间，怀疑你是否做了什么破坏，有时甚至会侵犯你的隐私。
更令人困扰的是，有时候房东可能会因为各种原因提前向你催租。例如，我住过的一家房东，每个月都会提前15天甚至23天问我要房租，理由诸如“交学费”、“看病”、“举办宴会”等等，每个月都会出现这样的请求，希望你能理解并帮忙。
作为程序员，我注重协议和合约，所以对这些情感上的请求并不动摇，而是尽量拒绝提前支付租金，尽量平衡支持房东和保护自己的利益。
前2个月，我对房东一家非常宽容，他们多次要求提前支付部分租金，我基本都答应了。而且，我几乎每个星期有60%的时间不在房间，出去找朋友玩或者照顾我的妹妹。最终，为了期末复习，我整个月没回来。这个月回来后，我发现他们把提前交租当成了常规操作，完全不尊重我。我当即拒绝了当月的请求，并通过中介表明我的立场，希望他们能够有所收敛。
昨天，离按合同交房租还有10天，房东再次向我要100刀，但语气已经变得非常恳求。我觉得差不多了，就给了他们这一笔钱，他们非常感激。
但我感到疲惫。我不喜欢操纵人心，而且这个房子确实不适合长期租住。我联系了酒店包月的项目，决定整月租酒店。我和房东谈了这件事，知道押金可能无法全额退还，于是主动提出只要50%的押金。然而，他们真的是经济困难，求我多租一个月，把押金当做那个月的租金。我知道自己可能会有些损失，但也只能接受。
新加坡的很多人生活不易，尤其是经济困难的家庭。我们无法改变所有人的境遇，只能选择合适的住处，避免不必要的麻烦。希望每个人都能找到适合自己的生活方式。</description>
            <content type="html"><![CDATA[<h1 id="来新加坡选择住处时要慎重">来新加坡，选择住处时要慎重</h1>
<p>来新加坡，选择住处时要慎重。</p>
<p>什么是穷人的房子？我指的是那些把自住的房子出租其中一间的人。</p>
<p>这些房东通常经济压力较大。一方面，他们买了HDB，却需要通过出租房间来减轻贷款压力；另一方面，他们虽然敞开家门，但可能对租户非常挑剔，容易产生矛盾，最终生活得像学生宿舍一样不和谐。</p>
<p>让我先说说正常的租房流程：看房、交押金、入住、交月租、退房、验房、退押金。只要保证退房时的房间和入住时一样，几乎不应该扣押金。就像计算机中的“最终一致性”：你只要保证最后交房时的状态是OK的，那就没问题。我住过的网红公寓Interlace Place就是这样，房东或中介不会干涉你的正常生活。</p>
<p>然而，住“穷人的房子”会有所不同。房东可能会频繁查看你的房间，怀疑你是否做了什么破坏，有时甚至会侵犯你的隐私。</p>
<p>更令人困扰的是，有时候房东可能会因为各种原因提前向你催租。例如，我住过的一家房东，每个月都会提前15天甚至23天问我要房租，理由诸如“交学费”、“看病”、“举办宴会”等等，每个月都会出现这样的请求，希望你能理解并帮忙。</p>
<p>作为程序员，我注重协议和合约，所以对这些情感上的请求并不动摇，而是尽量拒绝提前支付租金，尽量平衡支持房东和保护自己的利益。</p>
<p>前2个月，我对房东一家非常宽容，他们多次要求提前支付部分租金，我基本都答应了。而且，我几乎每个星期有60%的时间不在房间，出去找朋友玩或者照顾我的妹妹。最终，为了期末复习，我整个月没回来。这个月回来后，我发现他们把提前交租当成了常规操作，完全不尊重我。我当即拒绝了当月的请求，并通过中介表明我的立场，希望他们能够有所收敛。</p>
<p>昨天，离按合同交房租还有10天，房东再次向我要100刀，但语气已经变得非常恳求。我觉得差不多了，就给了他们这一笔钱，他们非常感激。</p>
<p>但我感到疲惫。我不喜欢操纵人心，而且这个房子确实不适合长期租住。我联系了酒店包月的项目，决定整月租酒店。我和房东谈了这件事，知道押金可能无法全额退还，于是主动提出只要50%的押金。然而，他们真的是经济困难，求我多租一个月，把押金当做那个月的租金。我知道自己可能会有些损失，但也只能接受。</p>
<p>新加坡的很多人生活不易，尤其是经济困难的家庭。我们无法改变所有人的境遇，只能选择合适的住处，避免不必要的麻烦。希望每个人都能找到适合自己的生活方式。</p>
]]></content>
        </item>
        
        <item>
            <title>Introduction to Redis</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/go/database/introduction-to-redis/</link>
            <pubDate>Sun, 19 May 2024 22:11:16 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/go/database/introduction-to-redis/</guid>
            <description>Redis code: https://github.com/Greenery-S/go-database/tree/master/redis
1 简介 Redis是一个基于内存的数据存储系统。 基于内存，所以快，是Mysql的10到100倍。 为防止数据丢失，数据会周期性地持久化到磁盘。 Redis跟业务程序是分开部署的，所以Redis可以充当分布式缓存。 支持丰富的数据类型：字符串（String）、哈希（Hash）、列表（List）、集合（Set）和有序集合（Sorted Set）。 支持发布/订阅模式，发布者将消息发送到指定的频道，订阅者可以接收和处理这些消息。这种模式常应用于实时通信、事件驱动系统和消息队列等场景。 Redis事务太鸡肋，不建议使用。 2 发布/订阅模式 Subscriber启动之前，Channel里的消息接收不到。 广播效果. 3 分布式锁 SetNX(ctx context.Context, key string, value interface{}, expiration time.Duration) *BoolCmd SetNX如果key不存在则返回true，写入key，并设置过期时间 秒杀iphone代码示例：
func TryLock(rc *redis.Client, key string, expire time.Duration) bool { cmd := rc.SetNX(context.Background(), key, &amp;#34;anything is ok&amp;#34;, expire) if err := cmd.Err(); err == nil { return cmd.Val() } else { return false } } func ReleaseLock(rc *redis.Client, key string) { rc.</description>
            <content type="html"><![CDATA[<h1 id="redis">Redis</h1>
<blockquote>
<p>code: <a href="https://github.com/Greenery-S/go-database/tree/master/redis">https://github.com/Greenery-S/go-database/tree/master/redis</a></p>
</blockquote>
<h2 id="1-简介">1 简介</h2>
<ul>
<li>Redis是一个基于内存的数据存储系统。</li>
<li>基于内存，所以快，是Mysql的10到100倍。</li>
<li>为防止数据丢失，数据会周期性地持久化到磁盘。</li>
<li>Redis跟业务程序是分开部署的，所以Redis可以充当分布式缓存。</li>
<li>支持丰富的数据类型：字符串（String）、哈希（Hash）、列表（List）、集合（Set）和有序集合（Sorted Set）。</li>
<li>支持发布/订阅模式，发布者将消息发送到指定的频道，订阅者可以接收和处理这些消息。这种模式常应用于实时通信、事件驱动系统和消息队列等场景。</li>
<li>Redis事务太鸡肋，不建议使用。</li>
</ul>
<h2 id="2-发布订阅模式">2 发布/订阅模式</h2>
<ol>
<li>Subscriber启动之前，Channel里的消息接收不到。</li>
<li>广播效果.</li>
</ol>

    <img src="/images/introduction-to-redis-pubsub.png"  alt="pubsub"  class="center"  style="border-radius: 20px; width: 100%;"  />


<h2 id="3-分布式锁">3 分布式锁</h2>
<ol>
<li><code>SetNX(ctx context.Context, key string, value interface{}, expiration time.Duration) *BoolCmd</code></li>
<li>SetNX如果key不存在则返回true，写入key，并设置过期时间</li>
</ol>

    <img src="/images/introduction-to-redis-distributed-key.png"  alt="distributed-key"  class="center"  style="border-radius: 20px; width: 100%;"  />


<p>秒杀iphone代码示例：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">TryLock</span>(<span style="color:#a6e22e">rc</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">redis</span>.<span style="color:#a6e22e">Client</span>, <span style="color:#a6e22e">key</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">expire</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Duration</span>) <span style="color:#66d9ef">bool</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">cmd</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">rc</span>.<span style="color:#a6e22e">SetNX</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#a6e22e">key</span>, <span style="color:#e6db74">&#34;anything is ok&#34;</span>, <span style="color:#a6e22e">expire</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">cmd</span>.<span style="color:#a6e22e">Err</span>(); <span style="color:#a6e22e">err</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">cmd</span>.<span style="color:#a6e22e">Val</span>()
</span></span><span style="display:flex;"><span>	} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">ReleaseLock</span>(<span style="color:#a6e22e">rc</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">redis</span>.<span style="color:#a6e22e">Client</span>, <span style="color:#a6e22e">key</span> <span style="color:#66d9ef">string</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">rc</span>.<span style="color:#a6e22e">Del</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#a6e22e">key</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">LockRace2</span>(<span style="color:#a6e22e">client</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">redis</span>.<span style="color:#a6e22e">Client</span>, <span style="color:#a6e22e">storage</span> <span style="color:#66d9ef">int</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">keyLock</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;lock&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">keyStorage</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;store&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">Set</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#a6e22e">keyStorage</span>, <span style="color:#a6e22e">storage</span>, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">ReleaseLock</span>(<span style="color:#a6e22e">client</span>, <span style="color:#a6e22e">keyLock</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">Del</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#a6e22e">keyStorage</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">P</span> = <span style="color:#ae81ff">1000</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">wg</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">sync</span>.<span style="color:#a6e22e">WaitGroup</span>{}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#a6e22e">P</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">start</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">P</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">i</span> <span style="color:#66d9ef">int</span>) {
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Done</span>()
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Sleep</span>(<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Duration</span>(<span style="color:#a6e22e">rand</span>.<span style="color:#a6e22e">Intn</span>(<span style="color:#ae81ff">100</span>)) <span style="color:#f92672">*</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Millisecond</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">TryLock</span>(<span style="color:#a6e22e">client</span>, <span style="color:#a6e22e">keyLock</span>, <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">v</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">IncrBy</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#a6e22e">keyStorage</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>).<span style="color:#a6e22e">Val</span>(); <span style="color:#a6e22e">v</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span> {
</span></span><span style="display:flex;"><span>					<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;%d gets the No.%d iPhone! Use %v!\n&#34;</span>, <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">v</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>().<span style="color:#a6e22e">Sub</span>(<span style="color:#a6e22e">start</span>))
</span></span><span style="display:flex;"><span>				}
</span></span><span style="display:flex;"><span>				<span style="color:#a6e22e">ReleaseLock</span>(<span style="color:#a6e22e">client</span>, <span style="color:#a6e22e">keyLock</span>)
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>		}(<span style="color:#a6e22e">i</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Wait</span>()
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="4-内存淘汰机制">4 内存淘汰机制</h2>
<ol>
<li>LRU（Least Recently Used），基于链表结构，链表中的元素按照操作顺序从前往后排列，最新操作的键会被移动到表头，当需要内存淘汰时，只需要删除链表尾部的元素即可</li>
<li>LFU（Least Frequently Used），其基本假设是如果数据过去被访问多次，那么将来被访问的频率也更高，所以淘汰那些过去使用频率最低的key。Redis使用了一个复杂但高效的方法近似地实现了LFU</li>
<li>LFU比LRU更合理一些，但实现起来更复杂</li>
</ol>

    <img src="/images/introduction-to-redis-memory.png"  alt="memory"  class="center"  style="border-radius: 20px; width: 100%;"  />


<h2 id="5-常见应用场景">5 常见应用场景</h2>
<ul>
<li>总体原则：Redis比Mysql快一个数量级，可靠性不如Mysql，所以对于那些需要高频读写、生命周期短、对用户不是特别重要的数据适合存到Redis里</li>
<li>计数器。<code>Incr(ctx context.Context, key string)</code>对应的key计数加1，比如视频播放量，秒杀场景商品库存。<code>INCRBY</code>加任意值，可以为负数</li>
<li>缓存。对于经常访问的MySQL数据可以放到Redis里，key对应id，<strong>value是Json字符串。减轻mysql压力，提高接口响应速度</strong></li>
<li>会话缓存。SessionID用于标记用户登录成功，登录和后续操作可能命中不同的服务器，所以SessionID需要保存在分布式缓存中。搜索/推荐结果列表存入缓存，翻页时从缓存读取</li>
<li>分布式锁。在分布式系统中，定时任务只需要由一台服务器去执行，谁抢到锁谁执行，在下一个周期到来之前释放锁</li>
<li>发布/订阅功能。少量的事件通知可以用Redis实现，大量的消息传递更适合用kafka</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Orm Realized by Reflect</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/go/database/orm-realized-by-reflect/</link>
            <pubDate>Sun, 19 May 2024 21:50:59 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/go/database/orm-realized-by-reflect/</guid>
            <description>ORM核心技术—反射 教程,反射大全: https://zhuanlan.zhihu.com/p/411313885
code: https://github.com/Greenery-S/go-database/tree/master/orm
1 反射 什么是反射
在运行期间（不是编译期间）探知对象的类型信息和内存结构、更新变量、调用它们的方法 何时使用反射
函数的参数类型是interface{}，需要在运行时对原始类型进行判断，针对不同的类型采取不同的处理方式。比如json.Marshal(v interface{})
在运行时根据某些条件动态决定调用哪个函数，比如根据配置文件执行相应的算子函数
建议在初始化环节使用, 频繁调用的api不建议使用
2 使用例子 3 反射的弊端 代码难以阅读，难以维护 编译期间不能发现类型错误，覆盖测试难度很大，有些bug需要到线上运行很长时间才能发现，可能会造成严重用后果 反射性能很差，通常比正常代码慢一到两个数量级。在对性能要求很高，或大量反复调用的代码块里建议不要使用反射 4 反射的基础数据类型 reflact.Type – 通过reflect.Type获取类型相关的信息
type Type interface { MethodByName(string) (Method, bool) //根据名称获取方法 Name() string //获取结构体名称 PkgPath() string //包路径 Size() uintptr //占用内存的大小 Kind() Kind //数据类型 Implements(u Type) bool //判断是否实现了某接口 Field(i int) StructField //第i个成员 FieldByIndex(index []int) StructField //根据index路径获取嵌套成员 FieldByName(name string) (StructField, bool) //根据名称获取成员 Len() int //容器的长度 NumIn() int //输出参数的个数 NumOut() int //返回参数的个数 } reflect.</description>
            <content type="html"><![CDATA[<h1 id="orm核心技术反射">ORM核心技术—反射</h1>
<blockquote>
<p>教程,反射大全: <a href="https://zhuanlan.zhihu.com/p/411313885">https://zhuanlan.zhihu.com/p/411313885</a></p>
<p>code: <a href="https://github.com/Greenery-S/go-database/tree/master/orm">https://github.com/Greenery-S/go-database/tree/master/orm</a></p>
</blockquote>
<h2 id="1-反射">1 反射</h2>
<p><strong>什么是反射</strong></p>
<ul>
<li>在<strong>运行期间</strong>（不是编译期间）探知对象的类型信息和内存结构、更新变量、调用它们的方法</li>
</ul>
<p><strong>何时使用反射</strong></p>
<ul>
<li>
<p>函数的参数类型是interface{}，需要在运行时对原始类型进行判断，针对不同的类型采取不同的处理方式。比如json.Marshal(v interface{})</p>
</li>
<li>
<p>在运行时根据某些条件动态决定调用哪个函数，比如根据配置文件执行相应的算子函数</p>
</li>
<li>
<p>建议在初始化环节使用, 频繁调用的api不建议使用</p>
</li>
</ul>
<h2 id="2-使用例子">2 使用例子</h2>

    <img src="/images/orm-realized-by-reflect-example.png"  alt="show-table"  class="center"  style="border-radius: 10px; width: 80%;"  />


<h2 id="3-反射的弊端">3 反射的弊端</h2>
<ol>
<li>代码难以阅读，难以维护</li>
<li>编译期间不能发现类型错误，覆盖测试难度很大，有些bug需要到线上运行很长时间才能发现，可能会造成严重用后果</li>
<li>反射性能很差，通常比正常代码慢一到两个数量级。在对性能要求很高，或大量反复调用的代码块里建议不要使用反射</li>
</ol>
<h2 id="4-反射的基础数据类型">4 反射的基础数据类型</h2>

    <img src="/images/orm-realized-by-reflect-data-type.png"  alt="show-table"  class="center"  style="border-radius: 10px; width: 80%;"  />


<p><strong>reflact.Type</strong> – 通过reflect.Type获取类型相关的信息</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Type</span> <span style="color:#66d9ef">interface</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">MethodByName</span>(<span style="color:#66d9ef">string</span>) (<span style="color:#a6e22e">Method</span>, <span style="color:#66d9ef">bool</span>) <span style="color:#75715e">//根据名称获取方法
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">Name</span>() <span style="color:#66d9ef">string</span>   <span style="color:#75715e">//获取结构体名称
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">PkgPath</span>() <span style="color:#66d9ef">string</span> <span style="color:#75715e">//包路径
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">Size</span>() <span style="color:#66d9ef">uintptr</span>  <span style="color:#75715e">//占用内存的大小
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">Kind</span>() <span style="color:#a6e22e">Kind</span>  <span style="color:#75715e">//数据类型
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">Implements</span>(<span style="color:#a6e22e">u</span> <span style="color:#a6e22e">Type</span>) <span style="color:#66d9ef">bool</span>  <span style="color:#75715e">//判断是否实现了某接口
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">Field</span>(<span style="color:#a6e22e">i</span> <span style="color:#66d9ef">int</span>) <span style="color:#a6e22e">StructField</span>  <span style="color:#75715e">//第i个成员
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">FieldByIndex</span>(<span style="color:#a6e22e">index</span> []<span style="color:#66d9ef">int</span>) <span style="color:#a6e22e">StructField</span>  <span style="color:#75715e">//根据index路径获取嵌套成员
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">FieldByName</span>(<span style="color:#a6e22e">name</span> <span style="color:#66d9ef">string</span>) (<span style="color:#a6e22e">StructField</span>, <span style="color:#66d9ef">bool</span>)  <span style="color:#75715e">//根据名称获取成员
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">Len</span>() <span style="color:#66d9ef">int</span>  <span style="color:#75715e">//容器的长度
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">NumIn</span>() <span style="color:#66d9ef">int</span>  <span style="color:#75715e">//输出参数的个数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">NumOut</span>() <span style="color:#66d9ef">int</span>  <span style="color:#75715e">//返回参数的个数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p><strong>reflect.Value</strong> – 通过reflect.Value获取、修改原始数据类型里的值</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Value</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 代表的数据类型
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">typ</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">rtype</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 指向原始数据的指针
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">ptr</span> <span style="color:#a6e22e">unsafe</span>.<span style="color:#a6e22e">Pointer</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="5-获取field信息">5 获取Field信息</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">typeUser</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">reflect</span>.<span style="color:#a6e22e">TypeOf</span>(<span style="color:#a6e22e">User</span>{})
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">typeUser</span>.<span style="color:#a6e22e">NumField</span>() ; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {<span style="color:#75715e">//成员变量的个数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">field</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">typeUser</span>.<span style="color:#a6e22e">Field</span>(<span style="color:#a6e22e">i</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;%s offset %d anonymous %t type %s exported %t json tag %s\n&#34;</span>, 
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">field</span>.<span style="color:#a6e22e">Name</span>, <span style="color:#75715e">//变量名称
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">field</span>.<span style="color:#a6e22e">Offset</span>, <span style="color:#75715e">//相对于结构体首地址的内存偏移量，string类型会占据16个字节
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">field</span>.<span style="color:#a6e22e">Anonymous</span>, <span style="color:#75715e">//是否为匿名成员
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">field</span>.<span style="color:#a6e22e">Type</span>, <span style="color:#75715e">//数据类型，reflect.Type类型
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">field</span>.<span style="color:#a6e22e">IsExported</span>(), <span style="color:#75715e">//包外是否可见（即是否以大写字母开头）
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">field</span>.<span style="color:#a6e22e">Tag</span>.<span style="color:#a6e22e">Get</span>(<span style="color:#e6db74">&#34;json&#34;</span>)) <span style="color:#75715e">//获取成员变量后面``里面定义的tag
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><h2 id="6-orm实现原理">6 ORM实现原理</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">User</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Id</span>         <span style="color:#66d9ef">int</span>    <span style="color:#e6db74">`gorm:&#34;column:id;primaryKey&#34;`</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Gender</span>     <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`gorm:&#34;column:sex&#34;`</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Name</span>       <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`gorm:&#34;-&#34;`</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">FamilyName</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><ol>
<li>带<code>gorm:&quot;-&quot;</code>的Field忽略掉</li>
<li>通过field.Tag.Get(&ldquo;gorm&rdquo;) 获得gorm后面的内容</li>
<li>把前缀&quot; column:&ldquo;去掉</li>
<li>用;分隔，取第一部分</li>
<li>没有显式写gorm Tag的Field将转为蛇形即对应mysql表里的column</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">GetGormFields</span>(<span style="color:#a6e22e">stc</span> <span style="color:#66d9ef">interface</span>{}) []<span style="color:#66d9ef">string</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">value</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">reflect</span>.<span style="color:#a6e22e">ValueOf</span>(<span style="color:#a6e22e">stc</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">typ</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">value</span>.<span style="color:#a6e22e">Type</span>()
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">columns</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">string</span>, <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">value</span>.<span style="color:#a6e22e">NumField</span>())
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">value</span>.<span style="color:#a6e22e">NumField</span>(); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">fieldType</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">typ</span>.<span style="color:#a6e22e">Field</span>(<span style="color:#a6e22e">i</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">//不做ORM映射的字段跳过
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">fieldType</span>.<span style="color:#a6e22e">Tag</span>.<span style="color:#a6e22e">Get</span>(<span style="color:#e6db74">&#34;gorm&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;-&#34;</span> {
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">//如果没有gorm Tag，则把驼峰转为蛇形
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                <span style="color:#a6e22e">name</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">util</span>.<span style="color:#a6e22e">Camel2Snake</span>(<span style="color:#a6e22e">fieldType</span>.<span style="color:#a6e22e">Name</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">fieldType</span>.<span style="color:#a6e22e">Tag</span>.<span style="color:#a6e22e">Get</span>(<span style="color:#e6db74">&#34;gorm&#34;</span>)) &gt; <span style="color:#ae81ff">0</span> {
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">content</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">fieldType</span>.<span style="color:#a6e22e">Tag</span>.<span style="color:#a6e22e">Get</span>(<span style="color:#e6db74">&#34;gorm&#34;</span>)
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">HasPrefix</span>(<span style="color:#a6e22e">content</span>, <span style="color:#e6db74">&#34;column:&#34;</span>) {
</span></span><span style="display:flex;"><span>                                <span style="color:#a6e22e">content</span> = <span style="color:#a6e22e">content</span>[<span style="color:#ae81ff">7</span>:]
</span></span><span style="display:flex;"><span>                                <span style="color:#a6e22e">pos</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Index</span>(<span style="color:#a6e22e">content</span>, <span style="color:#e6db74">&#34;;&#34;</span>)
</span></span><span style="display:flex;"><span>                                <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">pos</span> &gt; <span style="color:#ae81ff">0</span> {
</span></span><span style="display:flex;"><span>                                        <span style="color:#a6e22e">name</span> = <span style="color:#a6e22e">content</span>[<span style="color:#ae81ff">0</span>:<span style="color:#a6e22e">pos</span>]
</span></span><span style="display:flex;"><span>                                } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">pos</span> &lt; <span style="color:#ae81ff">0</span> {
</span></span><span style="display:flex;"><span>                                        <span style="color:#a6e22e">name</span> = <span style="color:#a6e22e">content</span>
</span></span><span style="display:flex;"><span>                                }
</span></span><span style="display:flex;"><span>                        }
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">columns</span> = append(<span style="color:#a6e22e">columns</span>, <span style="color:#a6e22e">name</span>)
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">columns</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Mysql Optimization</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/go/database/mysql-optimization/</link>
            <pubDate>Sun, 19 May 2024 21:16:35 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/go/database/mysql-optimization/</guid>
            <description>MySQL性能调优 code: https://github.com/Greenery-S/go-database/tree/master/mysql
实战建议 写sql时一律使用小写
建表时先判断表是否已存在 if not exists
所有的列和表都加comment
字符串长度比较短时尽量使用char，定长有利于内存对齐，读写性能更好，而varchar字段频繁修改时容易产生内存碎片
满足需求的前提下尽量使用短的数据类型，如tinyint vs int, float vs double, date vs datetime
CREATE TABLE if not exists `student` ( `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &amp;#39;主键自增id&amp;#39;, `name` char(10) NOT NULL COMMENT &amp;#39;姓名&amp;#39;, `province` char(6) NOT NULL COMMENT &amp;#39;省&amp;#39;, `city` char(10) NOT NULL COMMENT &amp;#39;城市&amp;#39;, `addr` varchar(100) DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;地址&amp;#39;, `score` float NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;考试成绩&amp;#39;, `enrollment` date NOT NULL COMMENT &amp;#39;入学时间&amp;#39;, PRIMARY KEY (`id`), UNIQUE KEY `idx_name` (`name`), KEY `idx_location` (`province`,`city`) ) ENGINE=InnoDB AUTO_INCREMENT=100020 DEFAULT CHARSET=utf8 COMMENT=&amp;#39;学员基本信息&amp;#39; 2 null default null有别于default &#39;&#39;和default 0</description>
            <content type="html"><![CDATA[<h1 id="mysql性能调优">MySQL性能调优</h1>
<blockquote>
<p>code: <a href="https://github.com/Greenery-S/go-database/tree/master/mysql">https://github.com/Greenery-S/go-database/tree/master/mysql</a></p>
</blockquote>
<h1 id="实战建议">实战建议</h1>
<ul>
<li>
<p>写sql时一律使用小写</p>
</li>
<li>
<p>建表时先判断表是否已存在  <code>if not exists</code></p>
</li>
<li>
<p>所有的列和表都加<code>comment</code></p>
</li>
<li>
<p>字符串长度比较短时尽量使用<code>char</code>，定长有利于内存对齐，读写性能更好，而<code>varchar</code>字段频繁修改时容易产生内存碎片</p>
</li>
<li>
<p>满足需求的前提下尽量使用短的数据类型，如<code>tinyint</code> vs <code>in</code>t, <code>float</code> vs <code>double</code>, <code>date</code> vs <code>datetime</code></p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">exists</span> <span style="color:#f92672">`</span>student<span style="color:#f92672">`</span> (
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">`</span>id<span style="color:#f92672">`</span> int(<span style="color:#ae81ff">11</span>) <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span> AUTO_INCREMENT <span style="color:#66d9ef">COMMENT</span> <span style="color:#e6db74">&#39;主键自增id&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">`</span>name<span style="color:#f92672">`</span> char(<span style="color:#ae81ff">10</span>) <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span> <span style="color:#66d9ef">COMMENT</span> <span style="color:#e6db74">&#39;姓名&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">`</span>province<span style="color:#f92672">`</span> char(<span style="color:#ae81ff">6</span>) <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span> <span style="color:#66d9ef">COMMENT</span> <span style="color:#e6db74">&#39;省&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">`</span>city<span style="color:#f92672">`</span> char(<span style="color:#ae81ff">10</span>) <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span> <span style="color:#66d9ef">COMMENT</span> <span style="color:#e6db74">&#39;城市&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">`</span>addr<span style="color:#f92672">`</span> varchar(<span style="color:#ae81ff">100</span>) <span style="color:#66d9ef">DEFAULT</span> <span style="color:#e6db74">&#39;&#39;</span> <span style="color:#66d9ef">COMMENT</span> <span style="color:#e6db74">&#39;地址&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">`</span>score<span style="color:#f92672">`</span> float <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span> <span style="color:#66d9ef">DEFAULT</span> <span style="color:#e6db74">&#39;0&#39;</span> <span style="color:#66d9ef">COMMENT</span> <span style="color:#e6db74">&#39;考试成绩&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">`</span>enrollment<span style="color:#f92672">`</span> date <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span> <span style="color:#66d9ef">COMMENT</span> <span style="color:#e6db74">&#39;入学时间&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">PRIMARY</span> <span style="color:#66d9ef">KEY</span> (<span style="color:#f92672">`</span>id<span style="color:#f92672">`</span>),
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">UNIQUE</span> <span style="color:#66d9ef">KEY</span> <span style="color:#f92672">`</span>idx_name<span style="color:#f92672">`</span> (<span style="color:#f92672">`</span>name<span style="color:#f92672">`</span>),
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">KEY</span> <span style="color:#f92672">`</span>idx_location<span style="color:#f92672">`</span> (<span style="color:#f92672">`</span>province<span style="color:#f92672">`</span>,<span style="color:#f92672">`</span>city<span style="color:#f92672">`</span>)
</span></span><span style="display:flex;"><span>) ENGINE<span style="color:#f92672">=</span>InnoDB AUTO_INCREMENT<span style="color:#f92672">=</span><span style="color:#ae81ff">100020</span> <span style="color:#66d9ef">DEFAULT</span> CHARSET<span style="color:#f92672">=</span>utf8 <span style="color:#66d9ef">COMMENT</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#39;学员基本信息&#39;</span>
</span></span></code></pre></div><h2 id="2-null">2 null</h2>
<ul>
<li>
<p><code>default null</code>有别于<code>default ''</code>和<code>default 0</code></p>
</li>
<li>
<p><code>is null</code>, <code>is not null</code>有别于<code>!= ''</code>, <code>!=0</code></p>
</li>
<li>
<p>尽量设为<code>not null</code></p>
<ul>
<li>
<p>有些DB索引列不允许包含null</p>
</li>
<li>
<p>对含有null的列进行统计，结果可能不符合预期</p>
</li>
<li>
<p>null值有时候会严重拖慢系统性能</p>
</li>
</ul>
</li>
</ul>
<h2 id="3-规避慢查询-eg-1s">3 规避慢查询 (e.g. &gt;1s)</h2>
<ul>
<li>大部分的<strong>慢查询</strong>都是因为<strong>没有正确地使用索引</strong></li>
<li>不要<strong>过多地创建索引</strong>，否则<strong>写入会变慢</strong></li>
<li>绝大部分情况使用<strong>默认的InnoDB</strong>引擎，不要使用MyISAM引擎</li>
<li>不要select *，<strong>只select你需要的列</strong></li>
<li>尽量用<strong>in代替or</strong>，or的效率没有in高</li>
<li><strong>in的元素个数不要太多，一般300到500</strong></li>
<li><strong>不要使用模型查询like，模糊查询不能利用索引</strong></li>
<li><strong>如果确定结果只有一条，则使用limit 1，停止全表扫描</strong></li>
<li><strong>分页查询limit m,n会检索前m+n行，只是返回后n行，通常用id&gt;x来代替这种分页方式</strong></li>
<li><strong>批量操作时最好一条sql语句搞定；其次打包成一个事务，一次性提交，高并发情况下减少对共享资源的争用</strong></li>
<li>避免使用大事务，用短小的事务，减少锁等待和竞争</li>
<li>不要一次查询或更新太多数据，尽量控制在1000条左右</li>
<li>不要使用连表操作，join逻辑在业务代码里完成</li>
<li>不用 MYSQL 内置的函数，因为内置函数不会建立查询缓存，复杂的计算逻辑放到自己的代码里去做</li>
</ul>
<h2 id="4-b树">4 B+树</h2>
<ol>
<li>B即Balance，对于m叉树每个节点上最多有m个数据，最少有m/2个数据（根节点除外）。</li>
<li>叶节点上存储了所有数据，把叶节点链接起来可以顺序遍历所有数据。</li>
<li>每个节点设计成内存页(4K)的整倍数。MySQL的m=1200，<strong>树的前两层放在内存中</strong>。</li>
</ol>

    <img src="/images/mysql-optimization-bplustree.png"  alt="b&#43;tree"  class="center"  style="border-radius: 20px; width: 300px;"  />


<h2 id="5-索引">5 索引</h2>
<ul>
<li>MySQL索引默认使用B+树
<ul>
<li>why not hashtable? &ndash; 1)全部数据不可能都加载内存;2)不利于范围查找;</li>
</ul>
</li>
<li>主键默认会加索引。<strong>按主键构建的B+树里包含所有列的数据</strong>，而<strong>普通索引的B+树里只存储了主键</strong>，还需要再查一次主键对应的B+树（<strong>回表</strong>）</li>
<li><strong>联合索引的前缀</strong>同样具有索引的效果</li>
<li>sql语句前加<strong>explain</strong>可以查看索引使用情况</li>
<li>如果MySQL没有选择最优的索引方案，可以在<strong>where前force index (index_name)</strong></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">show</span> <span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> student
</span></span></code></pre></div>
    <img src="/images/mysql-optimization-show-table.png"  alt="show-table"  class="center"  style="border-radius: 10px; width: 100%;"  />


<h2 id="6-覆盖索引">6 覆盖索引</h2>

    <img src="/images/mysql-optimization-cover-index.png"  alt="cover-index"  class="center"  style="border-radius: 10px; width: 300;"  />


<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">explain</span> <span style="color:#66d9ef">select</span> city <span style="color:#66d9ef">from</span> student <span style="color:#66d9ef">where</span> name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;张三&#39;</span> <span style="color:#66d9ef">and</span> province<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;北京&#39;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">explain</span> <span style="color:#66d9ef">select</span> city <span style="color:#66d9ef">from</span> student <span style="color:#66d9ef">force</span> <span style="color:#66d9ef">index</span> (idx_location) <span style="color:#66d9ef">where</span> name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;张三&#39;</span> <span style="color:#66d9ef">and</span> province<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;北京&#39;</span>;
</span></span></code></pre></div>
    <img src="/images/mysql-optimization-explain-select.png"  alt="cover-index"  class="center"  style="border-radius: 10px; width: 300;"  />


<ul>
<li>第一个查询需要回表</li>
<li><strong>第二个SQL只需要查询city，且刚好命中了(<code>province</code>,<code>city</code>)这个联合索引，不需要回表，这就是覆盖索引(即命中非主键索引，且不需要回表</strong> ==存疑==</li>
<li>覆盖索引在Extra里会显示Using index</li>
</ul>
<h2 id="7-sql注入攻击">7 SQL注入攻击</h2>
<p><strong>CASE 1</strong></p>
<ul>
<li><code>sql = &quot;select username,password from user where username='&quot; + username + &quot;' and password='&quot; + password + &quot;'&quot;; </code></li>
<li>变量username和password从前端输入框获取，如果用户输入的username为lily， password为aaa&rsquo; or &lsquo;1&rsquo;=&lsquo;1</li>
<li>则完整的sql为select username,password from user where username=&lsquo;lily&rsquo; and password=&lsquo;aaa&rsquo; or &lsquo;1&rsquo;=&lsquo;1&rsquo;</li>
<li>会返回表里的所有记录，如果记录数大于0就允许登录，则lily的账号被盗</li>
</ul>
<p><strong>CASE 2</strong></p>
<ul>
<li><code>sql=&quot;insert into student (name) values ('&quot;+username+&quot; ') &quot;;</code></li>
<li>变量username从前端输入框获取，如果用户输入的username为<code>lily'); drop table student;--‘)</code></li>
<li>完整sql为insert into student (name) values (&rsquo;lily&rsquo;); drop table student;&ndash;&rsquo;)</li>
<li>通过注释符&ndash;屏蔽掉了末尾的&rsquo;)，删除了整个表</li>
</ul>
<h4 id="防范方法">防范方法</h4>
<p><strong>总体</strong></p>
<ul>
<li>前端输入要加正则校验、长度限制</li>
<li>对特殊符号(&lt;&gt;&amp;*; &lsquo;&ldquo;等)进行转义或编码转换，Go的text/template 包里面的<code>HTMLEscapeString</code>函数可以对字符串进行转义处理</li>
<li>不要将用户输入直接嵌入到sql语句中，而应该使用<strong>参数化查询接口</strong>，如Prepare、Query、Exec(query string, args &hellip;interface{})</li>
<li>使用专业的SQL注入检测工具进行检测，如sqlmap、SQLninja</li>
<li><strong>避免网站打印出SQL错误信息</strong>，以防止攻击者利用这些错误信息进行SQL注入</li>
<li>没有任何一种方式能防住所有的sql注入，以上方法要结合使用</li>
</ul>
<p><strong>Stmt</strong></p>
<ul>
<li>
<p>定义一个sql模板 <code>stmt, err := db.Prepare(&quot;update student set score=score+? where city=?&quot;)</code></p>
</li>
<li>
<p>多次使用模板:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stmt</span>.<span style="color:#a6e22e">Exec</span>(<span style="color:#ae81ff">10</span>, <span style="color:#e6db74">&#34;上海&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">stmt</span>.<span style="color:#a6e22e">Exec</span>(<span style="color:#ae81ff">9</span>, <span style="color:#e6db74">&#34;深圳&#34;</span>)
</span></span></code></pre></div></li>
<li>
<p>不要拼接sql(容易被SQL注入攻击，且利用不上编译优化):  <code>db.Where(fmt.Sprintf(&quot;merchant_id = %s&quot;, merchantId))</code></p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">exists</span> <span style="color:#f92672">`</span>login<span style="color:#f92672">`</span> (
</span></span><span style="display:flex;"><span>                                       <span style="color:#f92672">`</span>username<span style="color:#f92672">`</span> varchar(<span style="color:#ae81ff">100</span>) <span style="color:#66d9ef">DEFAULT</span> <span style="color:#66d9ef">NULL</span>,
</span></span><span style="display:flex;"><span>                                       <span style="color:#f92672">`</span>password<span style="color:#f92672">`</span> varchar(<span style="color:#ae81ff">100</span>) <span style="color:#66d9ef">DEFAULT</span> <span style="color:#66d9ef">NULL</span>
</span></span><span style="display:flex;"><span>) ENGINE<span style="color:#f92672">=</span>InnoDB <span style="color:#66d9ef">DEFAULT</span> CHARSET<span style="color:#f92672">=</span>latin1;
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// 登录成功返回true。容易被SQL注入攻击
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">LoginUnsafe</span>(<span style="color:#a6e22e">db</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">DB</span>, <span style="color:#a6e22e">name</span>, <span style="color:#a6e22e">passwd</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">bool</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">cnt</span> <span style="color:#66d9ef">int64</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">Table</span>(<span style="color:#e6db74">&#34;login&#34;</span>).<span style="color:#a6e22e">Select</span>(<span style="color:#e6db74">&#34;*&#34;</span>).<span style="color:#a6e22e">Where</span>(<span style="color:#e6db74">&#34;username=&#39;&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">name</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&#39; and password=&#39;&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">passwd</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&#39;&#34;</span>).<span style="color:#a6e22e">Count</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">cnt</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">cnt</span> &gt; <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 登录成功返回true。拒绝SQL注入攻击
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">LoginSafe</span>(<span style="color:#a6e22e">db</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">DB</span>, <span style="color:#a6e22e">name</span>, <span style="color:#a6e22e">passwd</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">bool</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">cnt</span> <span style="color:#66d9ef">int64</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">Table</span>(<span style="color:#e6db74">&#34;login&#34;</span>).<span style="color:#a6e22e">Select</span>(<span style="color:#e6db74">&#34;*&#34;</span>).<span style="color:#a6e22e">Where</span>(<span style="color:#e6db74">&#34;username=? and password=?&#34;</span>, <span style="color:#a6e22e">name</span>, <span style="color:#a6e22e">passwd</span>).<span style="color:#a6e22e">Count</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">cnt</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">cnt</span> &gt; <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">TestLoginUnsafe</span>(<span style="color:#a6e22e">t</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">testing</span>.<span style="color:#a6e22e">T</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">db</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">mysql</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">dsn</span>), <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">Config</span>{<span style="color:#a6e22e">PrepareStmt</span>: <span style="color:#66d9ef">true</span>}) <span style="color:#75715e">//强行使用PrepareStmt
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		panic(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">LoginUnsafe</span>(<span style="color:#a6e22e">db</span>, <span style="color:#e6db74">&#34;tom&#34;</span>, <span style="color:#e6db74">&#34;123456&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#66d9ef">false</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Fail</span>()
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">LoginUnsafe</span>(<span style="color:#a6e22e">db</span>, <span style="color:#e6db74">&#34;tom&#34;</span>, <span style="color:#e6db74">&#34;456789&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#66d9ef">true</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Fail</span>()
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// select * from login where username=&#39;tom&#39; and password=&#39;456789&#39; or &#39;1&#39;=&#39;1&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">LoginUnsafe</span>(<span style="color:#a6e22e">db</span>, <span style="color:#e6db74">&#34;tom&#34;</span>, <span style="color:#e6db74">&#34;456789&#39; or &#39;1&#39;=&#39;1&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#66d9ef">false</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Fail</span>()
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">TestLoginSafe</span>(<span style="color:#a6e22e">t</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">testing</span>.<span style="color:#a6e22e">T</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">db</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">mysql</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">dsn</span>), <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">Config</span>{<span style="color:#a6e22e">PrepareStmt</span>: <span style="color:#66d9ef">true</span>}) <span style="color:#75715e">//强行使用PrepareStmt
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		panic(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">LoginSafe</span>(<span style="color:#a6e22e">db</span>, <span style="color:#e6db74">&#34;tom&#34;</span>, <span style="color:#e6db74">&#34;123456&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#66d9ef">false</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Fail</span>()
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">LoginSafe</span>(<span style="color:#a6e22e">db</span>, <span style="color:#e6db74">&#34;tom&#34;</span>, <span style="color:#e6db74">&#34;456789&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#66d9ef">true</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Fail</span>()
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">LoginSafe</span>(<span style="color:#a6e22e">db</span>, <span style="color:#e6db74">&#34;tom&#34;</span>, <span style="color:#e6db74">&#34;456789&#39; or &#39;1&#39;=&#39;1&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#66d9ef">true</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Fail</span>()
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>SQL预编译</strong></p>
<ul>
<li>
<p>DB执行sql分为3步：</p>
<ol>
<li>词法和语义解析</li>
<li>优化 SQL 语句，制定执行计划</li>
<li>执行并返回结果</li>
</ol>
</li>
<li>
<p>SQL 预编译技术是指将用户输入用占位符?代替，先对这个模板化的sql进行预编译，实际运行时再将用户输入代入</p>
</li>
<li>
<p>除了可以防止 SQL 注入，还可以对预编译的SQL语句进行缓存，之后的运行就省去了解析优化SQL语句的过程</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">BenchmarkQueryWithoutPrepare</span>(<span style="color:#a6e22e">b</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">testing</span>.<span style="color:#a6e22e">B</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">client</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">mysql</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">dsn</span>), <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">Config</span>{}) <span style="color:#75715e">//没有指定PrepareStmt
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		panic(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">ResetTimer</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">N</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">LoginUnsafe</span>(<span style="color:#a6e22e">client</span>, <span style="color:#a6e22e">name</span>, <span style="color:#a6e22e">passwd</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">BenchmarkQueryWithPrepare</span>(<span style="color:#a6e22e">b</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">testing</span>.<span style="color:#a6e22e">B</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">client</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">mysql</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">dsn</span>), <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">Config</span>{<span style="color:#a6e22e">PrepareStmt</span>: <span style="color:#66d9ef">true</span>}) <span style="color:#75715e">//强行使用PrepareStmt
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		panic(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">ResetTimer</span>()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">N</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">LoginUnsafe</span>(<span style="color:#a6e22e">client</span>, <span style="color:#a6e22e">name</span>, <span style="color:#a6e22e">passwd</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>&gt; go test ./ -bench<span style="color:#f92672">=</span>^BenchmarkQueryWith -run<span style="color:#f92672">=</span>^$ -count<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> -benchmem
</span></span><span style="display:flex;"><span>goos: darwin
</span></span><span style="display:flex;"><span>goarch: arm64
</span></span><span style="display:flex;"><span>pkg: dqq/database/mysql
</span></span><span style="display:flex;"><span>BenchmarkQueryWithoutPrepare-10             <span style="color:#ae81ff">7888</span>            <span style="color:#ae81ff">147138</span> ns/op            <span style="color:#ae81ff">3441</span> B/op         <span style="color:#ae81ff">54</span> allocs/op
</span></span><span style="display:flex;"><span>BenchmarkQueryWithPrepare-10                <span style="color:#ae81ff">8508</span>            <span style="color:#ae81ff">130443</span> ns/op            <span style="color:#ae81ff">3458</span> B/op         <span style="color:#ae81ff">55</span> allocs/op
</span></span><span style="display:flex;"><span>PASS
</span></span></code></pre></div><h2 id="8-分页查询">8 分页查询</h2>
<ul>
<li>分页查询limit m,n会检索前m+n行，只是返回后n行，通常用<code>id&gt;x</code>来代替这种分页方式。</li>
<li>全表扫描
<ol>
<li>直接select * from table肯定是慢查询，违背了一次查询行数不能太多的原则</li>
<li>分页查询表面上查询的行数不多，实则是执行了多次方式1</li>
<li>固定page_size，维护当前查询到在最大id(max_id)，查询时使用<code>where id&gt;maxid limit page_size</code>，当查询结果为空时，退出循环</li>
</ol>
</li>
</ul>

    <img src="/images/mysql-optimization-pagenate.png"  alt="cover-index"  class="center"  style="border-radius: 10px; width: 300;"  />


<h2 id="9-事务">9 事务</h2>
<ul>
<li>批量操作时最好一条sql语句搞定；其次打包成一个事务，一次性提交，高并发情况下减少对共享资源的争用</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> (
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">INSERT_COUNT</span> = <span style="color:#ae81ff">100000</span>
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 一条一条插入
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">InsertOneByOne</span>(<span style="color:#a6e22e">db</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">DB</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">begin</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">INSERT_COUNT</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">student</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">Student</span>{<span style="color:#a6e22e">Name</span>: <span style="color:#e6db74">&#34;学生&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Itoa</span>(<span style="color:#a6e22e">i</span>), <span style="color:#a6e22e">Province</span>: <span style="color:#e6db74">&#34;北京&#34;</span>, <span style="color:#a6e22e">City</span>: <span style="color:#e6db74">&#34;北京&#34;</span>, <span style="color:#a6e22e">Score</span>: <span style="color:#ae81ff">38</span>, <span style="color:#a6e22e">Enrollment</span>: <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>()}
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">Create</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">student</span>).<span style="color:#a6e22e">Error</span>; <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> { <span style="color:#75715e">//注意需要传student的指针
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>			<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;total&#34;</span>, <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Since</span>(<span style="color:#a6e22e">begin</span>))
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 放在一个事务里插入
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">InsertByTransaction1</span>(<span style="color:#a6e22e">db</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">DB</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">begin</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">tx</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">Begin</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">INSERT_COUNT</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">student</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">Student</span>{<span style="color:#a6e22e">Name</span>: <span style="color:#e6db74">&#34;学生&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Itoa</span>(<span style="color:#a6e22e">i</span>), <span style="color:#a6e22e">Province</span>: <span style="color:#e6db74">&#34;北京&#34;</span>, <span style="color:#a6e22e">City</span>: <span style="color:#e6db74">&#34;北京&#34;</span>, <span style="color:#a6e22e">Score</span>: <span style="color:#ae81ff">38</span>, <span style="color:#a6e22e">Enrollment</span>: <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>()}
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">Create</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">student</span>).<span style="color:#a6e22e">Error</span>; <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">Commit</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;total&#34;</span>, <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Since</span>(<span style="color:#a6e22e">begin</span>))
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 一次插入多条，整体再放到一个事务里
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">InsertByTransaction2</span>(<span style="color:#a6e22e">db</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">DB</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">begin</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">tx</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">Begin</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">BATCH</span> = <span style="color:#ae81ff">100</span> <span style="color:#75715e">// 一条SQL语句插入多条
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">INSERT_COUNT</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">BATCH</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">students</span> <span style="color:#f92672">:=</span> make([]<span style="color:#a6e22e">Student</span>, <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">BATCH</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">j</span> &lt; <span style="color:#a6e22e">BATCH</span>; <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">student</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">Student</span>{<span style="color:#a6e22e">Name</span>: <span style="color:#e6db74">&#34;学生&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Itoa</span>(<span style="color:#a6e22e">i</span><span style="color:#f92672">+</span><span style="color:#a6e22e">j</span>), <span style="color:#a6e22e">Province</span>: <span style="color:#e6db74">&#34;北京&#34;</span>, <span style="color:#a6e22e">City</span>: <span style="color:#e6db74">&#34;北京&#34;</span>, <span style="color:#a6e22e">Score</span>: <span style="color:#ae81ff">38</span>, <span style="color:#a6e22e">Enrollment</span>: <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>()}
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">students</span> = append(<span style="color:#a6e22e">students</span>, <span style="color:#a6e22e">student</span>)
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">Create</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">students</span>).<span style="color:#a6e22e">Error</span>; <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">Commit</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;total&#34;</span>, <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Since</span>(<span style="color:#a6e22e">begin</span>))
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#f92672">===</span> RUN   TestInsertOneByOne
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>total 1m55.652681166s
</span></span><span style="display:flex;"><span>--- PASS: TestInsertOneByOne <span style="color:#f92672">(</span>116.20s<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">===</span> RUN   TestInsertByTransaction1
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>total 27.29299825s
</span></span><span style="display:flex;"><span>--- PASS: TestInsertByTransaction1 <span style="color:#f92672">(</span>27.91s<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">===</span> RUN   TestInsertByTransaction2
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>total 3.226376333s
</span></span><span style="display:flex;"><span>--- PASS: TestInsertByTransaction2 <span style="color:#f92672">(</span>4.20s<span style="color:#f92672">)</span>
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>How to Maintain the Site</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/hugo/site-building/how-to-maintain-the-site/</link>
            <pubDate>Sun, 19 May 2024 02:32:21 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/hugo/site-building/how-to-maintain-the-site/</guid>
            <description>如何通过hugo和github维护博客 gitpage是一个非常好的博客托管平台,它可以让你通过git的方式来维护你的博客.这样的方式非常适合程序员,因为我们大多数都会使用git.
hugo是一个非常好的静态网站生成器,它可以让你通过markdown文件来生成静态网站.这样的方式非常适合程序员,因为我们大多数都会使用markdown.
这篇文章会教你如何通过hugo和github来维护你的博客.
安装hugo和git 首先你需要安装hugo和git.你可以通过以下方式安装:
# 安装hugo brew install hugo # 安装git brew install git 在github上创建2个仓库 你需要在github上创建2个仓库,一个用来存放hugo的源文件,一个用来存放hugo生成的静态网站.
存放hugo生成的静态网站的仓库名字是&amp;lt;yourname.github.io&amp;gt;,这个仓库是一个公开仓库,用来存放你的hugo源文件.
本地初始化网站项目 # 初始化hugo项目 hugo new site &amp;lt;site-name&amp;gt; # 初始化git项目 git init # 添加远程仓库 git remote add origin &amp;lt;your-site-source-repo&amp;gt; 创建文章,预览,修改 # 创建文章 hugo new posts/my-first-post.md # 预览 hugo server -D 修改主题 # 下载主题 git submodule add &amp;lt;theme-url&amp;gt; themes/&amp;lt;theme-name&amp;gt; # 修改配置文件 cp themes/&amp;lt;theme-name&amp;gt;/exampleSite/config.toml 配置的修改因主题而异,请参考主题的文档.比如我使用的&amp;rsquo;hello-friend-ng&amp;rsquo;主题,使用建议:
所有的文章都应该放在content/posts目录下 可以配置config.toml文件来修改menu: [[menu.main]] identifier = &amp;#34;about&amp;#34; name = &amp;#34;About&amp;#34; url = &amp;#34;posts/about&amp;#34; weight = 1 [[menu.</description>
            <content type="html"><![CDATA[<h1 id="如何通过hugo和github维护博客">如何通过hugo和github维护博客</h1>
<p><a href="https://pages.github.com/">gitpage</a>是一个非常好的博客托管平台,它可以让你通过git的方式来维护你的博客.这样的方式非常适合程序员,因为我们大多数都会使用git.</p>
<p><a href="https://gohugo.io/">hugo</a>是一个非常好的静态网站生成器,它可以让你通过markdown文件来生成静态网站.这样的方式非常适合程序员,因为我们大多数都会使用markdown.</p>
<p>这篇文章会教你如何通过hugo和github来维护你的博客.</p>
<h2 id="安装hugo和git">安装hugo和git</h2>
<p>首先你需要安装hugo和git.你可以通过以下方式安装:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># 安装hugo</span>
</span></span><span style="display:flex;"><span>brew install hugo
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 安装git</span>
</span></span><span style="display:flex;"><span>brew install git
</span></span></code></pre></div><h2 id="在github上创建2个仓库">在github上创建2个仓库</h2>
<p>你需要在github上创建2个仓库,一个用来存放hugo的源文件,一个用来存放hugo生成的静态网站.</p>
<p>存放hugo生成的静态网站的仓库名字是<code>&lt;yourname.github.io&gt;</code>,这个仓库是一个公开仓库,用来存放你的hugo源文件.</p>
<h2 id="本地初始化网站项目">本地初始化网站项目</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># 初始化hugo项目</span>
</span></span><span style="display:flex;"><span>hugo new site &lt;site-name&gt;
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 初始化git项目</span>
</span></span><span style="display:flex;"><span>git init
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 添加远程仓库</span>
</span></span><span style="display:flex;"><span>git remote add origin &lt;your-site-source-repo&gt;
</span></span></code></pre></div><h2 id="创建文章预览修改">创建文章,预览,修改</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># 创建文章</span>
</span></span><span style="display:flex;"><span>hugo new posts/my-first-post.md
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 预览</span>
</span></span><span style="display:flex;"><span>hugo server -D
</span></span></code></pre></div><h2 id="修改主题">修改主题</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># 下载主题</span>
</span></span><span style="display:flex;"><span>git submodule add &lt;theme-url&gt; themes/&lt;theme-name&gt;
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 修改配置文件</span>
</span></span><span style="display:flex;"><span>cp themes/&lt;theme-name&gt;/exampleSite/config.toml 
</span></span></code></pre></div><p>配置的修改因主题而异,请参考主题的文档.比如我使用的&rsquo;hello-friend-ng&rsquo;主题,使用建议:</p>
<ul>
<li>所有的文章都应该放在<code>content/posts</code>目录下</li>
<li>可以配置<code>config.toml</code>文件来修改menu:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span>[[<span style="color:#a6e22e">menu</span>.<span style="color:#a6e22e">main</span>]]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">identifier</span> = <span style="color:#e6db74">&#34;about&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#34;About&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">url</span> = <span style="color:#e6db74">&#34;posts/about&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">weight</span> = <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>[[<span style="color:#a6e22e">menu</span>.<span style="color:#a6e22e">main</span>]]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">identifier</span> = <span style="color:#e6db74">&#34;site-building&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#34;Site-building&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">url</span> = <span style="color:#e6db74">&#34;categories/hugo-site-building/&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">weight</span> = <span style="color:#ae81ff">5</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="发布网站到githubio">发布网站到github.io</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># 生成静态网站</span>
</span></span><span style="display:flex;"><span>hugo
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 提交到github</span>
</span></span><span style="display:flex;"><span>cd public
</span></span><span style="display:flex;"><span>git add .
</span></span><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;add new post&#34;</span>
</span></span><span style="display:flex;"><span>git push origin master
</span></span></code></pre></div><p>访问<code>https://&lt;yourname&gt;.github.io</code>就可以看到你的博客了.</p>
<blockquote>
<p>参考链接:</p>
<ul>
<li><a href="https://cuttontail.blog/blog/create-a-wesite-using-github-pages-and-hugo/">教程</a></li>
</ul>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>About</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/about/</link>
            <pubDate>Sun, 19 May 2024 01:04:56 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/about/</guid>
            <description>关于本站 本站是一个基于hugo的博客站点,主要用于记录我的学习和生活.
hugo是一个go语言写的静态网站生成器,它的速度非常快,并且支持markdown语法. 它的基于go-template,所以它的使用方法着实类似于其他生成器,比如helm.
关于我 Hello,这事是我,严珂宇,Sam,Greenery.
我是一位即将毕业的学生.我在NUS就读master,专业是计算机工程.我的本科是985大学的计算机科学与技术专业,排名还蛮靠前的,但是我觉得我还是有很多东西要学习.想出来看看世界,所以就来了新加坡.
我很幸运在刚来到新加坡就遇见了TikTok,并加入实习.虽然我的英语口语实在太可怜,而且我也不太会社交,但是我还是很开心能在这里工作.因为从leader,mentor到同事,都很nice.
这是我的简历:
简历PDF 我的技术栈 编程语言 C/C++: 本科期间用来做课程作业,但不算精通.最近正在对着learncpp.com复习. Python: 用python写过一些数据处理,机器学习,深度学习,强化学习的代码,独立做过一些科研向项目.比较熟悉,不太喜欢python的语法,不太适合构建可靠项目. Go: 第一门掌握的生产级语言,用来写后端服务,工具,脚本,爬虫等.比较喜欢go的语法,并发模型,标准库,工具链等. Java: 本科期间教过java的面向对象,大二购买了how2j,一直晾在哪里,属于有时间两周就能学会的状态. Shell: 用来写一些简单的脚本,比如自动化部署,备份,清理等. JavaScript: 用来写一些简单的ajax,想着以后有时间学一下typescript和react等. Rust: 超级想学的语言,但又怕没工作机会,等稳定了再学吧. 领域知识 计算机后端技术: 主要是web开发,分布式系统,数据库,缓存,消息队列等. 云原生技术: 主要是k8s, docker, helm, argoCD, argo workflow等. 计算机网络: 主要是tcp/ip,http,https,websocket等. 机器学习: 深度学习,强化学习, 写过pytorch, tensorflow, keras等. 数据分析: 数据处理,数据可视化, 会用pandas, numpy, matplotlib, seaborn等. 等待队列 leetcode算法: 一直在刷,根本刷不完&amp;hellip; go项目: 正在做一些项目系统复习一下go的语法和各种数据组件. k8s方方面面: 正在学习中,希望产出一些k8s的文章. C++: 正在看,每周看2章. Model-based Reinforcement Learning for Industrial Applications: 这个项目和教授一起做的,快可以写论文了. 我的生活 忙里偷闲,和朋友一起去马来西亚玩.平时就是吃吃吃,玩玩游戏,看漫画.有谁喜欢看刃牙和拳愿会的吗?</description>
            <content type="html"><![CDATA[<h1 id="关于本站">关于本站</h1>
<p>本站是一个基于hugo的博客站点,主要用于记录我的学习和生活.</p>
<p>hugo是一个go语言写的静态网站生成器,它的速度非常快,并且支持markdown语法. 它的基于go-template,所以它的使用方法着实类似于其他生成器,比如helm.</p>
<h1 id="关于我">关于我</h1>
<p>Hello,这事是我,严珂宇,Sam,Greenery.</p>

    <img src="/images/author.jpg"  alt="Hello Friend"  class="center"  style="border-radius: 20px; width: 200px;"  />


<p>我是一位即将毕业的学生.我在NUS就读master,专业是计算机工程.我的本科是985大学的计算机科学与技术专业,排名还蛮靠前的,但是我觉得我还是有很多东西要学习.想出来看看世界,所以就来了新加坡.</p>
<p>我很幸运在刚来到新加坡就遇见了TikTok,并加入实习.虽然我的英语口语实在太可怜,而且我也不太会社交,但是我还是很开心能在这里工作.因为从leader,mentor到同事,都很nice.</p>
<p>这是我的简历:</p>
<ul>
<li><a href="/zh-cn/cv/cven.pdf">简历PDF</a></li>
</ul>
<h2 id="我的技术栈">我的技术栈</h2>
<h3 id="编程语言">编程语言</h3>
<ul>
<li>C/C++: 本科期间用来做课程作业,但不算精通.最近正在对着<a href="https://www.learncpp.com/">learncpp.com</a>复习.</li>
<li>Python: 用python写过一些数据处理,机器学习,深度学习,强化学习的代码,独立做过一些科研向项目.比较熟悉,不太喜欢python的语法,不太适合构建可靠项目.</li>
<li>Go: 第一门掌握的生产级语言,用来写后端服务,工具,脚本,爬虫等.比较喜欢go的语法,并发模型,标准库,工具链等.</li>
<li>Java: 本科期间教过java的面向对象,大二购买了how2j,一直晾在哪里,属于有时间两周就能学会的状态.</li>
<li>Shell: 用来写一些简单的脚本,比如自动化部署,备份,清理等.</li>
<li>JavaScript: 用来写一些简单的ajax,想着以后有时间学一下typescript和react等.</li>
<li>Rust: 超级想学的语言,但又怕没工作机会,等稳定了再学吧.</li>
</ul>
<h3 id="领域知识">领域知识</h3>
<ul>
<li>计算机后端技术: 主要是web开发,分布式系统,数据库,缓存,消息队列等.</li>
<li>云原生技术: 主要是k8s, docker, helm, argoCD, argo workflow等.</li>
<li>计算机网络: 主要是tcp/ip,http,https,websocket等.</li>
<li>机器学习: 深度学习,强化学习, 写过pytorch, tensorflow, keras等.</li>
<li>数据分析: 数据处理,数据可视化, 会用pandas, numpy, matplotlib, seaborn等.</li>
</ul>
<h3 id="等待队列">等待队列</h3>
<ul>
<li>leetcode算法: 一直在刷,根本刷不完&hellip;</li>
<li>go项目: 正在做一些项目系统复习一下go的语法和各种数据组件.</li>
<li>k8s方方面面: 正在学习中,希望产出一些k8s的文章.</li>
<li>C++: 正在看,每周看2章.</li>
<li>Model-based Reinforcement Learning for Industrial Applications: 这个项目和教授一起做的,快可以写论文了.</li>
</ul>
<h2 id="我的生活">我的生活</h2>
<p>忙里偷闲,和朋友一起去马来西亚玩.平时就是吃吃吃,玩玩游戏,看漫画.有谁喜欢看刃牙和拳愿会的吗?</p>
]]></content>
        </item>
        
        <item>
            <title>English in Action</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/english-learning/daily/english-in-action/</link>
            <pubDate>Sun, 19 May 2024 00:16:38 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/english-learning/daily/english-in-action/</guid>
            <description>English Learning Daily 我在写博客的时候是先写了中文,之后再翻译成英文的.这样的方式可以让我更好的练习英文,也可以让我更好的理解中文和英文之间的差异.
我可以在写博客的时候,学习一些新的英文单词,也可以学习一些英文的表达方式.这样的方式对我来说是非常有帮助的.
我会分析chatgpt给我翻译的英文,记录其中的单词,表达方式,语法等等.这样的方式可以让我更好的学习英文.
这个专题的文章命名方式是: 20010203-english-in-blog.md,其中的20010203是日期,english-in-blog是文章的标题.</description>
            <content type="html"><![CDATA[<h1 id="english-learning-daily">English Learning Daily</h1>
<p>我在写博客的时候是先写了中文,之后再翻译成英文的.这样的方式可以让我更好的练习英文,也可以让我更好的理解中文和英文之间的差异.</p>
<p>我可以在写博客的时候,学习一些新的英文单词,也可以学习一些英文的表达方式.这样的方式对我来说是非常有帮助的.</p>
<p>我会分析chatgpt给我翻译的英文,记录其中的单词,表达方式,语法等等.这样的方式可以让我更好的学习英文.</p>
<p>这个专题的文章命名方式是: <code>20010203-english-in-blog.md</code>,其中的<code>20010203</code>是日期,<code>english-in-blog</code>是文章的标题.</p>
]]></content>
        </item>
        
        <item>
            <title>Classification</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/hugo/site-building/classification/</link>
            <pubDate>Sat, 18 May 2024 20:56:05 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/hugo/site-building/classification/</guid>
            <description>文章的分类系统 文章的分类由tags和categories两个字段管理.tag用来做更加随意的分类,比如golang和gopher,categories用来做更加严格的 专题分类,比如go-dual-token-blog-system.
tags和categories的列表页面的url分别是/tags/和/categories/.这两个url被设置到了导航栏中,点击后可以查看所有的tags 和categories,非常方便.
唯一需要注意的是这个列表的排序方式默认是按时间的,所以尽量避免过多的tags和categories,否则会导致列表页面的混乱.
tags tag值可以随意填写,比如golang和gopher.任何语义的tag都可以填写.它被设置在markdown文件的front matter中,并且可以有多个tag.
建议填写单数形式的tag,比如rule而不是rules.这样可以避免tag的重复.
tags: - golang - gopher - hugo categories categories值是专题分类,比如go-project-dual-token-blog-system.它被设置在markdown文件的front matter中.
这个分类是分级的,比如go是一级分类,go-project是二级分类,go-project-dual-token-blog-system 是三级分类.子分类必须填写父分类,比如,对于在go-project-dual-token-blog-system分类下的文章,categories字段应该填写如下.
categories: - go - go-project - go-project-dual-token-blog-system 一篇文章可能是处于两个大分类下的,比如本文就可以同时处于hugo和go两个大分类下. 这种一定要谨慎考虑,不要乱填写.</description>
            <content type="html"><![CDATA[<h1 id="文章的分类系统">文章的分类系统</h1>
<p>文章的分类由<code>tags</code>和<code>categories</code>两个字段管理.<code>tag</code>用来做更加随意的分类,比如<code>golang</code>和<code>gopher</code>,<code>categories</code>用来做更加严格的
<strong>专题</strong>分类,比如<code>go-dual-token-blog-system</code>.</p>
<p><code>tags</code>和<code>categories</code>的列表页面的url分别是<code>/tags/</code>和<code>/categories/</code>.这两个url被设置到了导航栏中,点击后可以查看所有的<code>tags</code>
和<code>categories</code>,非常方便.</p>
<p>唯一需要注意的是这个列表的排序方式默认是按时间的,所以尽量避免过多的<code>tags</code>和<code>categories</code>,否则会导致列表页面的混乱.</p>
<h2 id="tags">tags</h2>
<p>tag值可以随意填写,比如<code>golang</code>和<code>gopher</code>.任何语义的tag都可以填写.它被设置在markdown文件的front matter中,并且可以有多个tag.</p>
<p>建议填写单数形式的tag,比如<code>rule</code>而不是<code>rules</code>.这样可以避免tag的重复.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">tags</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">golang</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">gopher</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">hugo</span>
</span></span></code></pre></div><h2 id="categories">categories</h2>
<p>categories值是专题分类,比如<code>go-project-dual-token-blog-system</code>.它被设置在markdown文件的front matter中.</p>
<p>这个分类是分级的,比如<code>go</code>是一级分类,<code>go-project</code>是二级分类,<code>go-project-dual-token-blog-system</code>
是三级分类.子分类必须填写父分类,比如,对于在<code>go-project-dual-token-blog-system</code>分类下的文章,<code>categories</code>字段应该填写如下.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">categories</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">go</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">go-project</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">go-project-dual-token-blog-system</span>
</span></span></code></pre></div><p>一篇文章可能是处于两个大分类下的,比如本文就可以同时处于<code>hugo</code>和<code>go</code>两个大分类下. 这种一定要谨慎考虑,不要乱填写.</p>
]]></content>
        </item>
        
        <item>
            <title>Two-Year Old Gopher</title>
            <link>https://Greenery-S.github.io/zh-cn/posts/go/two-year-old-gopher/</link>
            <pubDate>Sat, 18 May 2024 20:49:18 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/zh-cn/posts/go/two-year-old-gopher/</guid>
            <description>一个2年的go语言使用者 我从20222年10月开始接触go语言,到现在已经有2年了. 接触了go语言的我,对go语言有了一定的了解,并且在工作中也有了一定的实践.我想分享一下我对go语言的一些看法.
为什么学go? 我当时正在选择一门技术来让我在中国的互联网行业有一席之地.当时疫情刚结束,当年毕业的毕业生都说java就业形势不好,工作难找.大三的我选择了留学,离毕业还有2年,非常迷茫.我就去问我的老程序员伯伯,他让我试试golang,他们也在用.
漫漫学习路 于是我就开始学习这门语言.我必须要感谢他,仅从初级程序员学习来说,go非常舒服.go和rust作为新兴语言,都有着非常清晰的学习路径和几乎不存在的历史包袱.这对于初学者来说是非常友好的.
于是我学习了go的语法,go的并发,一些数据组件的go sdk,以及go的一些框架.我发现go的并发非常好用,go的sdk也非常丰富,go的框架也非常多.我也在工作中使用go写了一些小工具,也写了一些小服务.
我还参加了goCN的线下活动,在北京和go学友面基.那是疫情之后的第一届,在北京举行,前一天我还在拉萨,脑子一热,一个晚上我就赶到了北京,还要有江达哥收留,我在北京的这几天非常开心.
go语言的明星项目是docker和k8s,这两个项目都是用go语言写的.这两个项目的成功也让go语言在云计算领域有了一席之地,成功在老牌强劲语言java和c++的领域站稳了脚跟.
我后来业学习了云原生技术,但是一直在学习中,我觉得我要系统的学习它,因为我着实入了这一行.go语言成就了我.我在新加坡成为了TikTok Cloud infra的实习生,我也在这里学习了很多东西.
道阻且长 来到新加坡,并以go语言作为工作内容,这是对我最好的安排.我也许还要继续精进自己的go语言技术,也许还要学习更多的云原生技术,也许还要学习更多的东西.但是我相信,我会一直走下去,直到我不再喜欢这个行业.
当然,成为实习生和成为正式员工还是有很大的努力需要做出.介于形势,我需要同时学习leetcode算法,通用go后端技术,k8s为核心的云原生技术.我也许还要学习其他语言技术,比如系统学习cpp或pytorch,来保证我的就业广度.
这个专题会有什么? 目前我想把我之前做过的一些通用的go后端知识点都放在这个专题.这个go专题近期至少会有以下内容:
数据库专题 消息队列专题 安全与加密专题 网络编程专题 练手项目: 博客系统: 其实是本网站的前身,基于gin框架的单体,全部组件包括mysql和redis都是容器化的.鉴权部分设计了双token机制. 维护成本比较高,于是转向了hugo. 抽奖系统: 这里会是高并发技巧的融合练习. gpc框架: 这是一个基于go的rpc框架,我会在这里实现一个简单的rpc框架. 分布式搜索系统: 一个比较高级的练手项目,会涉及到分布式系统的一些知识. go语言的基础语法和go语言的并发可能近期不会有,因为他们又是一个很大的专题,我需要时间来整理.</description>
            <content type="html"><![CDATA[<h1 id="一个2年的go语言使用者">一个2年的go语言使用者</h1>
<p>我从20222年10月开始接触go语言,到现在已经有2年了. 接触了go语言的我,对go语言有了一定的了解,并且在工作中也有了一定的实践.我想分享一下我对go语言的一些看法.</p>
<h2 id="为什么学go">为什么学go?</h2>
<p>我当时正在选择一门技术来让我在中国的互联网行业有一席之地.当时疫情刚结束,当年毕业的毕业生都说java就业形势不好,工作难找.大三的我选择了留学,离毕业还有2年,非常迷茫.我就去问我的老程序员伯伯,他让我试试golang,他们也在用.</p>
<h2 id="漫漫学习路">漫漫学习路</h2>
<p>于是我就开始学习这门语言.我必须要感谢他,仅从初级程序员学习来说,go非常舒服.go和rust作为新兴语言,都有着非常清晰的学习路径和几乎不存在的历史包袱.这对于初学者来说是非常友好的.</p>
<p>于是我学习了go的语法,go的并发,一些数据组件的go sdk,以及go的一些框架.我发现go的并发非常好用,go的sdk也非常丰富,go的框架也非常多.我也在工作中使用go写了一些小工具,也写了一些小服务.</p>
<p>我还参加了goCN的线下活动,在北京和go学友面基.那是疫情之后的第一届,在北京举行,前一天我还在拉萨,脑子一热,一个晚上我就赶到了北京,还要有江达哥收留,我在北京的这几天非常开心.</p>
<p>go语言的明星项目是docker和k8s,这两个项目都是用go语言写的.这两个项目的成功也让go语言在云计算领域有了一席之地,成功在老牌强劲语言java和c++的领域站稳了脚跟.</p>
<p>我后来业学习了云原生技术,但是一直在学习中,我觉得我要系统的学习它,因为我着实入了这一行.go语言成就了我.我在新加坡成为了TikTok Cloud infra的实习生,我也在这里学习了很多东西.</p>
<h2 id="道阻且长">道阻且长</h2>
<p>来到新加坡,并以go语言作为工作内容,这是对我最好的安排.我也许还要继续精进自己的go语言技术,也许还要学习更多的云原生技术,也许还要学习更多的东西.但是我相信,我会一直走下去,直到我不再喜欢这个行业.</p>
<p>当然,成为实习生和成为正式员工还是有很大的努力需要做出.介于形势,我需要同时学习leetcode算法,通用go后端技术,k8s为核心的云原生技术.我也许还要学习其他语言技术,比如系统学习cpp或pytorch,来保证我的就业广度.</p>
<h2 id="这个专题会有什么">这个专题会有什么?</h2>
<p>目前我想把我之前做过的一些通用的go后端知识点都放在这个专题.这个go专题近期至少会有以下内容:</p>
<ul>
<li><strong>数据库专题</strong></li>
<li><strong>消息队列专题</strong></li>
<li><strong>安全与加密专题</strong></li>
<li><strong>网络编程专题</strong></li>
<li>练手项目:
<ul>
<li><strong>博客系统</strong>: 其实是本网站的前身,基于gin框架的单体,全部组件包括mysql和redis都是容器化的.鉴权部分设计了双token机制. 维护成本比较高,于是转向了hugo.</li>
<li><strong>抽奖系统</strong>: 这里会是高并发技巧的融合练习.</li>
<li><strong>gpc框架</strong>: 这是一个基于go的rpc框架,我会在这里实现一个简单的rpc框架.</li>
<li><strong>分布式搜索系统</strong>: 一个比较高级的练手项目,会涉及到分布式系统的一些知识.</li>
</ul>
</li>
</ul>
<p>go语言的基础语法和go语言的并发可能近期不会有,因为他们又是一个很大的专题,我需要时间来整理.</p>
]]></content>
        </item>
        
    </channel>
</rss>
