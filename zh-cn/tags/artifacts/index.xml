<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Artifacts on Greenery&#39;s Blog Site</title>
    <link>https://Greenery-S.github.io/zh-cn/tags/artifacts/</link>
    <description>Recent content in Artifacts on Greenery&#39;s Blog Site</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 25 May 2024 17:14:53 +0800</lastBuildDate>
    <atom:link href="https://Greenery-S.github.io/zh-cn/tags/artifacts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Argo Workflow 3</title>
      <link>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-3/</link>
      <pubDate>Sat, 25 May 2024 17:14:53 +0800</pubDate>
      <guid>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-3/</guid>
      <description>Argo Workflow (3) 1 Artifacts 在运行工作流时，步骤生成或使用工件是非常常见的情况。通常，一个步骤的输出工件可能会被后续步骤作为输入工件使用。&#xA;下面的工作流规范包含两个按顺序运行的步骤。第一个名为 generate-artifact 的步骤将使用 argosay 模板生成一个工件，该工件将被第二个名为 print-message 的步骤使用，print-message 将消费生成的工件。&#xA;apiVersion: argoproj.io/v1alpha1 kind: Workflow metadata: generateName: artifact-passing- spec: entrypoint: artifact-example templates: - name: artifact-example steps: - - name: generate-artifact template: argosay - - name: consume-artifact template: print-message arguments: artifacts: # bind message to the hello-art artifact # generated by the generate-artifact step - name: message from: &amp;#34;{{steps.generate-artifact.outputs.artifacts.hello-art}}&amp;#34; - name: argosay container: image: yky8/argosay:v2 # sh -c，你可以在其后面提供一个字符串， # 这个字符串将被 sh 作为一个完整的 shell 命令来执行 command: [sh, -c] # The tee command is used in Linux and Unix systems.</description>
    </item>
  </channel>
</rss>
