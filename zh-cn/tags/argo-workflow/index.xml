<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Argo-Workflow on Greenery&#39;s Blog Site</title>
    <link>https://Greenery-S.github.io/zh-cn/tags/argo-workflow/</link>
    <description>Recent content in Argo-Workflow on Greenery&#39;s Blog Site</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 26 May 2024 00:58:41 +0800</lastBuildDate>
    <atom:link href="https://Greenery-S.github.io/zh-cn/tags/argo-workflow/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Argo Workflow 5</title>
      <link>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-5/</link>
      <pubDate>Sun, 26 May 2024 00:58:41 +0800</pubDate>
      <guid>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-5/</guid>
      <description>Argo Workflow (5) 1 Loops 编写工作流时，能够迭代一组输入是非常有用的，因为这就是 Argo Workflows 执行循环的方式。&#xA;有三种基本方法可以多次运行一个模板。&#xA;withSequence 迭代一个数字序列。 withItems 接受一个待处理的项目列表，可以是 纯的单个值，在模板中可以通过 {{item}} 使用 JSON 对象，其中每个元素可以通过它的键作为 {{item.key}} 来引用 withParam 接受一个 JSON 数组，并对其进行迭代——同样地，这些项目可以像 withItems 一样是对象。这非常强大，因为你可以在工作流的另一步生成 JSON，从而创建一个动态工作流。 withSequence 示例 apiVersion: argoproj.io/v1alpha1 kind: Workflow metadata: generateName: loop-sequence- spec: entrypoint: loop-sequence-example templates: - name: loop-sequence-example steps: - - name: hello-world-x5 template: hello-world withSequence: count: &amp;#34;5&amp;#34; - name: hello-world container: image: yky8/argosay:v2 command: [ &amp;#34;/usr/local/bin/argosay&amp;#34; ] args: [ &amp;#34;echo&amp;#34;,&amp;#34;hello world!&amp;#34; ] argo submit loop-withsequence.</description>
    </item>
    <item>
      <title>Argo Workflow 4</title>
      <link>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-4/</link>
      <pubDate>Sat, 25 May 2024 22:25:36 +0800</pubDate>
      <guid>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-4/</guid>
      <description>Argo Workflow (4) 1 Secrets Argo Workflow支持在workflow中使用Kubernetes的Secret。Secret是一种用来存储敏感信息的对象，比如密码、OAuth令牌等。Secret可以以明文或base64编码的形式存储在Etcd中。在workflow中使用Secret时，需要在workflow的spec中定义一个secrets字段，然后在workflow的template中使用{{workflow.spec.secrets}}引用。&#xA;先创建一个secret，然后在workflow中使用这个secret。&#xA;kubectl create secret generic my-secret --from-literal=mypassword=S00perS3cretPa55word -n argo # To run this example, first create the secret by running: # kubectl create secret generic my-secret --from-literal=mypassword=S00perS3cretPa55word apiVersion: argoproj.io/v1alpha1 kind: Workflow metadata: generateName: secret-example- spec: entrypoint: argosay # To access secrets as files, add a volume entry in spec.volumes[] and # then in the container template spec, add a mount using volumeMounts. volumes: - name: my-secret-vol secret: secretName: my-secret # name of an existing k8s secret templates: - name: argosay container: image: alpine:3.</description>
    </item>
    <item>
      <title>Argo Workflow 3</title>
      <link>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-3/</link>
      <pubDate>Sat, 25 May 2024 17:14:53 +0800</pubDate>
      <guid>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-3/</guid>
      <description>Argo Workflow (3) 1 Artifacts 在运行工作流时，步骤生成或使用工件是非常常见的情况。通常，一个步骤的输出工件可能会被后续步骤作为输入工件使用。&#xA;下面的工作流规范包含两个按顺序运行的步骤。第一个名为 generate-artifact 的步骤将使用 argosay 模板生成一个工件，该工件将被第二个名为 print-message 的步骤使用，print-message 将消费生成的工件。&#xA;apiVersion: argoproj.io/v1alpha1 kind: Workflow metadata: generateName: artifact-passing- spec: entrypoint: artifact-example templates: - name: artifact-example steps: - - name: generate-artifact template: argosay - - name: consume-artifact template: print-message arguments: artifacts: # bind message to the hello-art artifact # generated by the generate-artifact step - name: message from: &amp;#34;{{steps.generate-artifact.outputs.artifacts.hello-art}}&amp;#34; - name: argosay container: image: yky8/argosay:v2 # sh -c，你可以在其后面提供一个字符串， # 这个字符串将被 sh 作为一个完整的 shell 命令来执行 command: [sh, -c] # The tee command is used in Linux and Unix systems.</description>
    </item>
    <item>
      <title>Argo Workflow 2</title>
      <link>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-2/</link>
      <pubDate>Sat, 25 May 2024 14:30:03 +0800</pubDate>
      <guid>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-2/</guid>
      <description>Argo Workflow (2) 1 Steps 多步骤的工作流可以通过steps字段来定义。每个步骤都是一个独立的容器，可以并行执行。&#xA;apiVersion: argoproj.io/v1alpha1 kind: Workflow metadata: generateName: steps- spec: entrypoint: hello-hello-hello # This spec contains two templates: hello-hello-hello and whalesay templates: - name: hello-hello-hello # Instead of just running a container # This template has a sequence of steps steps: - - name: hello1 # hello1 is run before the following steps template: argosay arguments: parameters: - name: message value: &amp;#34;hello1&amp;#34; - - name: hello2a # double dash =&amp;gt; run after previous step template: argosay arguments: parameters: - name: message value: &amp;#34;hello2a&amp;#34; - name: hello2b # single dash =&amp;gt; run in parallel with previous step template: argosay arguments: parameters: - name: message value: &amp;#34;hello2b&amp;#34; # This is the same template as from the previous example - name: argosay inputs: parameters: - name: message container: image: yky8/argosay:v2 command: [ &amp;#34;/usr/local/bin/argosay&amp;#34; ] args: [ &amp;#34;echo&amp;#34;,&amp;#34;{{inputs.</description>
    </item>
    <item>
      <title>Argo Workflow 1</title>
      <link>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-1/</link>
      <pubDate>Sat, 25 May 2024 03:46:15 +0800</pubDate>
      <guid>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-1/</guid>
      <description>Argo Workflow (1) 大量例子在此: https://github.com/argoproj/argo-workflows/tree/main/examples 但是,由于docker/whalesay镜像不再支持,导致很多例子无法运行,需要自己构建一个镜像来替代它.&#xA;1 Argo CLI argo submit hello-world.yaml # submit a workflow spec to Kubernetes argo list # list current workflows argo get hello-world-xxx # get info about a specific workflow argo logs hello-world-xxx # print the logs from a workflow argo delete hello-world-xxx # delete workflow 用kubectl也可以, 都要指定namespace&#xA;2 Hello World apiVersion: argoproj.io/v1alpha1 kind: Workflow # new type of k8s spec metadata: generateName: hello-world- # name of the workflow spec spec: entrypoint: argosay # invoke the whalesay template templates: - name: argosay # name of the template container: image: yky8/argosay:v2 command: [&amp;#34;/usr/local/bin/argosay&amp;#34;] args: [&amp;#34;echo&amp;#34;, &amp;#34;hello world!</description>
    </item>
    <item>
      <title>Quick Start With Self Build Image</title>
      <link>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/quick-start-with-self-build-image/</link>
      <pubDate>Sat, 25 May 2024 02:17:44 +0800</pubDate>
      <guid>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/quick-start-with-self-build-image/</guid>
      <description>比较坎坷的 &amp;ldquo;Quick&amp;rdquo; Start 最近想复习一下argo workflow，于是打算从官方文档开始，按照文档的步骤一步步来。然而，事情并没有那么顺利。官方的 docker/whalesay 镜像在新的docker版本下不支持了,这导致数百个以此为基础的hello world示例都无法正常运行。于是我决定自己构建一个镜像，来替代官方的docker/whalesay镜像。&#xA;1 创建本地k8s集群 用miniKube创建一个本地的k8s集群，方便测试。&#xA;brew install minikube minikube start 2 下载argo workflow kubectl create namespace argo kubectl apply -n argo -f https://github.com/argoproj/argo-workflows/releases/download/v&amp;lt;&amp;lt;ARGO_WORKFLOWS_VERSION&amp;gt;&amp;gt;/quick-start-minimal.yaml 3 构建自己的镜像 Copy whalesay 的逻辑到 argosay 这个大概用法就是 argosay [command] [args], 然后根据command执行不同的逻辑。&#xA;如果command是空的，就输出&amp;quot;hello argo&amp;quot; 如果command是assert_contains，就在第二个参数中查找第三个参数 如果command是cat，就输出第二个参数的内容 如果command是echo，就输出第二个参数的内容 如果command是exit，就退出 如果command是sleep，就睡眠 如果command是sh，就执行第二个参数的shell命令 其他情况，就退出 # argosay #!/bin/sh set -eu case ${1:-} in &amp;#39;&amp;#39;) echo &amp;#34;hello argo&amp;#34; ;; assert_contains) grep -F &amp;#34;$3&amp;#34; &amp;#34;$2&amp;#34; ;; cat) cat &amp;#34;$2&amp;#34; ;; echo) case $# in 1) echo &amp;#34;hello argo&amp;#34; ;; 2) echo &amp;#34;$2&amp;#34; ;; 3) mkdir -p &amp;#34;$(dirname $3)&amp;#34; echo &amp;#34;$2&amp;#34; &amp;gt; &amp;#34;$3&amp;#34; sleep 0.</description>
    </item>
  </channel>
</rss>
