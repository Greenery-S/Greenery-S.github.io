<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Database on Greenery&#39;s Blog Site</title>
    <link>https://Greenery-S.github.io/zh-cn/tags/database/</link>
    <description>Recent content in Database on Greenery&#39;s Blog Site</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 22 May 2024 15:08:40 +0800</lastBuildDate>
    <atom:link href="https://Greenery-S.github.io/zh-cn/tags/database/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction to Clickhouse</title>
      <link>https://Greenery-S.github.io/zh-cn/posts/go/database/introduction-to-clickhouse/</link>
      <pubDate>Wed, 22 May 2024 15:08:40 +0800</pubDate>
      <guid>https://Greenery-S.github.io/zh-cn/posts/go/database/introduction-to-clickhouse/</guid>
      <description>ClickHouse code: https://github.com/Greenery-S/go-database/tree/master/clickhouse&#xA;1 简介 ClickHouse是一个用于联机分析（OLAP）的列式数据库管理系统（DBMS）。&#xA;在传统的行式数据库系统（MySQL、SQL Server）中，处于同一行中的数据总是被物理的存储在一起。在列式数据库系统（ClickHouse、HBase、Druid）中，来自同一列的数据被存储在一起。&#xA;OLAP场景的关键特征 (基于埋点数据进行业务的统计分析):&#xA;绝大多数是读请求，已添加到数据库的数据不能修改 宽表，即每个表包含着大量的列 对于读取，从数据库中提取相当多的行，但只提取列的一小部分 查询相对较少（通常每台服务器每秒查询数百次或更少） 对于简单查询，允许延迟大约50毫秒 列中的数据相对较小：数字和短字符串（例如，每个URL 60个字节） 处理单个查询时需要高吞吐量（每台服务器每秒可达数十亿行） 事务不是必须的 2 使用方法 它的SQL语法和MySQL类似，但是有一些不同之处。&#xA;创建数据库,表：&#xA;create database test; -- json type is experimental feature set allow_experimental_object_type = 1; CREATE TABLE test.user ( user_id UInt32 comment &amp;#39;用户ID&amp;#39;, -- 用户ID name String comment &amp;#39;用户姓名&amp;#39;, -- 用户名 create_time DateTime comment &amp;#39;注册时间&amp;#39;, -- 注册时间 extra Json comment &amp;#39;附加信息&amp;#39; -- 附加信息,json可自由扩充字段 ) ENGINE = MergeTree() PRIMARY KEY (create_time); 查询数据:</description>
    </item>
    <item>
      <title>Mysql Optimization</title>
      <link>https://Greenery-S.github.io/zh-cn/posts/go/database/mysql-optimization/</link>
      <pubDate>Sun, 19 May 2024 21:16:35 +0800</pubDate>
      <guid>https://Greenery-S.github.io/zh-cn/posts/go/database/mysql-optimization/</guid>
      <description>MySQL性能调优 code: https://github.com/Greenery-S/go-database/tree/master/mysql&#xA;实战建议 写sql时一律使用小写&#xA;建表时先判断表是否已存在 if not exists&#xA;所有的列和表都加comment&#xA;字符串长度比较短时尽量使用char，定长有利于内存对齐，读写性能更好，而varchar字段频繁修改时容易产生内存碎片&#xA;满足需求的前提下尽量使用短的数据类型，如tinyint vs int, float vs double, date vs datetime&#xA;CREATE TABLE if not exists `student` ( `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &amp;#39;主键自增id&amp;#39;, `name` char(10) NOT NULL COMMENT &amp;#39;姓名&amp;#39;, `province` char(6) NOT NULL COMMENT &amp;#39;省&amp;#39;, `city` char(10) NOT NULL COMMENT &amp;#39;城市&amp;#39;, `addr` varchar(100) DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;地址&amp;#39;, `score` float NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;考试成绩&amp;#39;, `enrollment` date NOT NULL COMMENT &amp;#39;入学时间&amp;#39;, PRIMARY KEY (`id`), UNIQUE KEY `idx_name` (`name`), KEY `idx_location` (`province`,`city`) ) ENGINE=InnoDB AUTO_INCREMENT=100020 DEFAULT CHARSET=utf8 COMMENT=&amp;#39;学员基本信息&amp;#39; 2 null default null有别于default &#39;&#39;和default 0</description>
    </item>
  </channel>
</rss>
