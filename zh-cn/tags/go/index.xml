<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Greenery&#39;s Blog Site</title>
    <link>https://Greenery-S.github.io/zh-cn/tags/go/</link>
    <description>Recent content in Go on Greenery&#39;s Blog Site</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 22 May 2024 22:15:28 +0800</lastBuildDate>
    <atom:link href="https://Greenery-S.github.io/zh-cn/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Open Compare to Openfile</title>
      <link>https://Greenery-S.github.io/zh-cn/posts/go/memo/open-compare-to-openfile/</link>
      <pubDate>Wed, 22 May 2024 22:15:28 +0800</pubDate>
      <guid>https://Greenery-S.github.io/zh-cn/posts/go/memo/open-compare-to-openfile/</guid>
      <description>os.Open 与 os.OpenFile 1 差异 在 Go 语言中，os.Open 和 os.OpenFile 都是用于打开文件的函数，但它们的使用场景和功能有所不同。&#xA;os.Open：这是一个较为简单的打开文件的函数，它只接受一个参数，即要打开的文件的路径。它以只读模式打开文件，如果文件不存在，它会返回一个错误。 file, err := os.Open(&amp;#34;example.txt&amp;#34;) if err != nil { log.Fatal(err) } defer file.Close() os.OpenFile：这是一个更为强大的打开文件的函数，它接受三个参数：文件路径、打开文件的模式和文件权限。它可以以各种模式（如只读、只写、读写、追加、创建等）打开文件，如果文件不存在，它可以创建一个新文件。 file, err := os.OpenFile(&amp;#34;example.txt&amp;#34;, os.O_CREATE|os.O_WRONLY, 0644) if err != nil { log.Fatal(err) } defer file.Close() 在这个例子中，os.OpenFile 以写入模式打开文件，如果文件不存在，它会创建一个新文件。文件的权限被设置为 0644，这意味着文件所有者可以读写文件，而其他用户只能读取文件。&#xA;总的来说，如果你只需要以只读模式打开文件，可以使用 os.Open。如果你需要更多的控制（如设置文件权限，或以不同的模式打开文件），则应使用 os.OpenFile。&#xA;2 模式与权限 当你在 Go 语言中使用 os.OpenFile 函数打开或创建文件时，你需要指定两个参数：模式（flag）和权限（permission）。&#xA;模式（flag） 这个参数决定了你如何打开文件。Go 语言提供了一些预定义的常量来设置这个参数：&#xA;os.O_RDONLY：以只读模式打开文件。 os.O_WRONLY：以只写模式打开文件。 os.O_RDWR：以读写模式打开文件。 os.O_APPEND：在写入数据时，将数据追加到文件的末尾，而不是覆盖现有的内容。 os.O_CREATE：如果文件不存在，就创建一个新文件。 os.O_TRUNC：如果文件已经存在，就先清空文件的内容，然后再写入数据。 这些常量可以通过逻辑 OR 运算符（|）组合在一起，以设置多个模式。例如，os.O_CREATE|os.O_WRONLY 会以只写模式打开文件，如果文件不存在，就创建一个新文件。&#xA;权限（permission） 这个参数决定了文件的权限。它是一个八进制数，通常由三个数字组成。每个数字分别代表文件所有者、文件所属的用户组和其他用户的权限。&#xA;第一个数字代表文件所有者的权限。 第二个数字代表文件所属的用户组的权限。 第三个数字代表其他用户的权限。 每个数字都是 0 到 7 的整数，代表以下三种权限的组合：</description>
    </item>
    <item>
      <title>Orm Realized by Reflect</title>
      <link>https://Greenery-S.github.io/zh-cn/posts/go/database/orm-realized-by-reflect/</link>
      <pubDate>Sun, 19 May 2024 21:50:59 +0800</pubDate>
      <guid>https://Greenery-S.github.io/zh-cn/posts/go/database/orm-realized-by-reflect/</guid>
      <description>ORM核心技术—反射 教程,反射大全: https://zhuanlan.zhihu.com/p/411313885&#xA;code: https://github.com/Greenery-S/go-database/tree/master/orm&#xA;1 反射 什么是反射&#xA;在运行期间（不是编译期间）探知对象的类型信息和内存结构、更新变量、调用它们的方法 何时使用反射&#xA;函数的参数类型是interface{}，需要在运行时对原始类型进行判断，针对不同的类型采取不同的处理方式。比如json.Marshal(v interface{})&#xA;在运行时根据某些条件动态决定调用哪个函数，比如根据配置文件执行相应的算子函数&#xA;建议在初始化环节使用, 频繁调用的api不建议使用&#xA;2 使用例子 3 反射的弊端 代码难以阅读，难以维护 编译期间不能发现类型错误，覆盖测试难度很大，有些bug需要到线上运行很长时间才能发现，可能会造成严重用后果 反射性能很差，通常比正常代码慢一到两个数量级。在对性能要求很高，或大量反复调用的代码块里建议不要使用反射 4 反射的基础数据类型 reflact.Type – 通过reflect.Type获取类型相关的信息&#xA;type Type interface { MethodByName(string) (Method, bool) //根据名称获取方法 Name() string //获取结构体名称 PkgPath() string //包路径 Size() uintptr //占用内存的大小 Kind() Kind //数据类型 Implements(u Type) bool //判断是否实现了某接口 Field(i int) StructField //第i个成员 FieldByIndex(index []int) StructField //根据index路径获取嵌套成员 FieldByName(name string) (StructField, bool) //根据名称获取成员 Len() int //容器的长度 NumIn() int //输出参数的个数 NumOut() int //返回参数的个数 } reflect.</description>
    </item>
  </channel>
</rss>
