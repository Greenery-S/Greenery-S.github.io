<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hash Function on Greenery&#39;s Blog Site</title>
    <link>https://Greenery-S.github.io/zh-cn/tags/hash-function/</link>
    <description>Recent content in Hash Function on Greenery&#39;s Blog Site</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 22 May 2024 23:29:47 +0800</lastBuildDate>
    <atom:link href="https://Greenery-S.github.io/zh-cn/tags/hash-function/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hash Function vs Symmetric Encryption</title>
      <link>https://Greenery-S.github.io/zh-cn/posts/go/encryption/hash-function-vs-symmetric-encryption/</link>
      <pubDate>Wed, 22 May 2024 23:29:47 +0800</pubDate>
      <guid>https://Greenery-S.github.io/zh-cn/posts/go/encryption/hash-function-vs-symmetric-encryption/</guid>
      <description>对称加密和散列算法的核心区别 1 对称加密 目的: 保护数据的机密性，使其无法被未授权方读取。&#xA;工作原理: 使用相同的密钥对数据进行加密和解密。&#xA;特点:&#xA;可逆性：可以使用相同的密钥解密密文得到原始数据。 密钥管理：需要安全地共享密钥，否则数据无法解密。 应用场景: 安全通信、数据存储、数字签名等。&#xA;2 散列算法 目的: 验证数据的完整性和真实性。&#xA;工作原理: 将任意长度的输入转换为固定长度的哈希值。&#xA;特点:&#xA;单向性：无法从哈希值推算出原始数据。 抗碰撞性：难以找到两个不同的输入产生相同的哈希值。 完整性：数据的任何修改都会导致哈希值改变。 应用场景: 文件完整性校验、密码存储、数字签名等。&#xA;3 总结 特性 对称加密 散列算法 目的 保密性 完整性和真实性 可逆性 可逆 不可逆 密钥管理 需要密钥管理 无需密钥管理 输出 加密数据 哈希值 对称加密和散列算法都是重要的密码学技术，用于保护数据的安全。它们在工作原理、应用场景和安全性等方面都有所不同。选择哪种技术取决于具体的应用需求。</description>
    </item>
  </channel>
</rss>
