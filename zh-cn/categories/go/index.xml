<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Greenery&#39;s Blog Site</title>
    <link>https://Greenery-S.github.io/zh-cn/categories/go/</link>
    <description>Recent content in Go on Greenery&#39;s Blog Site</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 19 May 2024 22:11:16 +0800</lastBuildDate>
    <atom:link href="https://Greenery-S.github.io/zh-cn/categories/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction to Redis</title>
      <link>https://Greenery-S.github.io/zh-cn/posts/go/database/introduction-to-redis/</link>
      <pubDate>Sun, 19 May 2024 22:11:16 +0800</pubDate>
      <guid>https://Greenery-S.github.io/zh-cn/posts/go/database/introduction-to-redis/</guid>
      <description>Redis code: https://github.com/Greenery-S/go-database/tree/master/redis&#xA;1 简介 Redis是一个基于内存的数据存储系统。 基于内存，所以快，是Mysql的10到100倍。 为防止数据丢失，数据会周期性地持久化到磁盘。 Redis跟业务程序是分开部署的，所以Redis可以充当分布式缓存。 支持丰富的数据类型：字符串（String）、哈希（Hash）、列表（List）、集合（Set）和有序集合（Sorted Set）。 支持发布/订阅模式，发布者将消息发送到指定的频道，订阅者可以接收和处理这些消息。这种模式常应用于实时通信、事件驱动系统和消息队列等场景。 Redis事务太鸡肋，不建议使用。 2 发布/订阅模式 Subscriber启动之前，Channel里的消息接收不到。 广播效果. 3 分布式锁 SetNX(ctx context.Context, key string, value interface{}, expiration time.Duration) *BoolCmd SetNX如果key不存在则返回true，写入key，并设置过期时间 秒杀iphone代码示例：&#xA;func TryLock(rc *redis.Client, key string, expire time.Duration) bool { cmd := rc.SetNX(context.Background(), key, &amp;#34;anything is ok&amp;#34;, expire) if err := cmd.Err(); err == nil { return cmd.Val() } else { return false } } func ReleaseLock(rc *redis.Client, key string) { rc.</description>
    </item>
    <item>
      <title>Orm Realized by Reflect</title>
      <link>https://Greenery-S.github.io/zh-cn/posts/go/database/orm-realized-by-reflect/</link>
      <pubDate>Sun, 19 May 2024 21:50:59 +0800</pubDate>
      <guid>https://Greenery-S.github.io/zh-cn/posts/go/database/orm-realized-by-reflect/</guid>
      <description>ORM核心技术—反射 教程,反射大全: https://zhuanlan.zhihu.com/p/411313885&#xA;code: https://github.com/Greenery-S/go-database/tree/master/orm&#xA;1 反射 什么是反射&#xA;在运行期间（不是编译期间）探知对象的类型信息和内存结构、更新变量、调用它们的方法 何时使用反射&#xA;函数的参数类型是interface{}，需要在运行时对原始类型进行判断，针对不同的类型采取不同的处理方式。比如json.Marshal(v interface{})&#xA;在运行时根据某些条件动态决定调用哪个函数，比如根据配置文件执行相应的算子函数&#xA;建议在初始化环节使用, 频繁调用的api不建议使用&#xA;2 使用例子 3 反射的弊端 代码难以阅读，难以维护 编译期间不能发现类型错误，覆盖测试难度很大，有些bug需要到线上运行很长时间才能发现，可能会造成严重用后果 反射性能很差，通常比正常代码慢一到两个数量级。在对性能要求很高，或大量反复调用的代码块里建议不要使用反射 4 反射的基础数据类型 reflact.Type – 通过reflect.Type获取类型相关的信息&#xA;type Type interface { MethodByName(string) (Method, bool) //根据名称获取方法 Name() string //获取结构体名称 PkgPath() string //包路径 Size() uintptr //占用内存的大小 Kind() Kind //数据类型 Implements(u Type) bool //判断是否实现了某接口 Field(i int) StructField //第i个成员 FieldByIndex(index []int) StructField //根据index路径获取嵌套成员 FieldByName(name string) (StructField, bool) //根据名称获取成员 Len() int //容器的长度 NumIn() int //输出参数的个数 NumOut() int //返回参数的个数 } reflect.</description>
    </item>
    <item>
      <title>Mysql Optimization</title>
      <link>https://Greenery-S.github.io/zh-cn/posts/go/database/mysql-optimization/</link>
      <pubDate>Sun, 19 May 2024 21:16:35 +0800</pubDate>
      <guid>https://Greenery-S.github.io/zh-cn/posts/go/database/mysql-optimization/</guid>
      <description>MySQL性能调优 code: https://github.com/Greenery-S/go-database/tree/master/mysql&#xA;实战建议 写sql时一律使用小写&#xA;建表时先判断表是否已存在 if not exists&#xA;所有的列和表都加comment&#xA;字符串长度比较短时尽量使用char，定长有利于内存对齐，读写性能更好，而varchar字段频繁修改时容易产生内存碎片&#xA;满足需求的前提下尽量使用短的数据类型，如tinyint vs int, float vs double, date vs datetime&#xA;CREATE TABLE if not exists `student` ( `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &amp;#39;主键自增id&amp;#39;, `name` char(10) NOT NULL COMMENT &amp;#39;姓名&amp;#39;, `province` char(6) NOT NULL COMMENT &amp;#39;省&amp;#39;, `city` char(10) NOT NULL COMMENT &amp;#39;城市&amp;#39;, `addr` varchar(100) DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;地址&amp;#39;, `score` float NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;考试成绩&amp;#39;, `enrollment` date NOT NULL COMMENT &amp;#39;入学时间&amp;#39;, PRIMARY KEY (`id`), UNIQUE KEY `idx_name` (`name`), KEY `idx_location` (`province`,`city`) ) ENGINE=InnoDB AUTO_INCREMENT=100020 DEFAULT CHARSET=utf8 COMMENT=&amp;#39;学员基本信息&amp;#39; 2 null default null有别于default &#39;&#39;和default 0</description>
    </item>
    <item>
      <title>Two-Year Old Gopher</title>
      <link>https://Greenery-S.github.io/zh-cn/posts/go/two-year-old-gopher/</link>
      <pubDate>Sat, 18 May 2024 20:49:18 +0800</pubDate>
      <guid>https://Greenery-S.github.io/zh-cn/posts/go/two-year-old-gopher/</guid>
      <description>一个2年的go语言使用者 我从20222年10月开始接触go语言,到现在已经有2年了. 接触了go语言的我,对go语言有了一定的了解,并且在工作中也有了一定的实践.我想分享一下我对go语言的一些看法.&#xA;为什么学go? 我当时正在选择一门技术来让我在中国的互联网行业有一席之地.当时疫情刚结束,当年毕业的毕业生都说java就业形势不好,工作难找.大三的我选择了留学,离毕业还有2年,非常迷茫.我就去问我的老程序员伯伯,他让我试试golang,他们也在用.&#xA;漫漫学习路 于是我就开始学习这门语言.我必须要感谢他,仅从初级程序员学习来说,go非常舒服.go和rust作为新兴语言,都有着非常清晰的学习路径和几乎不存在的历史包袱.这对于初学者来说是非常友好的.&#xA;于是我学习了go的语法,go的并发,一些数据组件的go sdk,以及go的一些框架.我发现go的并发非常好用,go的sdk也非常丰富,go的框架也非常多.我也在工作中使用go写了一些小工具,也写了一些小服务.&#xA;我还参加了goCN的线下活动,在北京和go学友面基.那是疫情之后的第一届,在北京举行,前一天我还在拉萨,脑子一热,一个晚上我就赶到了北京,还要有江达哥收留,我在北京的这几天非常开心.&#xA;go语言的明星项目是docker和k8s,这两个项目都是用go语言写的.这两个项目的成功也让go语言在云计算领域有了一席之地,成功在老牌强劲语言java和c++的领域站稳了脚跟.&#xA;我后来业学习了云原生技术,但是一直在学习中,我觉得我要系统的学习它,因为我着实入了这一行.go语言成就了我.我在新加坡成为了TikTok Cloud infra的实习生,我也在这里学习了很多东西.&#xA;道阻且长 来到新加坡,并以go语言作为工作内容,这是对我最好的安排.我也许还要继续精进自己的go语言技术,也许还要学习更多的云原生技术,也许还要学习更多的东西.但是我相信,我会一直走下去,直到我不再喜欢这个行业.&#xA;当然,成为实习生和成为正式员工还是有很大的努力需要做出.介于形势,我需要同时学习leetcode算法,通用go后端技术,k8s为核心的云原生技术.我也许还要学习其他语言技术,比如系统学习cpp或pytorch,来保证我的就业广度.&#xA;这个专题会有什么? 目前我想把我之前做过的一些通用的go后端知识点都放在这个专题.这个go专题近期至少会有以下内容:&#xA;数据库专题 消息队列专题 安全与加密专题 网络编程专题 练手项目: 博客系统: 其实是本网站的前身,基于gin框架的单体,全部组件包括mysql和redis都是容器化的.鉴权部分设计了双token机制. 维护成本比较高,于是转向了hugo. 抽奖系统: 这里会是高并发技巧的融合练习. gpc框架: 这是一个基于go的rpc框架,我会在这里实现一个简单的rpc框架. 分布式搜索系统: 一个比较高级的练手项目,会涉及到分布式系统的一些知识. go语言的基础语法和go语言的并发可能近期不会有,因为他们又是一个很大的专题,我需要时间来整理.</description>
    </item>
  </channel>
</rss>
