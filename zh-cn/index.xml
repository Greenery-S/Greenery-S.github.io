<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Greenery&#39;s Blog Site</title>
    <link>https://Greenery-S.github.io/zh-cn/</link>
    <description>Recent content on Greenery&#39;s Blog Site</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 04 Jun 2024 00:31:42 +0800</lastBuildDate>
    <atom:link href="https://Greenery-S.github.io/zh-cn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Setup Local Pytorch</title>
      <link>https://Greenery-S.github.io/zh-cn/posts/pytorch/setup-local-pytorch/</link>
      <pubDate>Tue, 04 Jun 2024 00:31:42 +0800</pubDate>
      <guid>https://Greenery-S.github.io/zh-cn/posts/pytorch/setup-local-pytorch/</guid>
      <description>本地建设pytorch环境 1. 安装miniconda 可以使用pycharm自动安装,也可以手动安装.&#xA;检查是不是有jupyter notebook 和 jupyter lab&#xA;如果上面的都ok,那么就可以安装pytorch了.&#xA;2. 创建一个新的conda环境 conda create -n torch-gpu python=3.9 conda activate torch-gpu 3. 安装pytorch 到官网下载pytorch的安装命令 https://pytorch.org/ 可以是conda/pip的命令&#xA;4. 将kernel注册到jupyter lab conda install ipykernel sudo python -m ipykernel install --name=torch-gpu 5. 打开jupyter lab jupyter lab 6. 测试pytorch (apple silicon m1) 选取注册的kernel,然后运行代码:&#xA;test1.py&#xA;import torch import math # this ensures that the current MacOS version is at least 12.3+ print(torch.backends.mps.is_available()) # this ensures that the current current PyTorch installation was built with MPS activated.</description>
    </item>
    <item>
      <title>Fundamental</title>
      <link>https://Greenery-S.github.io/zh-cn/posts/pytorch/review/fundamental/</link>
      <pubDate>Tue, 04 Jun 2024 00:05:06 +0800</pubDate>
      <guid>https://Greenery-S.github.io/zh-cn/posts/pytorch/review/fundamental/</guid>
      <description>fundamentals import torch torch.__version__ &#39;2.4.0.dev20240602&#39; 1 Tensor #TODO: 读文档 torch.Tensor&#xA;1.1 scalar scalar = torch.tensor(9) scalar tensor(9) scalar.ndim, scalar.ndimension() (0, 0) scalar.item() 9 1.2 vector vector = torch.tensor([9, 9, 9]) vector tensor([9, 9, 9]) vector.ndim 1 vector.shape torch.Size([3]) 1.3 matrix matrix = torch.tensor([[9, 9, 9], [9, 9, 9]]) matrix tensor([[9, 9, 9], [9, 9, 9]]) matrix.ndim 2 matrix.shape torch.Size([2, 3]) matrix.size() torch.Size([2, 3]) 1.4 tensor tensor = torch.tensor( [ #dim0, 这对括号里面有两个matrix [ #dim1, 这对括号里面有三个vector [ #dim2, 这对括号里面有三个scalar 1, 2, 3, ], [1, 2, 3], [1, 2, 3] ], [ #dim1 [1, 2, 3], [1, 2, 3], [1, 2, 3] ] ] ) tensor tensor([[[1, 2, 3], [1, 2, 3], [1, 2, 3]], [[1, 2, 3], [1, 2, 3], [1, 2, 3]]]) tensor.</description>
    </item>
    <item>
      <title>The Road to Next Life Stage</title>
      <link>https://Greenery-S.github.io/zh-cn/posts/life/the-road-to-next-life-stage/</link>
      <pubDate>Fri, 31 May 2024 12:42:42 +0800</pubDate>
      <guid>https://Greenery-S.github.io/zh-cn/posts/life/the-road-to-next-life-stage/</guid>
      <description>通向下一个阶段的路 最近缺乏动力,感觉自己的生活失去了方向.我在身心上都遇到了一些挑战或抉择.我需要重新审视自己的生活,并为未来做出一些计划.&#xA;1 在人生的路口,我有什么选择? 我的NUS master也即将结束,我需要决定未来的方向.我有几个选择:&#xA;留在新加坡,找一份工作: 在新加坡,我有非常满意的实习,我有希望留在tt公司转正.当然能否转正,这是取决于当地政策,部门需求和个人能力.主要的卡点在于当地政策,我需要和leader double check EP是否有名额. 其他的新加坡公司,我感觉机会比较少,主要是技术栈的适配上,还有腾讯和米哈游可以看看.腾讯相关的就是运维开发,需要再复习一下k8s的东西.米哈游看上去是后端开发,需要继续学习go后端的内容. 回国,找一份工作: 国内的互联网公司稳定性比较缺乏. 国内的量化公司的it岗可以考虑,k8s的AI集群建设方面. 国内家乡找躺平工作,银行和小厂都是使用JAVA. 继续读博 港新的计算机博士,DL/RL方向可以看看,主要还是要把python/pytorch系统学起来. 2 面对这些选择,我该做些什么? 在技术层面我大概还要做到这些方面:&#xA;Golang的后端技术学习完, 还有我自己定下的那部分知识. python和pytorch需要再重拾一下,我购买了udmey的课程. k8s我也寻得了一些资料&amp;hellip;不看浪费.需要再看一下. cpp我觉得周期太长了,也没有什么实际的项目,暂时放一放. 摊子不能铺太大.我需要把自己的精力集中在一两个方向上.我需要做出一些选择,并且坚持下去.&#xA;3 自己的身体健康 我最近的身体状况也不是很好.六月中我会回一趟中国,做一些医学检查.&#xA;我需要多运动,多锻炼.每周可以去参加一次羽毛球,早睡早起,多喝水,多吃水果.我需要保持好的身体状态,才能更好的工作和学习.</description>
    </item>
    <item>
      <title>Argo Workflow 7</title>
      <link>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-7/</link>
      <pubDate>Sun, 26 May 2024 22:52:54 +0800</pubDate>
      <guid>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-7/</guid>
      <description>Argo Workflow (7) Walk through 章节的相关特性还剩下:&#xA;Kubernetes Resource https://argo-workflows.readthedocs.io/en/latest/walk-through/kubernetes-resources/ Daemon Container Sidecar Container Custom Template Variables Continuous Integration Example 下次有机会再总结. 目前学的这些够用了.</description>
    </item>
    <item>
      <title>Argo Workflow 6</title>
      <link>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-6/</link>
      <pubDate>Sun, 26 May 2024 14:36:26 +0800</pubDate>
      <guid>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-6/</guid>
      <description>Argo Workflow (6) 1 Conditionals 支持条件执行.语法是由 govaluate 实现的,它提供了对复杂语法的支持.请参见以下示例:&#xA;apiVersion: argoproj.io/v1alpha1 kind: Workflow metadata: generateName: coinflip- spec: entrypoint: coinflip templates: - name: coinflip steps: # flip a coin - - name: flip-coin template: flip-coin # evaluate the result in parallel - - name: heads template: heads # call heads template if &amp;#34;heads&amp;#34; when: &amp;#34;{{steps.flip-coin.outputs.result}} == heads&amp;#34; - name: tails template: tails # call tails template if &amp;#34;tails&amp;#34; when: &amp;#34;{{steps.flip-coin.outputs.result}} == tails&amp;#34; - - name: flip-again template: flip-coin - - name: complex-condition template: heads-tails-or-twice-tails # call heads template if first flip was &amp;#34;heads&amp;#34; and second was &amp;#34;tails&amp;#34; OR both were &amp;#34;tails&amp;#34; when: &amp;gt;- ( {{steps.</description>
    </item>
    <item>
      <title>Argo Workflow 5</title>
      <link>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-5/</link>
      <pubDate>Sun, 26 May 2024 00:58:41 +0800</pubDate>
      <guid>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-5/</guid>
      <description>Argo Workflow (5) 1 Loops 编写工作流时，能够迭代一组输入是非常有用的，因为这就是 Argo Workflows 执行循环的方式。&#xA;有三种基本方法可以多次运行一个模板。&#xA;withSequence 迭代一个数字序列。 withItems 接受一个待处理的项目列表，可以是 纯的单个值，在模板中可以通过 {{item}} 使用 JSON 对象，其中每个元素可以通过它的键作为 {{item.key}} 来引用 withParam 接受一个 JSON 数组，并对其进行迭代——同样地，这些项目可以像 withItems 一样是对象。这非常强大，因为你可以在工作流的另一步生成 JSON，从而创建一个动态工作流。 withSequence 示例 apiVersion: argoproj.io/v1alpha1 kind: Workflow metadata: generateName: loop-sequence- spec: entrypoint: loop-sequence-example templates: - name: loop-sequence-example steps: - - name: hello-world-x5 template: hello-world withSequence: count: &amp;#34;5&amp;#34; - name: hello-world container: image: yky8/argosay:v2 command: [ &amp;#34;/usr/local/bin/argosay&amp;#34; ] args: [ &amp;#34;echo&amp;#34;,&amp;#34;hello world!&amp;#34; ] argo submit loop-withsequence.</description>
    </item>
    <item>
      <title>Argo Workflow 4</title>
      <link>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-4/</link>
      <pubDate>Sat, 25 May 2024 22:25:36 +0800</pubDate>
      <guid>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-4/</guid>
      <description>Argo Workflow (4) 1 Secrets Argo Workflow支持在workflow中使用Kubernetes的Secret。Secret是一种用来存储敏感信息的对象，比如密码、OAuth令牌等。Secret可以以明文或base64编码的形式存储在Etcd中。在workflow中使用Secret时，需要在workflow的spec中定义一个secrets字段，然后在workflow的template中使用{{workflow.spec.secrets}}引用。&#xA;先创建一个secret，然后在workflow中使用这个secret。&#xA;kubectl create secret generic my-secret --from-literal=mypassword=S00perS3cretPa55word -n argo # To run this example, first create the secret by running: # kubectl create secret generic my-secret --from-literal=mypassword=S00perS3cretPa55word apiVersion: argoproj.io/v1alpha1 kind: Workflow metadata: generateName: secret-example- spec: entrypoint: argosay # To access secrets as files, add a volume entry in spec.volumes[] and # then in the container template spec, add a mount using volumeMounts. volumes: - name: my-secret-vol secret: secretName: my-secret # name of an existing k8s secret templates: - name: argosay container: image: alpine:3.</description>
    </item>
    <item>
      <title>Argo Workflow 3</title>
      <link>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-3/</link>
      <pubDate>Sat, 25 May 2024 17:14:53 +0800</pubDate>
      <guid>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-3/</guid>
      <description>Argo Workflow (3) 1 Artifacts 在运行工作流时，步骤生成或使用工件是非常常见的情况。通常，一个步骤的输出工件可能会被后续步骤作为输入工件使用。&#xA;下面的工作流规范包含两个按顺序运行的步骤。第一个名为 generate-artifact 的步骤将使用 argosay 模板生成一个工件，该工件将被第二个名为 print-message 的步骤使用，print-message 将消费生成的工件。&#xA;apiVersion: argoproj.io/v1alpha1 kind: Workflow metadata: generateName: artifact-passing- spec: entrypoint: artifact-example templates: - name: artifact-example steps: - - name: generate-artifact template: argosay - - name: consume-artifact template: print-message arguments: artifacts: # bind message to the hello-art artifact # generated by the generate-artifact step - name: message from: &amp;#34;{{steps.generate-artifact.outputs.artifacts.hello-art}}&amp;#34; - name: argosay container: image: yky8/argosay:v2 # sh -c，你可以在其后面提供一个字符串， # 这个字符串将被 sh 作为一个完整的 shell 命令来执行 command: [sh, -c] # The tee command is used in Linux and Unix systems.</description>
    </item>
    <item>
      <title>Argo Workflow 2</title>
      <link>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-2/</link>
      <pubDate>Sat, 25 May 2024 14:30:03 +0800</pubDate>
      <guid>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-2/</guid>
      <description>Argo Workflow (2) 1 Steps 多步骤的工作流可以通过steps字段来定义。每个步骤都是一个独立的容器，可以并行执行。&#xA;apiVersion: argoproj.io/v1alpha1 kind: Workflow metadata: generateName: steps- spec: entrypoint: hello-hello-hello # This spec contains two templates: hello-hello-hello and whalesay templates: - name: hello-hello-hello # Instead of just running a container # This template has a sequence of steps steps: - - name: hello1 # hello1 is run before the following steps template: argosay arguments: parameters: - name: message value: &amp;#34;hello1&amp;#34; - - name: hello2a # double dash =&amp;gt; run after previous step template: argosay arguments: parameters: - name: message value: &amp;#34;hello2a&amp;#34; - name: hello2b # single dash =&amp;gt; run in parallel with previous step template: argosay arguments: parameters: - name: message value: &amp;#34;hello2b&amp;#34; # This is the same template as from the previous example - name: argosay inputs: parameters: - name: message container: image: yky8/argosay:v2 command: [ &amp;#34;/usr/local/bin/argosay&amp;#34; ] args: [ &amp;#34;echo&amp;#34;,&amp;#34;{{inputs.</description>
    </item>
    <item>
      <title>Argo Workflow 1</title>
      <link>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-1/</link>
      <pubDate>Sat, 25 May 2024 03:46:15 +0800</pubDate>
      <guid>https://Greenery-S.github.io/zh-cn/posts/devops/argo-workflow/argo-workflow-1/</guid>
      <description>Argo Workflow (1) 大量例子在此: https://github.com/argoproj/argo-workflows/tree/main/examples 但是,由于docker/whalesay镜像不再支持,导致很多例子无法运行,需要自己构建一个镜像来替代它.&#xA;1 Argo CLI argo submit hello-world.yaml # submit a workflow spec to Kubernetes argo list # list current workflows argo get hello-world-xxx # get info about a specific workflow argo logs hello-world-xxx # print the logs from a workflow argo delete hello-world-xxx # delete workflow 用kubectl也可以, 都要指定namespace&#xA;2 Hello World apiVersion: argoproj.io/v1alpha1 kind: Workflow # new type of k8s spec metadata: generateName: hello-world- # name of the workflow spec spec: entrypoint: argosay # invoke the whalesay template templates: - name: argosay # name of the template container: image: yky8/argosay:v2 command: [&amp;#34;/usr/local/bin/argosay&amp;#34;] args: [&amp;#34;echo&amp;#34;, &amp;#34;hello world!</description>
    </item>
  </channel>
</rss>
