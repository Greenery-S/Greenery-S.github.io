<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Greenery&#39;s Blog Site</title>
        <link>https://Greenery-S.github.io/posts/</link>
        <description>Recent content in Posts on Greenery&#39;s Blog Site</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sun, 26 May 2024 00:58:41 +0800</lastBuildDate>
        <atom:link href="https://Greenery-S.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Argo Workflow 5</title>
            <link>https://Greenery-S.github.io/posts/devops/argo-workflow/argo-workflow-5/</link>
            <pubDate>Sun, 26 May 2024 00:58:41 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/posts/devops/argo-workflow/argo-workflow-5/</guid>
            <description>Argo Workflow (5) 1 Loops When writing workflows, it is often useful to iterate over a set of inputs. This is how Argo Workflows handle looping.
There are three basic ways to run a template multiple times:
withSequence iterates over a sequence of numbers. withItems accepts a list of items to process, which can be: Plain single values, accessible via {{item}} in the template. JSON objects, where each element can be referenced by its key as {{item.</description>
            <content type="html"><![CDATA[<h1 id="argo-workflow-5">Argo Workflow (5)</h1>
<h2 id="1-loops">1 Loops</h2>
<p>When writing workflows, it is often useful to iterate over a set of inputs. This is how Argo Workflows handle looping.</p>
<p>There are three basic ways to run a template multiple times:</p>
<ol>
<li><code>withSequence</code> iterates over a sequence of numbers.</li>
<li><code>withItems</code> accepts a list of items to process, which can be:
<ul>
<li>Plain single values, accessible via <code>{{item}}</code> in the template.</li>
<li>JSON objects, where each element can be referenced by its key as <code>{{item.key}}</code>.</li>
</ul>
</li>
<li><code>withParam</code> accepts a JSON array and iterates over it—these items can also be objects like in <code>withItems</code>. This is very powerful because you can generate JSON in another step of the workflow, creating a dynamic workflow.</li>
</ol>
<h3 id="withsequence-example"><code>withSequence</code> Example</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">loop-sequence-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">loop-sequence-example</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">loop-sequence-example</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>           - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">hello-world-x5</span>
</span></span><span style="display:flex;"><span>               <span style="color:#f92672">template</span>: <span style="color:#ae81ff">hello-world</span>
</span></span><span style="display:flex;"><span>               <span style="color:#f92672">withSequence</span>:
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">count</span>: <span style="color:#e6db74">&#34;5&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">hello-world</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>           <span style="color:#f92672">image</span>: <span style="color:#ae81ff">yky8/argosay:v2</span>
</span></span><span style="display:flex;"><span>           <span style="color:#f92672">command</span>: [ <span style="color:#e6db74">&#34;/usr/local/bin/argosay&#34;</span> ]
</span></span><span style="display:flex;"><span>           <span style="color:#f92672">args</span>: [ <span style="color:#e6db74">&#34;echo&#34;</span>, <span style="color:#e6db74">&#34;hello world!&#34;</span> ]
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>argo submit loop-withsequence.yaml -n argo
</span></span></code></pre></div>
    <img src="/images/argo-workflow-loop-with-sequence.png"  alt="argo-workflow-loop-with-sequence"  class="center"  style="border-radius: 0px; width: 85%;"  />


<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Name:                loop-sequence-h5hzj
</span></span><span style="display:flex;"><span>Namespace:           argo
</span></span><span style="display:flex;"><span>ServiceAccount:      unset (will run with the default ServiceAccount)
</span></span><span style="display:flex;"><span>Status:              Succeeded
</span></span><span style="display:flex;"><span>Conditions:
</span></span><span style="display:flex;"><span> PodRunning          False
</span></span><span style="display:flex;"><span> Completed           True
</span></span><span style="display:flex;"><span>Created:             Sun May 26 11:23:07 +0800 (10 seconds ago)
</span></span><span style="display:flex;"><span>Started:             Sun May 26 11:23:07 +0800 (10 seconds ago)
</span></span><span style="display:flex;"><span>Finished:            Sun May 26 11:23:17 +0800 (now)
</span></span><span style="display:flex;"><span>Duration:            10 seconds
</span></span><span style="display:flex;"><span>Progress:            5/5
</span></span><span style="display:flex;"><span>ResourcesDuration:   11s*(100Mi memory),0s*(1 cpu)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>STEP                        TEMPLATE               PODNAME                                     DURATION  MESSAGE
</span></span><span style="display:flex;"><span> ✔ loop-sequence-h5hzj      loop-sequence-example
</span></span><span style="display:flex;"><span> └─┬─✔ hello-world-x5(0:0)  hello-world            loop-sequence-h5hzj-hello-world-4274112881  4s
</span></span><span style="display:flex;"><span>   ├─✔ hello-world-x5(1:1)  hello-world            loop-sequence-h5hzj-hello-world-276427469   4s
</span></span><span style="display:flex;"><span>   ├─✔ hello-world-x5(2:2)  hello-world            loop-sequence-h5hzj-hello-world-634880841   4s
</span></span><span style="display:flex;"><span>   ├─✔ hello-world-x5(3:3)  hello-world            loop-sequence-h5hzj-hello-world-2194008477  4s
</span></span><span style="display:flex;"><span>   └─✔ hello-world-x5(4:4)  hello-world            loop-sequence-h5hzj-hello-world-2552461849  4s
</span></span></code></pre></div><h3 id="withitems-basic-example"><code>withItems</code> Basic Example</h3>
<p>This example uses <code>withItems</code> to loop over a list of items, replacing a string for each instantiated template.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">loops-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">loop-example</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">loop-example</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;{{item}}&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">withItems</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">hello world</span>
</span></span><span style="display:flex;"><span>        - <span style="color:#ae81ff">goodbye world</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">yky8/argosay:v2</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [ <span style="color:#e6db74">&#34;/usr/local/bin/argosay&#34;</span> ]
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo&#34;</span>, <span style="color:#e6db74">&#34;{{inputs.parameters.message}}&#34;</span>]
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>argo submit loop-withitems-basic.yaml -n argo
</span></span></code></pre></div>
    <img src="/images/argo-workflow-loop-with-items.png"  alt="argo-workflow-loop-with-items"  class="center"  style="border-radius: 0px; width: 60%;"  />


<h3 id="withitems-json-object-example"><code>withItems</code> JSON Object Example</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">loops-maps-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">loop-map-example</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">loop-map-example</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">test-linux</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">cat-os-release</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">image</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;{{item.image}}&#34;</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">tag</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;{{item.tag}}&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">withItems</span>:
</span></span><span style="display:flex;"><span>        - { <span style="color:#f92672">image: &#39;debian&#39;, tag</span>: <span style="color:#e6db74">&#39;9.1&#39;</span> }
</span></span><span style="display:flex;"><span>        - { <span style="color:#f92672">image: &#39;debian&#39;, tag</span>: <span style="color:#e6db74">&#39;8.9&#39;</span> }
</span></span><span style="display:flex;"><span>        - { <span style="color:#f92672">image: &#39;alpine&#39;, tag</span>: <span style="color:#e6db74">&#39;3.6&#39;</span> }
</span></span><span style="display:flex;"><span>        - { <span style="color:#f92672">image: &#39;ubuntu&#39;, tag</span>: <span style="color:#e6db74">&#39;17.10&#39;</span> }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cat-os-release</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">image</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">tag</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#e6db74">&#34;{{inputs.parameters.image}}:{{inputs.parameters.tag}}&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">cat]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#ae81ff">/etc/os-release]</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>argo submit loop-withitems-json.yaml -n argo
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Name:                loops-maps-dfkdd
</span></span><span style="display:flex;"><span>Namespace:           argo
</span></span><span style="display:flex;"><span>ServiceAccount:      unset (will run with the default ServiceAccount)
</span></span><span style="display:flex;"><span>Status:              Succeeded
</span></span><span style="display:flex;"><span>Conditions:
</span></span><span style="display:flex;"><span> PodRunning          False
</span></span><span style="display:flex;"><span> Completed           True
</span></span><span style="display:flex;"><span>Created:             Sun May 26 14:01:38 +0800 (1 minute ago)
</span></span><span style="display:flex;"><span>Started:             Sun May 26 14:01:38 +0800 (1 minute ago)
</span></span><span style="display:flex;"><span>Finished:            Sun May 26 14:03:06 +0800 (now)
</span></span><span style="display:flex;"><span>Duration:            1 minute 28 seconds
</span></span><span style="display:flex;"><span>Progress:            4/4
</span></span><span style="display:flex;"><span>ResourcesDuration:   0s*(1 cpu),2m13s*(100Mi memory)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>STEP                                         TEMPLATE          PODNAME                                     DURATION  MESSAGE
</span></span><span style="display:flex;"><span> ✔ loops-maps-dfkdd                          loop-map-example
</span></span><span style="display:flex;"><span> └─┬─✔ test-linux(0:image:debian,tag:9.1)    cat-os-release    loops-maps-dfkdd-cat-os-release-1435759788  1m
</span></span><span style="display:flex;"><span>   ├─✔ test-linux(1:image:debian,tag:8.9)    cat-os-release    loops-maps-dfkdd-cat-os-release-3975793734  1m
</span></span><span style="display:flex;"><span>   ├─✔ test-linux(2:image:alpine,tag:3.6)    cat-os-release    loops-maps-dfkdd-cat-os-release-3565729669  12s
</span></span><span style="display:flex;"><span>   └─✔ test-linux(3:image:ubuntu,tag:17.10)  cat-os-release    loops-maps-dfkdd-cat-os-release-1306728920  43s
</span></span></code></pre></div><h3 id="withparam-example"><code>withParam</code> Example</h3>
<p>To avoid hardcoding, you can use parameters to pass a JSON array and use <code>withParam</code> to iterate over it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">loops-param-arg-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">loop-param-arg-example</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">os-list</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">value</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        [
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          { &#34;image&#34;: &#34;debian&#34;, &#34;tag&#34;: &#34;9.1&#34; },
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          { &#34;image&#34;: &#34;debian&#34;, &#34;tag&#34;: &#34;8.9&#34; },
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          { &#34;image&#34;: &#34;alpine&#34;, &#34;tag&#34;: &#34;3.6&#34; },
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          { &#34;image&#34;: &#34;ubuntu&#34;, &#34;tag&#34;: &#34;17.10&#34; }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        ]</span>        
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">loop-param-arg-example</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">os-list</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">test-linux</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">cat-os-release</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">image</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;{{item.image}}&#34;</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">tag</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;{{item.tag}}&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">withParam</span>: <span style="color:#e6db74">&#34;{{inputs.parameters.os-list}}&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">cat-os-release</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">image</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">tag</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#e6db74">&#34;{{inputs.parameters.image}}:{{inputs.parameters.tag}}&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">cat]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#ae81ff">/etc/os-release]</span>
</span></span></code></pre></div><h3 id="withparam-data-passing-example"><code>withParam</code> Data Passing Example</h3>
<p><code>withParam</code> can also be used to pass data between steps. In this example, we use the output of one step as the input for another.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">generate</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">Name</span>: <span style="color:#ae81ff">loops-param-result-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">loop-param-result-example</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">loop-param-result-example</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">generate</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">gen-number-list</span>
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">sleep</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">sleep-n-sec</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">seconds</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;{{item}}&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">withParam</span>: <span style="color:#e6db74">&#34;{{steps.generate.outputs.result}}&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">gen-number-list</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">script</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">python:alpine3.6</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">python]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">source</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        import json
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        import sys
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        json.dump([i for i in range(20, 31)], sys.stdout)</span>        
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">sleep-n-sec</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">seconds</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:latest</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo sleeping for {{inputs.parameters.seconds}} seconds; sleep {{inputs.parameters.seconds}}; echo done&#34;</span>]
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>argo submit loop-withparam-advance.yaml -n argo
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>STEP                         TEMPLATE                   PODNAME                                              DURATION  MESSAGE
</span></span><span style="display:flex;"><span> ✔ loops-param-result-tlqk6  loop-param-result-example
</span></span><span style="display:flex;"><span> ├───✔ generate              gen-number-list            loops-param-result-tlqk6-gen-number-list-2820570766  3s
</span></span><span style="display:flex;"><span> └─┬─✔ sleep(0:20)           sleep-n-sec                loops-param-result-tlqk6-sleep-n-sec-2838083538      29s
</span></span><span style="display:flex;"><span>   ├─✔ sleep(1:21)           sleep-n-sec                loops-param-result-tlqk6-sleep-n-sec-1673755972      27s
</span></span><span style="display:flex;"><span>   ├─✔ sleep(2:22)           sleep-n-sec                loops-param-result-tlqk6-sleep-n-sec-1057415402      1m
</span></span><span style="display:flex;"><span>   ├─✔ sleep(3:23)           sleep-n-sec                loops-param-result-tlqk6-sleep-n-sec-3164894936      39s
</span></span><span style="display:flex;"><span>   ├─✔ sleep(4:24)           sleep-n-sec                loops-param-result-tlqk6-sleep-n-sec-478396042       57s
</span></span><span style="display:flex;"><span>   ├─✔ sleep(5:25)           sleep-n-sec                loops-param-result-tlqk6-sleep-n-sec-1092769612      1m
</span></span><span style="display:flex;"><span>   ├─✔ sleep(6:26)           sleep-n-sec                loops-param-result-tlqk6-sleep-n-sec-3524356130      48s
</span></span><span style="display:flex;"><span>   ├─✔ sleep(7:27)           sleep-n-sec                loops-param-result-tlqk6-sleep-n-sec-803927512       41s
</span></span><span style="display:flex;"><span>   ├─✔ sleep(8:28)           sleep-n-sec                loops-param-result-tlqk6-sleep-n-sec-1975034882      57s
</span></span><span style="display:flex;"><span>   ├─✔ sleep(9:29)           sleep-n-sec                loops-param-result-tlqk6-sleep-n-sec-1202660980      49s
</span></span><span style="display:flex;"><span>   └─✔ sleep(10:30)          sleep-n-sec                loops-param-result-tlqk6-sleep-n-sec-291803978       56s
</span></span></code></pre></div><h3 id="accessing-aggregated-results-of-a-loop">Accessing Aggregated Results of a Loop</h3>
<p>Once the loop is complete, you can access the outputs of all iterations as a JSON array. The following example shows how to read it.</p>
<p>Note: The output of each iteration must be valid JSON.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">WorkflowTemplate</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">loop-test</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">main</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">main</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">execute-parallel-steps</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">print-json-entry</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">index</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#39;{{item}}&#39;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">withParam</span>: <span style="color:#e6db74">&#39;[1, 2, 3]&#39;</span>
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">call-access-aggregate-output</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">access-aggregate-output</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">aggregate-results</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#39;{{steps.execute-parallel-steps.outputs.result}}&#39;</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print-json-entry</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">index</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">script</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:latest</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">source</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        cat &lt;&lt;EOF
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        {
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;input&#34;: &#34;{{inputs.parameters.index}}&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        &#34;transformed-input&#34;: &#34;{{inputs.parameters.index}}.jpeg&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        }
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        EOF</span>        
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">access-aggregate-output</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">aggregate-results</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#39;no-value&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">script</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:latest</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">source</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        echo &#39;inputs.parameters.aggregate-results: &#34;{{inputs.parameters.aggregate-results}}&#34;&#39;</span>        
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>argo submit loop-withparam-aggr-result.yaml -n argo
</span></span></code></pre></div>
    <img src="/images/argo-workflow-loop-withparam-aggr-result.png"  alt="argo-workflow-loop-withparam-aggr-result"  class="center"  style="border-radius: 0px; width: 60%;"  />


<p>The last step of the above workflow should have the following output: inputs.parameters.aggregate-results: &ldquo;[{&ldquo;input&rdquo;:&ldquo;1&rdquo;,&ldquo;transformed-input&rdquo;:&ldquo;1.jpeg&rdquo;},{&ldquo;input&rdquo;:&ldquo;2&rdquo;,&ldquo;transformed-input&rdquo;:&ldquo;2.jpeg&rdquo;},{&ldquo;input&rdquo;:&ldquo;3&rdquo;,&ldquo;transformed-input&rdquo;:&ldquo;3.jpeg&rdquo;}]&rdquo;</p>
]]></content>
        </item>
        
        <item>
            <title>Argo Workflow 4</title>
            <link>https://Greenery-S.github.io/posts/devops/argo-workflow/argo-workflow-4/</link>
            <pubDate>Sat, 25 May 2024 22:25:36 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/posts/devops/argo-workflow/argo-workflow-4/</guid>
            <description>Argo Workflow (4) 1 Secrets Argo Workflow supports the use of Kubernetes Secrets within workflows. A Secret is an object used to store sensitive information, such as passwords, OAuth tokens, etc. Secrets can be stored in Etcd in plain text or base64 encoded form. When using a Secret in a workflow, you need to define a secrets field in the workflow spec, and then reference it in the workflow template using {{workflow.</description>
            <content type="html"><![CDATA[<h1 id="argo-workflow-4">Argo Workflow (4)</h1>
<h2 id="1-secrets">1 Secrets</h2>
<p>Argo Workflow supports the use of Kubernetes Secrets within workflows. A Secret is an object used to store sensitive information, such as passwords, OAuth tokens, etc. Secrets can be stored in Etcd in plain text or base64 encoded form. When using a Secret in a workflow, you need to define a <code>secrets</code> field in the workflow spec, and then reference it in the workflow template using <code>{{workflow.spec.secrets}}</code>.</p>
<p>First, create a secret, and then use it in the workflow.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>kubectl create secret generic my-secret --from-literal<span style="color:#f92672">=</span>mypassword<span style="color:#f92672">=</span>S00perS3cretPa55word -n argo
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># To run this example, first create the secret by running:</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># kubectl create secret generic my-secret --from-literal=mypassword=S00perS3cretPa55word</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">secret-example-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># To access secrets as files, add a volume entry in spec.volumes[] and</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># then in the container template spec, add a mount using volumeMounts.</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">my-secret-vol</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">secret</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">secretName</span>: <span style="color:#ae81ff">my-secret    </span> <span style="color:#75715e"># name of an existing k8s secret</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:3.7</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        echo &#34;secret from env: $MYSECRETPASSWORD&#34;;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        echo &#34;secret from file: `cat /secret/mountpath/mypassword`&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      &#39;</span>]
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># To access secrets as environment variables, use the k8s valueFrom and</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># secretKeyRef constructs.</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">MYSECRETPASSWORD </span> <span style="color:#75715e"># name of env var</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">valueFrom</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">secretKeyRef</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">name</span>: <span style="color:#ae81ff">my-secret    </span> <span style="color:#75715e"># name of an existing k8s secret</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">key</span>: <span style="color:#ae81ff">mypassword    </span> <span style="color:#75715e"># &#39;key&#39; subcomponent of the secret</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">volumeMounts</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">my-secret-vol    </span> <span style="color:#75715e"># mount file containing secret at /secret/mountpath</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">mountPath</span>: <span style="color:#e6db74">&#34;/secret/mountpath&#34;</span>
</span></span></code></pre></div><h2 id="2-volumes">2 Volumes</h2>
<p>The following example will dynamically create a volume, and then use this volume in a two-step workflow.</p>
<p>PV is a persistent volume, PVC is a persistent volume claim, PV and PVC are two resource objects in k8s. PV is the actual object of a persistent volume, PVC is the declaration object of a persistent volume. PV is a cluster-level resource, PVC is a namespace-level resource. PV is the actual object of a persistent volume, PVC is the declaration object of a persistent volume. PV is a cluster-level resource, PVC is a namespace-level resource.</p>
<p>This PVC is temporary and will be deleted after the workflow ends.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">volumes-pvc-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">volumes-pvc-example</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">volumeClaimTemplates</span>:                 <span style="color:#75715e"># define volume, same syntax as k8s Pod spec</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">name</span>: <span style="color:#ae81ff">workdir                    </span> <span style="color:#75715e"># name of volume claim</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">accessModes</span>: [ <span style="color:#e6db74">&#34;ReadWriteOnce&#34;</span> ]
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">resources</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">requests</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">storage</span>: <span style="color:#ae81ff">1Gi                 </span> <span style="color:#75715e"># Gi =&gt; 1024 * 1024 * 1024</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">volumes-pvc-example</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">generate</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">yky8/argosay:v2</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo generating message in volume; cowsay hello world | tee /mnt/vol/hello_world.txt&#34;</span>]
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># Mount workdir volume at /mnt/vol before invoking docker/whalesay</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">volumeMounts</span>:                     <span style="color:#75715e"># same syntax as k8s Pod spec</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">workdir</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">mountPath</span>: <span style="color:#ae81ff">/mnt/vol</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:latest</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo getting message from volume; find /mnt/vol; cat /mnt/vol/hello_world.txt&#34;</span>]
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># Mount workdir volume at /mnt/vol before invoking docker/whalesay</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">volumeMounts</span>:                     <span style="color:#75715e"># same syntax as k8s Pod spec</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">workdir</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">mountPath</span>: <span style="color:#ae81ff">/mnt/vol</span>
</span></span></code></pre></div><p>Volume is a very effective way to move large amounts of data from one step of a workflow to another. Depending on the system, some volumes may be accessed from multiple steps at the same time.</p>
<p>Sometimes, we want to get an existing volume, rather than dynamically creating a new one:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># Define Kubernetes PVC</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">PersistentVolumeClaim</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">my-existing-volume</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">accessModes</span>: [ <span style="color:#e6db74">&#34;ReadWriteOnce&#34;</span> ]
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">resources</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">requests</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">storage</span>: <span style="color:#ae81ff">1Gi</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">volumes-existing-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">volumes-existing-example</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Pass my-existing-volume as an argument to the volumes-existing-example template</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Same syntax as k8s Pod spec</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">workdir</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">persistentVolumeClaim</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">claimName</span>: <span style="color:#ae81ff">my-existing-volume</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">volumes-existing-example</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">generate</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">yky8/argosay:v2</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo generating message in volume; cowsay hello world | tee /mnt/vol/hello_world.txt&#34;</span>]
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">volumeMounts</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">workdir</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">mountPath</span>: <span style="color:#ae81ff">/mnt/vol</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:latest</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo getting message from volume; find /mnt/vol; cat /mnt/vol/hello_world.txt&#34;</span>]
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">volumeMounts</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">workdir</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">mountPath</span>: <span style="color:#ae81ff">/mnt/vol</span>
</span></span></code></pre></div><p>You can also define a volume under the <strong>resource</strong> step in the workflow&rsquo;s template field, so you can define the volume under the spec field of the workflow, and then use this volume in the workflow&rsquo;s template.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">template-level-volume-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">generate-and-use-volume</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">generate-and-use-volume</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">generate-volume</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">generate-volume</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>            - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">pvc-size</span>
</span></span><span style="display:flex;"><span>              <span style="color:#75715e"># In a real-world example, this could be generated by a previous workflow step.</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#39;1Gi&#39;</span>
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">generate</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>            - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">pvc-name</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#39;{{steps.generate-volume.outputs.parameters.pvc-name}}&#39;</span>
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>            - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">pvc-name</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#39;{{steps.generate-volume.outputs.parameters.pvc-name}}&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">generate-volume</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">pvc-size</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">resource</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">action</span>: <span style="color:#ae81ff">create</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">setOwnerReference</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">manifest</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        apiVersion: v1
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        kind: PersistentVolumeClaim
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        metadata:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          generateName: pvc-example-
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        spec:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          accessModes: [&#39;ReadWriteOnce&#39;, &#39;ReadOnlyMany&#39;]
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          resources:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            requests:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">              storage: &#39;{{inputs.parameters.pvc-size}}&#39;</span>        
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">outputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">pvc-name</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">valueFrom</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">jsonPath</span>: <span style="color:#e6db74">&#39;{.metadata.name}&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>        - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">pvc-name</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">workdir</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">persistentVolumeClaim</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">claimName</span>: <span style="color:#e6db74">&#39;{{inputs.parameters.pvc-name}}&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">yky8/argosay:v2</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo generating message in volume; cowsay hello world | tee /mnt/vol/hello_world.txt&#34;</span>]
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">volumeMounts</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">workdir</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">mountPath</span>: <span style="color:#ae81ff">/mnt/vol</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">pvc-name</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">volumes</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">workdir</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">persistentVolumeClaim</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">claimName</span>: <span style="color:#e6db74">&#39;{{inputs.parameters.pvc-name}}&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:latest</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo getting message from volume; find /mnt/vol; cat /mnt/vol/hello_world.txt&#34;</span>]
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">volumeMounts</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">workdir</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">mountPath</span>: <span style="color:#ae81ff">/mnt/vol</span>
</span></span></code></pre></div><p>To execute this, you need to first ensure that the default service account in the argo namespace has permissions, otherwise an error will occur.</p>
<p>Like me at the beginning, I didn&rsquo;t have the permission to create PVC, I need to give the default service account permission.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># role.yaml</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Role</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">argo</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">pvc-creator</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">rules</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">apiGroups</span>: [<span style="color:#e6db74">&#34;&#34;</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">resources</span>: [<span style="color:#e6db74">&#34;persistentvolumeclaims&#34;</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">verbs</span>: [<span style="color:#e6db74">&#34;create&#34;</span>, <span style="color:#e6db74">&#34;delete&#34;</span>, <span style="color:#e6db74">&#34;get&#34;</span>, <span style="color:#e6db74">&#34;list&#34;</span>, <span style="color:#e6db74">&#34;watch&#34;</span>]
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span><span style="color:#75715e"># rolebinding.yaml</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">RoleBinding</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">pvc-creator-binding</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">argo</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">subjects</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ServiceAccount</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">default</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">namespace</span>: <span style="color:#ae81ff">argo</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">roleRef</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Role</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">pvc-creator</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">apiGroup</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>kubectl apply -f role_bind.yaml
</span></span><span style="display:flex;"><span>argo submit volume-tpl.yaml -n argo
</span></span></code></pre></div>
    <img src="/images/argo-workflow-pvc-tpl.png"  alt="argo-workflow-tpl"  class="center"  style="border-radius: 0px; width: 80%;"  />


]]></content>
        </item>
        
        <item>
            <title>Argo Workflow 3</title>
            <link>https://Greenery-S.github.io/posts/devops/argo-workflow/argo-workflow-3/</link>
            <pubDate>Sat, 25 May 2024 17:14:53 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/posts/devops/argo-workflow/argo-workflow-3/</guid>
            <description>Argo Workflow (3) 1 Artifacts When running workflows, it is very common for steps to generate or use artifacts. Typically, an output artifact from one step may be used as an input artifact by a subsequent step.
The following workflow specification contains two sequential steps. The first step, named generate-artifact, uses the argosay template to generate an artifact, which is then used by the second step, named print-message, which consumes the generated artifact.</description>
            <content type="html"><![CDATA[<h1 id="argo-workflow-3">Argo Workflow (3)</h1>
<h2 id="1-artifacts">1 Artifacts</h2>
<p>When running workflows, it is very common for steps to generate or use artifacts. Typically, an output artifact from one step may be used as an input artifact by a subsequent step.</p>
<p>The following workflow specification contains two sequential steps. The first step, named <code>generate-artifact</code>, uses the <code>argosay</code> template to generate an artifact, which is then used by the second step, named <code>print-message</code>, which consumes the generated artifact.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">artifact-passing-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">artifact-example</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">artifact-example</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">generate-artifact</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">consume-artifact</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">artifacts</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># bind message to the hello-art artifact</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># generated by the generate-artifact step</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">from</span>: <span style="color:#e6db74">&#34;{{steps.generate-artifact.outputs.artifacts.hello-art}}&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">yky8/argosay:v2</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># sh -c allows you to provide a string that sh will execute as a complete shell command</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># The tee command reads from standard input and writes to both standard output and files simultaneously</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># Useful for saving command output to a file while viewing it in the terminal</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;/usr/local/bin/argosay echo &#39;hello world&#39; | tee /tmp/hello_world.txt&#34;</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">outputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">artifacts</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># generate hello-art artifact from /tmp/hello_world.txt</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># artifacts can be directories as well as files</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">hello-art</span> <span style="color:#75715e"># Used by consume-artifact step, specified with &#34;from&#34; field</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/tmp/hello_world.txt</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">artifacts</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># unpack the message input artifact</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># and put it at /tmp/message</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/tmp/message</span> <span style="color:#75715e"># put it at /tmp/message</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:latest</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;cat /tmp/message&#34;</span>]
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>argo submit artifacts.yaml -n argo
</span></span></code></pre></div>
    <img src="/images/argo-workflow-artifacts.png"  alt="argo-workflow-artifacts"  class="center"  style="border-radius: 0px; width: 30%;"  />


<h3 id="handling-large-artifacts">Handling Large Artifacts</h3>
<p>When running workflows, it is very common for steps to generate or use artifacts. Typically, an output artifact from one step may be used as an input artifact by a subsequent step.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">&lt;... snipped ...&gt;</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print-large-artifact</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># below patch gets merged with the actual pod spec and increases the memory</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># request of the init container.</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">podSpecPatch</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      initContainers:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        - name: init
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          resources:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            requests:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">              memory: 2Gi
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">              cpu: 300m</span>      
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">artifacts</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">data</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/tmp/large-file</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:latest</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;cat /tmp/large-file&#34;</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">&lt;... snipped ...&gt;</span>
</span></span></code></pre></div><h3 id="artifact-archiving-strategy">Artifact Archiving Strategy</h3>
<p>In Argo Workflows, artifacts are by default archived as tarballs and compressed with gzip. You can customize this behavior by specifying the archive strategy. Below is an example showing how to customize the archiving strategy using the <code>archive</code> field:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#ae81ff">&lt;... snipped ...&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">outputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">artifacts</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># default behavior - tar+gzip default compression.</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">hello-art-1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/tmp/hello_world.txt</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># disable archiving entirely - upload the file / directory as is.</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># this is useful when the container layout matches the desired target repository layout.   </span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">hello-art-2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/tmp/hello_world.txt</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">archive</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">none</span>: {}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># customize the compression behavior (disabling it here).</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># this is useful for files with varying compression benefits, </span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># e.g. disabling compression for a cached build workspace and large binaries, </span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># or increasing compression for &#34;perfect&#34; textual data - like a json/xml export of a large database.</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">hello-art-3</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/tmp/hello_world.txt</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">archive</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">tar</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># no compression (also accepts the standard gzip 1 to 9 values)</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">compressionLevel</span>: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">&lt;... snipped ...&gt;</span>
</span></span></code></pre></div><h3 id="artifact-garbage-collection">Artifact Garbage Collection</h3>
<p>Documentation for supported storage engines: <a href="https://argo-workflows.readthedocs.io/en/latest/configure-artifact-repository/">https://argo-workflows.readthedocs.io/en/latest/configure-artifact-repository/</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">artifact-gc-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">main</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">artifactGC</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">strategy</span>: <span style="color:#ae81ff">OnWorkflowDeletion </span> <span style="color:#75715e"># default Strategy set here applies to all Artifacts by default</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">main</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">argoproj/argosay:v2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">command</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">sh</span>
</span></span><span style="display:flex;"><span>          - -<span style="color:#ae81ff">c</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">args</span>:
</span></span><span style="display:flex;"><span>          - |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            echo &#34;can throw this away&#34; &gt; /tmp/temporary-artifact.txt
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            echo &#34;keep this&#34; &gt; /tmp/keep-this.txt</span>            
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">outputs</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">artifacts</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">temporary-artifact</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/tmp/temporary-artifact.txt</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">s3</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">key</span>: <span style="color:#ae81ff">temporary-artifact.txt</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">keep-this</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/tmp/keep-this.txt</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">s3</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">key</span>: <span style="color:#ae81ff">keep-this.txt</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">artifactGC</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">strategy</span>: <span style="color:#ae81ff">Never  </span> <span style="color:#75715e"># optional override for an Artifact</span>
</span></span></code></pre></div><h3 id="naming-artifacts----parameterization">Naming Artifacts &ndash; Parameterization</h3>
<p>When there may be concurrent runs of the same workflow, consider using parameterized S3 keys, such as <code>{{workflow.uid}}</code>. This avoids situations where one workflow deletes an artifact while another generates an artifact with the same S3 key.</p>
<p>For example, if you have two concurrent workflows using the same S3 key to store artifacts, one workflow might delete its artifacts while the other is still generating artifacts. This could result in issues where the second workflow finds its artifacts deleted or overwrites the first workflow’s artifacts.</p>
<p>To avoid this, use parameterized S3 keys so each workflow has a unique S3 key, such as using <code>{{workflow.uid}}</code> as part of the S3 key.</p>
<h3 id="service-account-or-iam-annotations-for-storage-services">Service Account or IAM Annotations for Storage Services</h3>
<p>If you need to use a service account or IAM annotations for storage services, you can specify these annotations in the workflow specification. These annotations are passed to the storage service to control access to the storage bucket.</p>
<p>You can specify a service account or IAM annotations for the entire workflow or for each artifact.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">artifact-gc-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">main</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">artifactGC</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">strategy</span>: <span style="color:#ae81ff">OnWorkflowDeletion </span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">##############################################################################################</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#    Workflow Level Service Account and Metadata</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">##############################################################################################</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">serviceAccountName</span>: <span style="color:#ae81ff">my-sa</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">podMetadata</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">eks.amazonaws.com/role-arn</span>: <span style="color:#ae81ff">arn:aws:iam::111122223333:role/my-iam-role</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">main</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">argoproj/argosay:v2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">command</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#ae81ff">sh</span>
</span></span><span style="display:flex;"><span>          - -<span style="color:#ae81ff">c</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">args</span>:
</span></span><span style="display:flex;"><span>          - |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            echo &#34;can throw this away&#34; &gt; /tmp/temporary-artifact.txt
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            echo &#34;keep this&#34; &gt; /tmp/keep-this.txt</span>            
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">outputs</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">artifacts</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">temporary-artifact</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/tmp/temporary-artifact.txt</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">s3</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">key</span>: <span style="color:#ae81ff">temporary-artifact-{{workflow.uid}}.txt</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">artifactGC</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#75715e">####################################################################################</span>
</span></span><span style="display:flex;"><span>              <span style="color:#75715e">#    Optional override capability</span>
</span></span><span style="display:flex;"><span>              <span style="color:#75715e">####################################################################################</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">serviceAccountName</span>: <span style="color:#ae81ff">artifact-specific-sa</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">podMetadata</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">eks.amazonaws.com/role-arn</span>: <span style="color:#ae81ff">arn:aws:iam::111122223333:role/artifact-specific-iam-role</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">keep-this</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/tmp/keep-this.txt</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">s3</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">key</span>: <span style="color:#ae81ff">keep-this-{{workflow.uid}}.txt</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">artifactGC</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">strategy</span>: <span style="color:#ae81ff">Never</span>
</span></span></code></pre></div><p>To support custom service accounts, you need to create a Role and RoleBinding and bind the Role to the ServiceAccount:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Role</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">annotations</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">workflows.argoproj.io/description</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">      This is the minimum recommended permissions needed if you want to use artifact GC.</span>      
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">artifactgc</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">rules</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">apiGroups</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">argoproj.io</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">resources</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">workflowartifactgctasks</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">verbs</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">list</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">watch</span>
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">apiGroups</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">argoproj.io</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">resources</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">workflowartifactgctasks/status</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">verbs</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">patch</span>
</span></span></code></pre></div><p>If you used the quick start manifest file to install, you get a role named <code>artifactgc</code>. If</p>
<p>you have installed it using the Helm Chart, you need to install this role manually. You can bind this role to a service account using a role binding:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io/v1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">RoleBinding</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">artifactgc</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">roleRef</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">apiGroup</span>: <span style="color:#ae81ff">rbac.authorization.k8s.io</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Role</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">artifactgc</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">subjects</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#f92672">kind</span>: <span style="color:#ae81ff">ServiceAccount</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">artifact-specific-sa</span>
</span></span></code></pre></div><h3 id="what-happens-when-garbage-collection-gc-fails-in-argo-workflow">What Happens When Garbage Collection (GC) Fails in Argo Workflow?</h3>
<p>If artifact deletion fails for some reason (except when the artifact has already been deleted, which is not considered a failure), the workflow&rsquo;s status will be marked with a new condition to indicate an &ldquo;Artifact GC Failure&rdquo;. Additionally, Kubernetes will emit an event, and the Argo Server UI will display the failure information. To further debug, users should find one or more Pods named <code>&lt;wfName&gt;-artgc-*</code> and check their logs.</p>
<p>If users need to delete the workflow and its child CRD objects, they need to patch the workflow to remove the finalizer that prevents deletion:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">finalizers</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#ae81ff">workflows.argoproj.io/artifact-gc</span>
</span></span></code></pre></div><p>You can remove the finalizer with the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>kubectl patch workflow my-wf <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --type json <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>    --patch<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;[ { &#34;op&#34;: &#34;remove&#34;, &#34;path&#34;: &#34;/metadata/finalizers&#34; } ]&#39;</span>
</span></span></code></pre></div><p>Alternatively, for easier operation, you can use the <code>argo delete</code> command with the <code>--force</code> flag, which removes the finalizer before performing the delete operation.</p>
<p>In version 3.5 and higher, a flag named <code>forceFinalizerRemoval</code> has been added to the Workflow Spec, allowing the finalizer to be forcibly removed even if Artifact GC fails:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">artifactGC</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">strategy</span>: <span style="color:#ae81ff">OnWorkflowDeletion </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">forceFinalizerRemoval</span>: <span style="color:#66d9ef">true</span>
</span></span></code></pre></div><p>This means the workflow can be deleted even if artifact garbage collection fails.</p>
<h2 id="2-built-in-artifacts">2 Built-in Artifacts</h2>
<p>Argo Workflows provides built-in support for several common artifact types. These include git repositories, HTTP resources, GCS buckets, and S3 buckets. While you can use any container for any purpose, these built-in artifact types make it easier to work with these common types.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">hardwired-artifact-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">hardwired-artifact</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">hardwired-artifact</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">podSpecPatch</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        initContainers:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">          - name: init
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">            resources:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">              requests:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                memory: 2Gi
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">                cpu: 300m</span>        
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">artifacts</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># Check out the main branch of the argo repo and place it at /src</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># revision can be anything that git checkout accepts: branch, commit, tag, etc.</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">argo-source</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/src</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">git</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">repo</span>: <span style="color:#ae81ff">https://github.com/argoproj/argo-workflows.git</span>
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">revision</span>: <span style="color:#e6db74">&#34;main&#34;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#75715e"># Download kubectl 1.8.0 and place it at /bin/kubectl</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">kubectl</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/bin/kubectl</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">mode</span>: <span style="color:#ae81ff">0755</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">http</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">url</span>: <span style="color:#ae81ff">https://storage.googleapis.com/kubernetes-release/release/v1.8.0/bin/linux/amd64/kubectl</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># Copy an s3 compatible artifact repository bucket (such as AWS, GCS and MinIO) and place it at /s3</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># - name: objects</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">#   path: /s3</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">#   s3:</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">#     endpoint: storage.googleapis.com</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">#     bucket: my-bucket-name</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">#     key: path/in/bucket</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">#     accessKeySecret:</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">#       name: my-s3-credentials</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">#       key: accessKey</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">#     secretKeySecret:</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">#       name: my-s3-credentials</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">#       key: secretKey</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">debian</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;ls -l /src /bin/kubectl&#34;</span>] <span style="color:#75715e"># /s3 is not tested here</span>
</span></span></code></pre></div><p>These are examples of using artifacts in Argo Workflow. Artifacts are files or directories generated or used during the workflow execution. In this example, the workflow template defines three input artifacts:</p>
<ol>
<li>
<p><strong><code>argo-source</code></strong>: This artifact uses the git type. It checks out a specified revision (in this case, the &ldquo;main&rdquo; branch) from the specified git repository (in this case, <a href="https://github.com/argoproj/argo-workflows.git">https://github.com/argoproj/argo-workflows.git</a>) and places it in the <code>/src</code> directory.</p>
</li>
<li>
<p><strong><code>kubectl</code></strong>: This artifact uses the HTTP type. It downloads a file from the specified URL (in this case, <a href="https://storage.googleapis.com/kubernetes-release/release/v1.8.0/bin/linux/amd64/kubectl">https://storage.googleapis.com/kubernetes-release/release/v1.8.0/bin/linux/amd64/kubectl</a>) and places it in the <code>/bin/kubectl</code> directory. The <code>mode: 0755</code> setting makes this file executable.</p>
</li>
<li>
<p><strong><code>objects</code></strong>: This artifact uses the S3 type. It downloads files or directories from a specified S3-compatible storage service (in this case, storage.googleapis.com) using the specified bucket (<code>my-bucket-name</code>) and key (<code>path/in/bucket</code>), and places them in the <code>/s3</code> directory. The <code>accessKeySecret</code> and <code>secretKeySecret</code> fields specify the Kubernetes secrets storing the access key and secret key for AWS.</p>
</li>
</ol>
<p>The template then defines a container that runs a command to list the contents of the <code>/src</code>, <code>/bin/kubectl</code>, and <code>/s3</code> directories, where the input artifacts are placed.</p>
<h2 id="3-script">3 Script</h2>
<p>Sometimes, you may want the workflow to execute a script rather than directly running a container. In such cases, you can use the <code>script</code> type of artifact. A <code>script</code> type of artifact is a script, which can be a shell script, Python script, Perl script, Ruby script, etc. In this example, we will demonstrate how to use the <code>script</code> type of artifact.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">scripts-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">bash-script-example</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">bash-script-example</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">generate-from-bash</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">gen-random-int-bash</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">generate-from-python</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">gen-random-int-python</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">generate-from-javascript</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">gen-random-int-javascript</span>
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print-for-bash</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;[BASH] {{steps.generate-from-bash.outputs.result}}&#34;</span>  <span style="color:#75715e"># The result of the here-script</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print-for-python</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;[PY] {{steps.generate-from-python.outputs.result}}&#34;</span>  <span style="color:#75715e"># The result of the Python script</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print-for-javascript</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;[JS] {{steps.generate-from-javascript.outputs.result}}&#34;</span>  <span style="color:#75715e"># The result of the JavaScript script</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">gen-random-int-bash</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">script</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">debian:9.4</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">bash]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">source</span>: <span style="color:#ae81ff">|                                        </span> <span style="color:#75715e"># Contents of the here-script</span>
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">cat /dev/urandom | od -N2 -An -i | awk -v f=1 -v r=100 &#39;{printf &#34;%i\n&#34;, f + r * $1 / 65536}&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">gen-random-int-python</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">script</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">python:alpine3.6</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">python]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">source</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        import random
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        i = random.randint(1, 100)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        print(i)</span>        
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">gen-random-int-javascript</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">script</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">node:9.1-alpine</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">node]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">source</span>: |<span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        var rand = Math.floor(Math.random() * 100);
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">        console.log(rand);</span>        
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:latest</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">sh, -c]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo result was: {{inputs.parameters.message}}&#34;</span>]
</span></span></code></pre></div><p>The <code>script</code> keyword allows using the <code>source</code> label to specify the script body. This creates a temporary file containing the script body, and the name of this temporary file is passed as the last argument to <code>command</code>. The <code>command</code> should be an interpreter that executes the script body.</p>
<p>Using the <code>script</code> feature also assigns the standard output of the script to a special output parameter named <code>result</code>. This allows you to use the result of running the script itself in other parts of the workflow specification. In this example, the result is simply echoed by the <code>print-message</code> template.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>argo submit scripts-parallel.yaml -n argo --watch
</span></span></code></pre></div>
    <img src="/images/argo-workflow-scripts-parallel.png"  alt="argo-workflow-script"  class="center"  style="border-radius: 0px; width: 50%;"  />


<h2 id="4-output-parameters">4 Output Parameters</h2>
<p>Output parameters provide a general mechanism to use the results of steps as parameters (not just as artifacts). This allows you to use the results of any type of step, not just scripts, for conditional testing, looping, and parameterization. Output parameters work similarly to script results, except the value of the output parameter is set to the contents of a generated file, rather than the contents of stdout.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">output-parameter-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">output-parameter</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">output-parameter</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>        - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">generate-parameter</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">template</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>        - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">consume-parameter</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">template</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#75715e"># Pass the hello-param output from the generate-parameter step as the message input to print-message</span>
</span></span><span style="display:flex;"><span>                - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;{{steps.generate-parameter.outputs.parameters.hello-param}}&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">yky8/argosay:v2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">command</span>: [ <span style="color:#ae81ff">sh, -c ]</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">args</span>: [ <span style="color:#e6db74">&#34;echo -n hello world &gt; /tmp/hello_world.txt&#34;</span> ]  <span style="color:#75715e"># generate the content of hello_world.txt</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">outputs</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">hello-param </span> <span style="color:#75715e"># name of output parameter</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">valueFrom</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/tmp/hello_world.txt</span> <span style="color:#75715e"># set the value of hello-param to the contents of this hello-world.txt</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">yky8/argosay:v2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">command</span>: [ <span style="color:#e6db74">&#34;/usr/local/bin/argosay&#34;</span> ]
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">args</span>: [ <span style="color:#e6db74">&#34;echo&#34;</span>,<span style="color:#e6db74">&#34;{{inputs.parameters.message}}&#34;</span> ]
</span></span></code></pre></div><p>Here, a step&rsquo;s output parameter is used as an input parameter, rather than an artifact. In this example, the <code>generate-parameter</code> step generates an output parameter named <code>hello-param</code>, and the <code>consume-parameter</code> step passes this output parameter as an input parameter to the <code>print-message</code> step.</p>
<p>If using a DAG, you can access the output parameter with <code>{{tasks.generate-parameter.outputs.parameters.hello-param}}</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>argo submit output-params.yaml -n argo --watch
</span></span></code></pre></div><h3 id="outputsresult-captures-standard-output"><code>outputs.result</code> Captures Standard Output</h3>
<p>Only 256 KB of the standard output stream will be captured.</p>
<ul>
<li>
<p>The output of a script is captured using <code>outputs.result</code>. Refer to the previous section for details.</p>
</li>
<li>
<p>The standard output of container steps and tasks is also captured and stored in a result parameter.</p>
<ul>
<li>For example, if there is a task named <code>log-int</code>, its result can be accessed using <code>{{tasks.log-int.outputs.result}}</code>. If you are using steps, replace <code>tasks</code> with <code>steps</code>, i.e., <code>{{steps.log-int.outputs.result}}</code>. This way, you can use the output result of a step or task in other parts of the workflow.</li>
</ul>
</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Argo Workflow 2</title>
            <link>https://Greenery-S.github.io/posts/devops/argo-workflow/argo-workflow-2/</link>
            <pubDate>Sat, 25 May 2024 14:30:03 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/posts/devops/argo-workflow/argo-workflow-2/</guid>
            <description>Argo Workflow (2) 1 Steps Multi-step workflows can be defined through the steps field. Each step is an independent container that can be executed in parallel.
apiVersion: argoproj.io/v1alpha1 kind: Workflow metadata: generateName: steps- spec: entrypoint: hello-hello-hello # This spec contains two templates: hello-hello-hello and whalesay templates: - name: hello-hello-hello # Instead of just running a container # This template has a sequence of steps steps: - - name: hello1 # hello1 is run before the following steps template: argosay arguments: parameters: - name: message value: &amp;#34;hello1&amp;#34; - - name: hello2a # double dash =&amp;gt; run after previous step template: argosay arguments: parameters: - name: message value: &amp;#34;hello2a&amp;#34; - name: hello2b # single dash =&amp;gt; run in parallel with previous step template: argosay arguments: parameters: - name: message value: &amp;#34;hello2b&amp;#34; # This is the same template as from the previous example - name: argosay inputs: parameters: - name: message container: image: yky8/argosay:v2 command: [ &amp;#34;/usr/local/bin/argosay&amp;#34; ] args: [ &amp;#34;echo&amp;#34;,&amp;#34;{{inputs.</description>
            <content type="html"><![CDATA[<h1 id="argo-workflow-2">Argo Workflow (2)</h1>
<h2 id="1-steps">1 Steps</h2>
<p>Multi-step workflows can be defined through the <code>steps</code> field. Each step is an independent container that can be executed in parallel.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">steps-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">hello-hello-hello</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># This spec contains two templates: hello-hello-hello and whalesay</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">hello-hello-hello</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># Instead of just running a container</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># This template has a sequence of steps</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>        - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">hello1           </span> <span style="color:#75715e"># hello1 is run before the following steps</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">template</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>                - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;hello1&#34;</span>
</span></span><span style="display:flex;"><span>        - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">hello2a          </span> <span style="color:#75715e"># double dash =&gt; run after previous step</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">template</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>                - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;hello2a&#34;</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">hello2b          </span> <span style="color:#75715e"># single dash =&gt; run in parallel with previous step</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">template</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>                - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;hello2b&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># This is the same template as from the previous example</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">yky8/argosay:v2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">command</span>: [ <span style="color:#e6db74">&#34;/usr/local/bin/argosay&#34;</span> ]
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">args</span>: [ <span style="color:#e6db74">&#34;echo&#34;</span>,<span style="color:#e6db74">&#34;{{inputs.parameters.message}}&#34;</span> ]
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>argo submit multi-steps.yaml -n argo --watch
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Name:                steps-kl27q
</span></span><span style="display:flex;"><span>Namespace:           argo
</span></span><span style="display:flex;"><span>ServiceAccount:      unset (will run with the default ServiceAccount)
</span></span><span style="display:flex;"><span>Status:              Succeeded
</span></span><span style="display:flex;"><span>Conditions:
</span></span><span style="display:flex;"><span> PodRunning          False
</span></span><span style="display:flex;"><span> Completed           True
</span></span><span style="display:flex;"><span>Created:             Sat May 25 14:44:26 +0800 (20 seconds ago)
</span></span><span style="display:flex;"><span>Started:             Sat May 25 14:44:26 +0800 (20 seconds ago)
</span></span><span style="display:flex;"><span>Finished:            Sat May 25 14:44:46 +0800 (now)
</span></span><span style="display:flex;"><span>Duration:            20 seconds
</span></span><span style="display:flex;"><span>Progress:            3/3
</span></span><span style="display:flex;"><span>ResourcesDuration:   0s*(1 cpu),6s*(100Mi memory)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>STEP            TEMPLATE           PODNAME                         DURATION  MESSAGE
</span></span><span style="display:flex;"><span> ✔ steps-kl27q  hello-hello-hello
</span></span><span style="display:flex;"><span> ├───✔ hello1   argosay            steps-kl27q-argosay-3962065941  3s
</span></span><span style="display:flex;"><span> └─┬─✔ hello2a  argosay            steps-kl27q-argosay-3285575750  3s
</span></span><span style="display:flex;"><span>   └─✔ hello2b  argosay            steps-kl27q-argosay-3268798131  3s
</span></span></code></pre></div><h2 id="2-dag">2 DAG</h2>
<p>As an alternative to specifying a sequence of steps, you can define a workflow as a Directed Acyclic Graph (DAG) by specifying the dependencies of each task. For complex workflows, DAGs may be easier to maintain and allow tasks to achieve maximum parallelism at runtime.</p>
<p>In the following workflow, step A runs first because it has no dependencies. Once A is completed, steps B and C run in parallel. Finally, once B and C are completed, step D runs.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">dag-diamond-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">diamond</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">echo</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:3.7</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">command</span>: [ <span style="color:#ae81ff">echo, &#34;{{inputs.parameters.message}}&#34; ]</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">diamond</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">dag</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">tasks</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">A</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">template</span>: <span style="color:#ae81ff">echo</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">parameters</span>: [ { <span style="color:#f92672">name: message, value</span>: <span style="color:#ae81ff">A } ]</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">B</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">dependencies</span>: [ <span style="color:#ae81ff">A ]</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">template</span>: <span style="color:#ae81ff">echo</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">parameters</span>: [ { <span style="color:#f92672">name: message, value</span>: <span style="color:#ae81ff">B } ]</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">C</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">dependencies</span>: [ <span style="color:#ae81ff">A ]</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">template</span>: <span style="color:#ae81ff">echo</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">parameters</span>: [ { <span style="color:#f92672">name: message, value</span>: <span style="color:#ae81ff">C } ]</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">D</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">dependencies</span>: [ <span style="color:#ae81ff">B, C ]</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">template</span>: <span style="color:#ae81ff">echo</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">parameters</span>: [ { <span style="color:#f92672">name: message, value</span>: <span style="color:#ae81ff">D } ]</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>argo submit dag.yaml -n argo --watch
</span></span></code></pre></div>
    <img src="/images/argo-workflow-dag.png"  alt="argo-workflow-dag"  class="center"  style="border-radius: 0px; width: 30%;"  />


<h3 id="enhanced-depends">Enhanced Depends</h3>
<p>The depends field can be enhanced, for example <code>depends: &quot;A &amp;&amp; B&quot;</code> means that task D depends on tasks A and B being completed at the same time, equivalent to <code>depends: [A, B]</code>. You can also examine the final state of the task, for example <code>depends: &quot;A.Succeeded&quot;</code> means that task D depends on task A being successfully completed.</p>
<p>Here is the Markdown table you wanted:</p>
<table>
<thead>
<tr>
<th>Task Result</th>
<th>Description</th>
<th>Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>.Succeeded</td>
<td>Task Succeeded</td>
<td>Task finished with no error</td>
</tr>
<tr>
<td>.Failed</td>
<td>Task Failed</td>
<td>Task exited with a non-0 exit code</td>
</tr>
<tr>
<td>.Errored</td>
<td>Task Errored</td>
<td>Task had an error other than a non-0 exit code</td>
</tr>
<tr>
<td>.Skipped</td>
<td>Task Skipped</td>
<td>Task was skipped</td>
</tr>
<tr>
<td>.Omitted</td>
<td>Task Omitted</td>
<td>Task was omitted</td>
</tr>
<tr>
<td>.Daemoned</td>
<td>Task is Daemoned and is not Pending</td>
<td></td>
</tr>
</tbody>
</table>
<p>The default omitted state is the successful state, for example:</p>
<ul>
<li><code>depends: &quot;A&quot;</code> is equivalent to <code>depends: &quot;(A.Succeeded || A.Skipped || A.Daemoned)&quot;</code>.</li>
<li><code>depends: &quot;task || task-2.Failed&quot;</code>
is equivalent to <code>depends: (task.Succeeded || task.Skipped || task.Daemoned) || task-2.Failed</code>.</li>
</ul>
<p>Logical operators are: <code>&amp;&amp;</code>,<code>||</code>,<code>!</code>.</p>
<h3 id="multi-root-dag">multi-root DAG</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># The following workflow executes a multi-root workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#   A   B</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#  / \ /</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># C   D</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">dag-multiroot-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">multiroot</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">echo</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:3.7</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">command</span>: [ <span style="color:#ae81ff">echo, &#34;{{inputs.parameters.message}}&#34; ]</span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">multiroot</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">dag</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">tasks</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">A</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">template</span>: <span style="color:#ae81ff">echo</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">parameters</span>: [ { <span style="color:#f92672">name: message, value</span>: <span style="color:#ae81ff">A } ]</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">B</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">template</span>: <span style="color:#ae81ff">echo</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">parameters</span>: [ { <span style="color:#f92672">name: message, value</span>: <span style="color:#ae81ff">B } ]</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">C</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">depends</span>: <span style="color:#e6db74">&#34;A&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">template</span>: <span style="color:#ae81ff">echo</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">parameters</span>: [ { <span style="color:#f92672">name: message, value</span>: <span style="color:#ae81ff">C } ]</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">D</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">depends</span>: <span style="color:#e6db74">&#34;A &amp;&amp; B&#34;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">template</span>: <span style="color:#ae81ff">echo</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">parameters</span>: [ { <span style="color:#f92672">name: message, value</span>: <span style="color:#ae81ff">D } ]</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>argo submit multi-root-dag.yaml -n argo --watch
</span></span></code></pre></div>
    <img src="/images/argo-workflow-multi-root.png"  alt="argo-workflow-multiroot-dag"  class="center"  style="border-radius: 0px; width: 40%;"  />


<h2 id="3-structure-of-workflow-specifications">3 Structure of Workflow Specifications</h2>
<p>Now we have a good understanding of the basic components of a workflow specification. Let&rsquo;s review its basic structure:</p>
<ul>
<li>Kubernetes header, including metadata</li>
<li>Spec body
<ul>
<li>Entrypoint invocation, optional arguments</li>
<li>List of template definitions
<ul>
<li>For each template definition
<ul>
<li>Name of the template</li>
<li>Optional list of inputs</li>
<li>Optional list of outputs</li>
<li>Container invocation (leaf template) or list of steps
<ul>
<li>For each step, template invocation</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>In summary, a workflow specification consists of a set of Argo templates, each of which consists of an optional input section, an optional output section, and either a container invocation or a set of steps, each of which invokes another template.</p>
<p>Please note that the container section of the workflow specification will accept the same options as the container section of a pod specification, including but not limited to environment variables, secrets, and volume mounts. Similarly, for volume claims and volumes.</p>
]]></content>
        </item>
        
        <item>
            <title>Argo Workflow 1</title>
            <link>https://Greenery-S.github.io/posts/devops/argo-workflow/argo-workflow-1/</link>
            <pubDate>Sat, 25 May 2024 03:46:15 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/posts/devops/argo-workflow/argo-workflow-1/</guid>
            <description>Argo Workflow (1) A lot of examples can be found here: https://github.com/argoproj/argo-workflows/tree/main/examples However, since the docker/whalesay image is no longer supported, many examples cannot run, and you need to build an image to replace it.
1 Argo CLI argo submit hello-world.yaml # submit a workflow spec to Kubernetes argo list # list current workflows argo get hello-world-xxx # get info about a specific workflow argo logs hello-world-xxx # print the logs from a workflow argo delete hello-world-xxx # delete workflow You can also use kubectl, but you need to specify the namespace.</description>
            <content type="html"><![CDATA[<h1 id="argo-workflow-1">Argo Workflow (1)</h1>
<p>A lot of examples can be found here: <a href="https://github.com/argoproj/argo-workflows/tree/main/examples">https://github.com/argoproj/argo-workflows/tree/main/examples</a>
However, since the <code>docker/whalesay</code> image is no longer supported, many examples cannot run, and you need to build an image to replace it.</p>
<h2 id="1-argo-cli">1 Argo CLI</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>argo submit hello-world.yaml    <span style="color:#75715e"># submit a workflow spec to Kubernetes</span>
</span></span><span style="display:flex;"><span>argo list                       <span style="color:#75715e"># list current workflows</span>
</span></span><span style="display:flex;"><span>argo get hello-world-xxx        <span style="color:#75715e"># get info about a specific workflow</span>
</span></span><span style="display:flex;"><span>argo logs hello-world-xxx       <span style="color:#75715e"># print the logs from a workflow</span>
</span></span><span style="display:flex;"><span>argo delete hello-world-xxx     <span style="color:#75715e"># delete workflow</span>
</span></span></code></pre></div><p>You can also use <code>kubectl</code>, but you need to specify the <code>namespace</code>.</p>
<h2 id="2-hello-world">2 Hello World</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow                 </span> <span style="color:#75715e"># new type of k8s spec</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">hello-world-   </span> <span style="color:#75715e"># name of the workflow spec</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">argosay         </span> <span style="color:#75715e"># invoke the whalesay template</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">argosay             </span> <span style="color:#75715e"># name of the template</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">yky8/argosay:v2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">command</span>: [<span style="color:#e6db74">&#34;/usr/local/bin/argosay&#34;</span>]
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo&#34;</span>, <span style="color:#e6db74">&#34;hello world!&#34;</span>]
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">resources</span>: <span style="color:#75715e"># limit the resources</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">limits</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">memory</span>: <span style="color:#ae81ff">32Mi</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">cpu</span>: <span style="color:#ae81ff">100m</span>
</span></span></code></pre></div><p>Execute <code>argo submit -n argo --watch hello-world.yaml</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Name:                hello-world-852mj
</span></span><span style="display:flex;"><span>Namespace:           argo
</span></span><span style="display:flex;"><span>ServiceAccount:      unset (will run with the default ServiceAccount)
</span></span><span style="display:flex;"><span>Status:              Succeeded
</span></span><span style="display:flex;"><span>Conditions:
</span></span><span style="display:flex;"><span> PodRunning          False
</span></span><span style="display:flex;"><span> Completed           True
</span></span><span style="display:flex;"><span>Created:             Sat May 25 02:58:27 +0800 (10 seconds ago)
</span></span><span style="display:flex;"><span>Started:             Sat May 25 02:58:27 +0800 (10 seconds ago)
</span></span><span style="display:flex;"><span>Finished:            Sat May 25 02:58:37 +0800 (now)
</span></span><span style="display:flex;"><span>Duration:            10 seconds
</span></span><span style="display:flex;"><span>Progress:            1/1
</span></span><span style="display:flex;"><span>ResourcesDuration:   0s*(1 cpu),1s*(100Mi memory)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>STEP                  TEMPLATE  PODNAME            DURATION  MESSAGE
</span></span><span style="display:flex;"><span> ✔ hello-world-852mj  argosay   hello-world-852mj  3s
</span></span></code></pre></div><h2 id="3-parameters">3 Parameters</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">hello-world-parameters-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># invoke the whalesay template with</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># &#34;hello world&#34; as the argument</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># to the message parameter</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">value</span>: <span style="color:#ae81ff">hello world</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">argosay</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message      </span> <span style="color:#75715e"># parameter declaration</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#75715e"># run cowsay with that message input parameter as args</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">image</span>: <span style="color:#ae81ff">yky8/argosay:v2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">command</span>: [ <span style="color:#e6db74">&#34;/usr/local/bin/argosay&#34;</span> ]
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">args</span>: [ <span style="color:#e6db74">&#34;echo&#34;</span> ,<span style="color:#e6db74">&#34;{{inputs.parameters.message}}&#34;</span> ]
</span></span></code></pre></div><p><strong>First type: parameter comes from <code>-p</code> argument</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>argo submit arguments-parameters.yaml -n argo -p message<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;goodbye world&#34;</span>
</span></span></code></pre></div><p><strong>Second type: parameter comes from file</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># params.yaml</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">message</span>: <span style="color:#ae81ff">goodbye world</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>argo submit arguments-parameters.yaml -n argo --parameter-file params.yaml
</span></span></code></pre></div><p><strong>Rewrite any parameters in the spec</strong>
Command-line arguments can also be used to override the default entry point and call any template in the workflow specification. For example, if you add a new version of the argosay template named argosay-caps, but you don&rsquo;t want to change the default entry point, you can call it with the following command line:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>argo submit arguments-parameters.yaml -n argo --entrypoint argosay-caps
</span></span></code></pre></div><p>By combining the use of <code>--entrypoint</code> and <code>-p</code> arguments, you can call any template in the workflow specification and pass any parameters you like.</p>
<p>The values set in <code>spec.arguments.parameters</code> are globally scoped and can be accessed via <code>{{workflow.parameters.parameter_name}}</code>. This is very useful for passing information to multiple steps in the workflow. For example, if you want to run the workflow with different log levels set in each container environment, you can create a YAML file similar to the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">global-parameters-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">A</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">log-level</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">value</span>: <span style="color:#ae81ff">INFO</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">A</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">containerA</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">LOG_LEVEL</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;{{workflow.parameters.log-level}}&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">runA]</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">B</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">containerB</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">LOG_LEVEL</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;{{workflow.parameters.log-level}}&#34;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">runB]</span>
</span></span></code></pre></div><p>In this workflow, steps A and B both set the log level to INFO, and you can easily change it between workflow submissions using the <code>-p</code> flag.</p>
<h3 id="what-is-the-difference-between-workflowparametersparam_name-and-inputsparametersparam_name">What is the difference between {{workflow.parameters.param_name}} and {{inputs.parameters.param_name}}?</h3>
<ul>
<li>{{workflow.parameters.param_name}}: This form of parameter is defined at the workflow level, that is, these parameters can be accessed throughout the entire workflow. These parameters are usually defined in the spec.arguments.parameters part of the workflow and can be overridden when submitting the workflow through command line parameters.</li>
<li>{{inputs.parameters.param_name}}: This form of parameter is defined at the template level, that is, these parameters can only be accessed in the template where they are defined. These parameters are usually defined in the inputs.parameters part of the template and can be passed to them by the workflow or other templates.</li>
</ul>
<p>In Argo Workflow, the use of <code>{{workflow.parameters.param_name}}</code> and <code>{{inputs.parameters.param_name}}</code> can be illustrated by the following example:</p>
<p>Suppose we have a workflow definition as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">example-workflow-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">main</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">workflow-param</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;This is a workflow parameter&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">main</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    - - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">step-one</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">template</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">arguments</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">value</span>: <span style="color:#e6db74">&#34;{{workflow.parameters.workflow-param}}&#34;</span>
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">print-message</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">inputs</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">parameters</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">message</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">alpine:latest</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#ae81ff">echo]</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;{{inputs.parameters.message}}&#34;</span>]
</span></span></code></pre></div><p>In this example, we defined a workflow parameter <code>workflow-param</code> and used it in the <code>step-one</code> step of the <code>main</code> template. We reference this workflow parameter through <code>{{workflow.parameters.workflow-param}}</code> and pass its value to the <code>message</code> parameter of the <code>print-message</code> template.</p>
<p>Then, in the <code>print-message</code> template, we defined an input parameter <code>message</code> and used it in the container command. We reference this input parameter through <code>{{inputs.parameters.message}}</code>.</p>
<p>So, when we run this workflow, the container of the <code>print-message</code> template will print &ldquo;This is a workflow parameter&rdquo;, which is the value of the <code>workflow-param</code> parameter.</p>
]]></content>
        </item>
        
        <item>
            <title>Quick Start With Self Build Image</title>
            <link>https://Greenery-S.github.io/posts/devops/argo-workflow/quick-start-with-self-build-image/</link>
            <pubDate>Sat, 25 May 2024 02:17:44 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/posts/devops/argo-workflow/quick-start-with-self-build-image/</guid>
            <description>A Somewhat Rocky &amp;ldquo;Quick&amp;rdquo; Start Recently, I wanted to review Argo Workflow, so I decided to start from the official documentation and follow the steps one by one. However, things didn&amp;rsquo;t go as smoothly as expected. The official docker/whalesay image is no longer supported in the latest Docker version, which has caused hundreds of hello world examples based on it to fail to run properly. So, I decided to build my own image to replace the official docker/whalesay image.</description>
            <content type="html"><![CDATA[<h1 id="a-somewhat-rocky-quick-start">A Somewhat Rocky &ldquo;Quick&rdquo; Start</h1>
<p>Recently, I wanted to review Argo Workflow, so I decided to start from the official documentation and follow the steps one by one. However, things didn&rsquo;t go as smoothly as expected. The official docker/whalesay image is no longer supported in the latest Docker version, which has caused hundreds of hello world examples based on it to fail to run properly. So, I decided to build my own image to replace the official docker/whalesay image.</p>
<h2 id="1-create-a-local-k8s-cluster">1 Create a Local k8s Cluster</h2>
<p>Create a local k8s cluster using miniKube for testing convenience.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>brew install minikube
</span></span><span style="display:flex;"><span>minikube start
</span></span><span style="display:flex;"><span>minikube dashboard
</span></span></code></pre></div><h2 id="2-download-argo-workflow">2 Download Argo Workflow</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>kubectl create namespace argo
</span></span><span style="display:flex;"><span>kubectl apply -n argo -f https://github.com/argoproj/argo-workflows/releases/download/v&lt;&lt;ARGO_WORKFLOWS_VERSION&gt;&gt;/quick-start-minimal.yaml
</span></span></code></pre></div><h2 id="3-build-your-own-image">3 Build Your Own Image</h2>
<h3 id="copy-whalesay-logic-to-argosay">Copy Whalesay Logic to Argosay</h3>
<p>This script has a rough usage of <code>argosay [command] [args]</code>, and then executes different logics based on the command.</p>
<ul>
<li>If the command is empty, it outputs &ldquo;hello argo&rdquo;.</li>
<li>If the command is assert_contains, it searches for the third parameter in the second parameter.</li>
<li>If the command is cat, it outputs the content of the second parameter.</li>
<li>If the command is echo, it outputs the content of the second parameter.</li>
<li>If the command is exit, it exits.</li>
<li>If the command is sleep, it sleeps.</li>
<li>If the command is sh, it executes the shell command in the second parameter.</li>
<li>Otherwise, it exits.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># argosay</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#!/bin/sh</span>
</span></span><span style="display:flex;"><span>set -eu
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> <span style="color:#e6db74">${</span>1<span style="color:#66d9ef">:-</span><span style="color:#e6db74">}</span> in
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;hello argo&#34;</span>
</span></span><span style="display:flex;"><span>    ;;
</span></span><span style="display:flex;"><span>  assert_contains<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    grep -F <span style="color:#e6db74">&#34;</span>$3<span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#34;</span>$2<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>  ;;
</span></span><span style="display:flex;"><span>  cat<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    cat <span style="color:#e6db74">&#34;</span>$2<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>  ;;
</span></span><span style="display:flex;"><span>  echo<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> $# in
</span></span><span style="display:flex;"><span>    1<span style="color:#f92672">)</span> echo <span style="color:#e6db74">&#34;hello argo&#34;</span> ;;
</span></span><span style="display:flex;"><span>    2<span style="color:#f92672">)</span> echo <span style="color:#e6db74">&#34;</span>$2<span style="color:#e6db74">&#34;</span> ;;
</span></span><span style="display:flex;"><span>    3<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>      mkdir -p <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>dirname $3<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>      echo <span style="color:#e6db74">&#34;</span>$2<span style="color:#e6db74">&#34;</span> &gt; <span style="color:#e6db74">&#34;</span>$3<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>      sleep 0.1 ;<span style="color:#75715e"># sleep so the PNS executor has time to secure root file</span>
</span></span><span style="display:flex;"><span>      ;;
</span></span><span style="display:flex;"><span>    default<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>      exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">esac</span>
</span></span><span style="display:flex;"><span>    ;;
</span></span><span style="display:flex;"><span>  exit<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    exit <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>2<span style="color:#66d9ef">:-</span>0<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    ;;
</span></span><span style="display:flex;"><span>  sleep<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    sleep <span style="color:#e6db74">&#34;</span>$2<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    ;;
</span></span><span style="display:flex;"><span>  sh<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    sh <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>2<span style="color:#66d9ef">:-</span>0<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    ;;
</span></span><span style="display:flex;"><span>  *<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">esac</span>
</span></span></code></pre></div><h3 id="build-the-image">Build the Image</h3>
<p>First, write a Dockerfile:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-DOCKERFILE" data-lang="DOCKERFILE"><span style="display:flex;"><span><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> alpine:latest</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> argosay /usr/local/bin/argosay<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> chmod +x /usr/local/bin/argosay<span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENTRYPOINT</span> [<span style="color:#e6db74">&#34;/usr/local/bin/argosay&#34;</span>]<span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>Login to Docker Hub, create a new repository, and then push the image.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>docker login
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>docker build -t argosay .
</span></span><span style="display:flex;"><span>docker tag argosay:latest <span style="color:#e6db74">&lt;&lt;DOCKER_HUB_USERNAME&gt;&gt;/argosay:latest
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">docker push &lt;&lt;DOCKER_HUB_USERNAME</span>&gt;&gt;/argosay:latest
</span></span></code></pre></div><h3 id="write-a-new-workflow-manifest">Write a New Workflow Manifest</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># argo-demo.yaml</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">apiVersion</span>: <span style="color:#ae81ff">argoproj.io/v1alpha1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">kind</span>: <span style="color:#ae81ff">Workflow</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">metadata</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">generateName</span>: <span style="color:#ae81ff">argosay-example-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">spec</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">entrypoint</span>: <span style="color:#ae81ff">argosay-example</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">templates</span>:
</span></span><span style="display:flex;"><span>  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">argosay-example</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">container</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">image</span>: <span style="color:#ae81ff">&lt;&lt;DOCKER_HUB_USERNAME&gt;&gt;/argosay:latest </span> <span style="color:#75715e"># Replace with your image path in the remote repository</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">command</span>: [<span style="color:#e6db74">&#34;/usr/local/bin/argosay&#34;</span>]
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">args</span>: [<span style="color:#e6db74">&#34;echo&#34;</span>, <span style="color:#e6db74">&#34;hello world!&#34;</span>]
</span></span></code></pre></div><h2 id="4-submit-the-workflow">4 Submit the Workflow</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>argo submit -n argo --watch argo-demo.yaml
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># View the workflow</span>
</span></span><span style="display:flex;"><span>argo list -n argo
</span></span><span style="display:flex;"><span>argo get -n argo <span style="color:#e6db74">&lt;&lt;WORKFLOW_NAME&gt;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">argo logs -n argo &lt;&lt;WORKFLOW_NAME</span>&gt;&gt;
</span></span></code></pre></div><h2 id="5-view-in-ui">5 View in UI</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>kubectl port-forward svc/argo-server -n argo 2746:2746
</span></span><span style="display:flex;"><span>open http://localhost:2746
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Hash Function vs Symmetric Encryption</title>
            <link>https://Greenery-S.github.io/posts/go/encryption/hash-function-vs-symmetric-encryption/</link>
            <pubDate>Wed, 22 May 2024 23:29:47 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/posts/go/encryption/hash-function-vs-symmetric-encryption/</guid>
            <description>Core Differences between Symmetric Encryption and Hash Functions 1 Symmetric Encryption Purpose: Protect the confidentiality of data, preventing unauthorized access.
Working Principle: Utilizes the same key for both encryption and decryption of data.
Characteristics:
Reversibility: Decrypting ciphertext to retrieve the original data using the same key is possible. Key Management: Securely sharing the key is crucial, as data remains inaccessible without it. Applications: Secure communication, data storage, digital signatures, etc.</description>
            <content type="html"><![CDATA[<h1 id="core-differences-between-symmetric-encryption-and-hash-functions">Core Differences between Symmetric Encryption and Hash Functions</h1>
<h2 id="1-symmetric-encryption">1 Symmetric Encryption</h2>
<p><strong>Purpose:</strong> Protect the confidentiality of data, preventing unauthorized access.</p>
<p><strong>Working Principle:</strong> Utilizes the same key for both encryption and decryption of data.</p>
<p><strong>Characteristics:</strong></p>
<ul>
<li>Reversibility: Decrypting ciphertext to retrieve the original data using the same key is possible.</li>
<li>Key Management: Securely sharing the key is crucial, as data remains inaccessible without it.</li>
</ul>
<p><strong>Applications:</strong> Secure communication, data storage, digital signatures, etc.</p>
<h2 id="2-hash-functions">2 Hash Functions</h2>
<p><strong>Purpose:</strong> Verify the integrity and authenticity of data.</p>
<p><strong>Working Principle:</strong> Converts inputs of any length into fixed-length hash values.</p>
<p><strong>Characteristics:</strong></p>
<ul>
<li>One-way Property: Deriving the original input from the hash value is computationally infeasible.</li>
<li>Collision Resistance: Finding two different inputs that generate the same hash value is extremely difficult.</li>
<li>Integrity: Any modification to the input will result in a different hash value.</li>
</ul>
<p><strong>Applications:</strong> File integrity verification, password storage, digital signatures, etc.</p>
<h2 id="3-summary">3 Summary</h2>
<table>
<thead>
<tr>
<th>Feature</th>
<th>Symmetric Encryption</th>
<th>Hash Functions</th>
</tr>
</thead>
<tbody>
<tr>
<td>Purpose</td>
<td>Confidentiality</td>
<td>Integrity and Authenticity</td>
</tr>
<tr>
<td>Reversibility</td>
<td>Reversible</td>
<td>Irreversible</td>
</tr>
<tr>
<td>Key Management</td>
<td>Requires Key Management</td>
<td>No Key Management Required</td>
</tr>
<tr>
<td>Output</td>
<td>Encrypted Data</td>
<td>Hash Value</td>
</tr>
</tbody>
</table>
<p>Symmetric encryption and hash functions are both essential cryptographic techniques for safeguarding data security. They differ in their working principles, applications, and security aspects. The choice of technique depends on the specific application requirements.</p>
]]></content>
        </item>
        
        <item>
            <title>Open Compare to Openfile</title>
            <link>https://Greenery-S.github.io/posts/go/memo/open-compare-to-openfile/</link>
            <pubDate>Wed, 22 May 2024 22:15:28 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/posts/go/memo/open-compare-to-openfile/</guid>
            <description>os.Open vs. os.OpenFile 1 Differences In Go, both os.Open and os.OpenFile are functions used to open files, but they have different usage scenarios and functionalities.
os.Open: This is a simpler function for opening files. It takes only one argument, the path to the file to be opened. It opens the file in read-only mode and returns an error if the file does not exist. file, err := os.Open(&amp;#34;example.txt&amp;#34;) if err !</description>
            <content type="html"><![CDATA[<h1 id="osopen-vs-osopenfile">os.Open vs. os.OpenFile</h1>
<h2 id="1-differences">1 Differences</h2>
<p>In Go, both <code>os.Open</code> and <code>os.OpenFile</code> are functions used to open files, but they have different usage scenarios and functionalities.</p>
<ol>
<li><code>os.Open</code>: This is a simpler function for opening files. It takes only one argument, the path to the file to be opened. It opens the file in read-only mode and returns an error if the file does not exist.</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">file</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#e6db74">&#34;example.txt&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">file</span>.<span style="color:#a6e22e">Close</span>()
</span></span></code></pre></div><ol start="2">
<li><code>os.OpenFile</code>: This is a more powerful function for opening files. It takes three arguments: the file path, the file opening mode, and the file permissions. It can open files in various modes (such as read-only, write-only, read-write, append, create, etc.), and it can create a new file if it does not exist.</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">file</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">OpenFile</span>(<span style="color:#e6db74">&#34;example.txt&#34;</span>, <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">O_CREATE</span>|<span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">O_WRONLY</span>, <span style="color:#ae81ff">0644</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">file</span>.<span style="color:#a6e22e">Close</span>()
</span></span></code></pre></div><p>In this example, <code>os.OpenFile</code> opens the file in write mode. If the file does not exist, it creates a new file. The file permissions are set to 0644, which means that the file owner can read and write to the file, while other users can only read the file.</p>
<p>In general, if you only need to open a file in read-only mode, you can use <code>os.Open</code>. If you need more control (such as setting file permissions or opening files in different modes), you should use <code>os.OpenFile</code>.</p>
<h2 id="2-modes-and-permissions">2 Modes and Permissions</h2>
<p>When using the <code>os.OpenFile</code> function to open or create a file in Go, you need to specify two parameters: mode (flag) and permissions (permission).</p>
<h3 id="mode-flag">Mode (flag)</h3>
<p>This parameter determines how you open the file. Go provides some predefined constants to set this parameter:</p>
<ul>
<li><code>os.O_RDONLY</code>: Opens the file in read-only mode.</li>
<li><code>os.O_WRONLY</code>: Opens the file in write-only mode.</li>
<li><code>os.O_RDWR</code>: Opens the file in read-write mode.</li>
<li><code>os.O_APPEND</code>: When writing data, appends the data to the end of the file instead of overwriting existing content.</li>
<li><code>os.O_CREATE</code>: Creates a new file if it does not exist.</li>
<li><code>os.O_TRUNC</code>: If the file already exists, clears the file&rsquo;s contents before writing data.</li>
</ul>
<p>These constants can be combined using the logical OR operator (<code>|</code>) to set multiple modes. For example, <code>os.O_CREATE|os.O_WRONLY</code> opens the file in write-only mode and creates a new file if it does not exist.</p>
<h3 id="permissions-permission">Permissions (permission)</h3>
<p>This parameter determines the file&rsquo;s permissions. It is an octal number, typically consisting of three digits. Each digit represents the permissions for the file owner, the file&rsquo;s group, and other users.</p>
<ul>
<li>The first digit represents the file owner&rsquo;s permissions.</li>
<li>The second digit represents the permissions of the file&rsquo;s group.</li>
<li>The third digit represents the permissions of other users.</li>
</ul>
<p>Each digit is an integer from 0 to 7, representing the following combinations of permissions:</p>
<ul>
<li>4: Read permission</li>
<li>2: Write permission</li>
<li>1: Execute permission</li>
</ul>
<p>For example:</p>
<ul>
<li>Permission 0644 means that the file owner has read and write permissions (6 = 4 + 2), while the file&rsquo;s group and other users only have read permissions (4).</li>
<li>Permission 0777 means that all users have read, write, and execute permissions.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>File Encryption</title>
            <link>https://Greenery-S.github.io/posts/go/encryption/file-encryption/</link>
            <pubDate>Wed, 22 May 2024 17:42:47 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/posts/go/encryption/file-encryption/</guid>
            <description>File Encryption code: https://github.com/Greenery-S/go-encryption/tree/master/enc_file
1 Symmetric Encryption Every step of the encryption process is reversible The same set of keys is used for encryption and decryption XOR is the simplest symmetric encryption algorithm Typical symmetric encryption algorithms: DES (Data Encryption Standard), AES (Advanced Encryption Standard)
2 Group Encryption Group encryption: The original data (plaintext) is grouped, each group is 64 bits, and when the last group is less than 64 bits, it is filled according to certain rules.</description>
            <content type="html"><![CDATA[<h1 id="file-encryption">File Encryption</h1>
<blockquote>
<p>code: <a href="https://github.com/Greenery-S/go-encryption/tree/master/enc_file">https://github.com/Greenery-S/go-encryption/tree/master/enc_file</a></p>
</blockquote>
<h2 id="1-symmetric-encryption">1 Symmetric Encryption</h2>

    <img src="/images/file-encryption-symmetric.png"  alt="symmetric-encryption"  class="center"  style="border-radius: 0px; width: 50%;"  />


<ul>
<li>Every step of the encryption process is <strong>reversible</strong></li>
<li>The same set of keys is used for <strong>encryption and decryption</strong></li>
<li>XOR is the simplest symmetric encryption algorithm

      <img src="/images/file-encryption-xor.png"  alt="symmetric-encryption"  class="center"  style="border-radius: 0px; width: 80%;"  />
  
</li>
</ul>
<p>Typical symmetric encryption algorithms: DES (Data Encryption Standard), AES (Advanced Encryption Standard)</p>
<h2 id="2-group-encryption">2 Group Encryption</h2>
<ul>
<li>Group encryption: The original data (plaintext) is grouped, each group is 64 bits, and when the last group is less than 64 bits, it is filled according to certain rules. The DES algorithm is applied separately to each group</li>
<li>CBC (Cipher Block Chaining) ciphertext group link mode, the current plaintext group is XORed with the previous ciphertext group, and then encrypted</li>
</ul>

    <img src="/images/file-encryption-cbc.png"  alt="symmetric-encryption"  class="center"  style="border-radius: 0px; width: 100%;"  />


<p>See the code link for the code.</p>
<h3 id="digital-padding">Digital Padding</h3>
<p>PKCS#5 and PKCS#7 are two common data padding standards, both of which are part of the PKCS (Public-Key Cryptography Standards) series of standards.</p>
<ul>
<li>PKCS#5: Mainly used to describe the padding method of block ciphers in cryptography. In practical applications, when the size of the data block is not the fixed length required by the password algorithm, padding is required. The PKCS#5 padding method is to pad a byte sequence at the end of the data block, <strong>each byte&rsquo;s value is equal to the number of missing bytes</strong>. For example, if the data block length is 6, and the <strong>password algorithm requires a length of 8</strong>, two bytes need to be padded at the end of the data block, each byte&rsquo;s value is 2.</li>
<li>PKCS#7: It is an extension of PKCS#5, it supports data blocks of any length, not just 8 bytes. The <strong>padding method of PKCS#7 is the same as PKCS#5</strong>, both are to pad a byte sequence at the end of the data block, each byte&rsquo;s value is equal to the number of missing bytes.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// pkcs7padding and pkcs5padding have the same padding method, the value of the padding byte is equal to the number of padding bytes.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// For example, if you need to pad 4 bytes, the padding value is &#34;4 4 4 4&#34;.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> (
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// only difference is the block size, PKCS5 is 8 bytes, PKCS7 can be any bytes
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">PKCS5</span>          = <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">pkcs5</span>{}
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">PKCS7</span>          = <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">pkcs5</span>{}
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ErrPaddingSize</span> = <span style="color:#a6e22e">errors</span>.<span style="color:#a6e22e">New</span>(<span style="color:#e6db74">&#34;padding size error&#34;</span>)
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// pkcs5Padding is a pkcs5 padding struct.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">pkcs5</span> <span style="color:#66d9ef">struct</span>{}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Padding implements the Padding interface Padding method.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">p</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">pkcs5</span>) <span style="color:#a6e22e">Padding</span>(<span style="color:#a6e22e">src</span> []<span style="color:#66d9ef">byte</span>, <span style="color:#a6e22e">blockSize</span> <span style="color:#66d9ef">int</span>) []<span style="color:#66d9ef">byte</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">srcLen</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">src</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">//Note: When srcLen is an integer multiple of blockSize, padLen is equal to blockSize rather than 0
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">padLen</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">blockSize</span> <span style="color:#f92672">-</span> (<span style="color:#a6e22e">srcLen</span> <span style="color:#f92672">%</span> <span style="color:#a6e22e">blockSize</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">padText</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">bytes</span>.<span style="color:#a6e22e">Repeat</span>([]<span style="color:#66d9ef">byte</span>{byte(<span style="color:#a6e22e">padLen</span>)}, <span style="color:#a6e22e">padLen</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> append(<span style="color:#a6e22e">src</span>, <span style="color:#a6e22e">padText</span><span style="color:#f92672">...</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Unpadding implements the Padding interface Unpadding method.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">p</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">pkcs5</span>) <span style="color:#a6e22e">Unpadding</span>(<span style="color:#a6e22e">src</span> []<span style="color:#66d9ef">byte</span>, <span style="color:#a6e22e">blockSize</span> <span style="color:#66d9ef">int</span>) ([]<span style="color:#66d9ef">byte</span>, <span style="color:#66d9ef">error</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">srcLen</span> <span style="color:#f92672">:=</span> len(<span style="color:#a6e22e">src</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">paddingLen</span> <span style="color:#f92672">:=</span> int(<span style="color:#a6e22e">src</span>[<span style="color:#a6e22e">srcLen</span><span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>])
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">paddingLen</span> <span style="color:#f92672">&gt;=</span> <span style="color:#a6e22e">srcLen</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">paddingLen</span> &gt; <span style="color:#a6e22e">blockSize</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">ErrPaddingSize</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">src</span>[:<span style="color:#a6e22e">srcLen</span><span style="color:#f92672">-</span><span style="color:#a6e22e">paddingLen</span>], <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">o</span> <span style="color:#f92672">:=</span> []byte(<span style="color:#e6db74">&#34;hello world!&#34;</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">p</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">PKCS5</span>.<span style="color:#a6e22e">Padding</span>(<span style="color:#a6e22e">o</span>, <span style="color:#ae81ff">8</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">u</span>, <span style="color:#a6e22e">_</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">PKCS5</span>.<span style="color:#a6e22e">Unpadding</span>(<span style="color:#a6e22e">p</span>, <span style="color:#ae81ff">8</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">p</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// [104 101 108 108 111 32 119 111 114 108 100 33 4 4 4 4]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">u</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// [104 101 108 108 111 32 119 111 114 108 100 33]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><h2 id="3-asymmetric-encryption">3 Asymmetric Encryption</h2>

    <img src="/images/file-encryption-asymmetric.png"  alt="asymmetric-encryption"  class="center"  style="border-radius: 0px; width: 50%;"  />


<ul>
<li>Encrypt with the public key, decrypt with the private key</li>
<li>The public key and the private key are different
<ul>
<li>The public key can be published to everyone</li>
<li><strong>The private key is only saved by yourself</strong></li>
</ul>
</li>
<li><strong>The public key is derived from the private key</strong></li>
<li>Compared to symmetric encryption, <strong>the operation speed is very slow</strong></li>
<li>Blockchain technology is the application of asymmetric encryption technology

      <img src="/images/file-encryption-blockchain.png"  alt="asymmetric-encryption"  class="center"  style="border-radius: 0px; width: 80%;"  />
  
</li>
</ul>
<p>Typical asymmetric encryption algorithms: RSA (Ron Rivest, Adi Shamir, Leonard Adleman), ECC (Elliptic Curve Cryptography) elliptic curve encryption algorithm</p>
<p>In the next lecture &ldquo;Digital Signature&rdquo;, we will talk about the go code of asymmetric encryption.</p>
]]></content>
        </item>
        
        <item>
            <title>Introduction to Clickhouse</title>
            <link>https://Greenery-S.github.io/posts/go/database/introduction-to-clickhouse/</link>
            <pubDate>Wed, 22 May 2024 15:08:40 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/posts/go/database/introduction-to-clickhouse/</guid>
            <description>ClickHouse code: https://github.com/Greenery-S/go-database/tree/master/clickhouse
1 Introduction ClickHouse is a columnar database management system (DBMS) for online analytical processing (OLAP).
In traditional row-based database systems (MySQL, SQL Server), data in the same row is always physically stored together. In columnar database systems (ClickHouse, HBase, Druid), data from the same column is stored together.
Key characteristics of OLAP scenarios (statistical analysis based on event tracking data):
The vast majority are read requests, and data added to the database cannot be modified.</description>
            <content type="html"><![CDATA[<h1 id="clickhouse">ClickHouse</h1>
<blockquote>
<p>code: <a href="https://github.com/Greenery-S/go-database/tree/master/clickhouse">https://github.com/Greenery-S/go-database/tree/master/clickhouse</a></p>
</blockquote>
<h2 id="1-introduction">1 Introduction</h2>
<p>ClickHouse is a columnar database management system (DBMS) for online analytical processing (OLAP).</p>
<p>In traditional row-based database systems (MySQL, SQL Server), data in the same row is always physically stored together. In columnar database systems (ClickHouse, HBase, Druid), data from the same column is stored together.</p>
<p>Key characteristics of OLAP scenarios (statistical analysis based on event tracking data):</p>
<ol>
<li>The vast majority are read requests, and data added to the database cannot be modified.</li>
<li>Wide tables, meaning each table contains a large number of columns.</li>
<li>For reads, a significant number of rows are extracted from the database, but only a small portion of the columns.</li>
<li>Relatively few queries (typically hundreds or fewer per second per server).</li>
<li>For simple queries, a latency of about 50 milliseconds is acceptable.</li>
<li>Data in columns is relatively small: numbers and short strings (e.g., 60 bytes per URL).</li>
<li>High throughput is required when processing a single query (up to billions of rows per second per server).</li>
<li>Transactions are not necessary.</li>
</ol>
<h2 id="2-usage">2 Usage</h2>
<p>Its SQL syntax is similar to MySQL, but there are some differences.</p>
<p>Creating a database and table:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">database</span> test;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">-- json type is experimental feature
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">set</span> allow_experimental_object_type <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> test.<span style="color:#66d9ef">user</span>
</span></span><span style="display:flex;"><span>(
</span></span><span style="display:flex;"><span>    user_id     UInt32 <span style="color:#66d9ef">comment</span> <span style="color:#e6db74">&#39;User ID&#39;</span>,       <span style="color:#75715e">-- User ID
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    name        String <span style="color:#66d9ef">comment</span> <span style="color:#e6db74">&#39;User Name&#39;</span>,     <span style="color:#75715e">-- User Name
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    create_time DateTime <span style="color:#66d9ef">comment</span> <span style="color:#e6db74">&#39;Registration Time&#39;</span>, <span style="color:#75715e">-- Registration Time
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    extra       Json <span style="color:#66d9ef">comment</span> <span style="color:#e6db74">&#39;Additional Info&#39;</span>  <span style="color:#75715e">-- Additional Info, json can freely extend fields
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>) ENGINE <span style="color:#f92672">=</span> MergeTree()
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">PRIMARY</span> <span style="color:#66d9ef">KEY</span> (create_time);
</span></span></code></pre></div><p>Querying data:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">WITH</span>
</span></span><span style="display:flex;"><span>    toDateTime(<span style="color:#e6db74">&#39;2023-09-01&#39;</span>, <span style="color:#e6db74">&#39;UTC&#39;</span>) <span style="color:#66d9ef">AS</span> begin_day,
</span></span><span style="display:flex;"><span>    toDateTime(<span style="color:#e6db74">&#39;2023-09-08&#39;</span>, <span style="color:#e6db74">&#39;UTC&#39;</span>) <span style="color:#66d9ef">AS</span> end_day
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">SELECT</span> toDate(create_time) <span style="color:#66d9ef">AS</span> date,
</span></span><span style="display:flex;"><span>       uniq(user_id)       <span style="color:#66d9ef">AS</span> <span style="color:#f92672">`</span>Number <span style="color:#66d9ef">of</span> Registered Users<span style="color:#f92672">`</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">FROM</span> test.<span style="color:#66d9ef">user</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">WHERE</span> (create_time <span style="color:#f92672">&gt;=</span> begin_day)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">AND</span> (create_time <span style="color:#f92672">&lt;</span> end_day)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">GROUP</span> <span style="color:#66d9ef">BY</span> date
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">ORDER</span> <span style="color:#66d9ef">BY</span> date;
</span></span></code></pre></div><h2 id="3-go-sdk">3 Go SDK</h2>
<p>See code.</p>
<h2 id="4-creating-dashboards">4 Creating Dashboards</h2>
<p>Generate business reports based on ClickHouse and Grafana.</p>

    <img src="/images/introduction-to-clickhouse-dashboard.png"  alt="dashboard"  class="center"  style="border-radius: 0px; width: 100%;"  />


]]></content>
        </item>
        
        <item>
            <title>Introduction to Mongo</title>
            <link>https://Greenery-S.github.io/posts/go/database/introduction-to-mongo/</link>
            <pubDate>Wed, 22 May 2024 01:23:35 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/posts/go/database/introduction-to-mongo/</guid>
            <description>MongoDB code: https://github.com/Greenery-S/go-database/tree/master/mongo
1 Introduction Mongo is a document-oriented database, and it contrasts with relational databases as follows. Mongo&amp;rsquo;s greatest feature is its schema flexibility, meaning you can store documents with completely different structures in the same collection. This is especially useful in the early stages of a project when the table fields are not yet stable. Compared to MySQL, Mongo is better suited for storing large, low-value data. The read and write performance for large documents is better in Mongo than in MySQL.</description>
            <content type="html"><![CDATA[<h1 id="mongodb">MongoDB</h1>
<blockquote>
<p>code: <a href="https://github.com/Greenery-S/go-database/tree/master/mongo">https://github.com/Greenery-S/go-database/tree/master/mongo</a></p>
</blockquote>
<h2 id="1-introduction">1 Introduction</h2>

    <img src="/images/introduction-to-mongo-compare-to-mysql.png"  alt="compare-to-mysql"  class="center"  style="border-radius: 0px; width: 80%;"  />


<ul>
<li>Mongo is a document-oriented database, and it contrasts with relational databases as follows.</li>
<li>Mongo&rsquo;s greatest feature is its schema flexibility, meaning you can store documents with completely different structures in the same collection. This is especially useful in the early stages of a project when the table fields are not yet stable.</li>
<li>Compared to MySQL, Mongo is better suited for storing large, low-value data. The read and write performance for large documents is better in Mongo than in MySQL.</li>
</ul>
<h2 id="2-syntax">2 Syntax</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>use test;  <span style="color:#75715e"># Switch to the test database, which will be automatically created if it doesn&#39;t exist when a collection is created</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>show collections  <span style="color:#75715e"># View the collections in the database</span>
</span></span><span style="display:flex;"><span>db.createCollection<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;student&#34;</span><span style="color:#f92672">)</span>;  <span style="color:#75715e"># Create a collection</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>db.createUser<span style="color:#f92672">({</span>user: <span style="color:#e6db74">&#34;tester&#34;</span>,pwd: <span style="color:#e6db74">&#34;123456&#34;</span>, roles: <span style="color:#f92672">[{</span>role: <span style="color:#e6db74">&#34;dbAdmin&#34;</span>, db: <span style="color:#e6db74">&#34;test&#34;</span><span style="color:#f92672">}]})</span>; <span style="color:#75715e"># Create a user</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Log in with the newly created tester user:</span>
</span></span><span style="display:flex;"><span>mongo --port <span style="color:#ae81ff">27017</span> -u <span style="color:#e6db74">&#34;tester&#34;</span> -p <span style="color:#e6db74">&#34;123456&#34;</span> --authenticationDatabase <span style="color:#e6db74">&#34;test&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>db.student.createIndex<span style="color:#f92672">({</span>name:1,unique:1<span style="color:#f92672">})</span> <span style="color:#75715e"># Create a unique index on the name field, 1 for ascending order, -1 for descending order</span>
</span></span><span style="display:flex;"><span>db.student.dropIndex<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;name_1_unique_1&#34;</span><span style="color:#f92672">)</span>  <span style="color:#75715e"># Delete the index</span>
</span></span><span style="display:flex;"><span>db.student.getIndexes<span style="color:#f92672">()</span>  <span style="color:#75715e"># View the indexes</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>db.student.insertOne<span style="color:#f92672">({</span>name:<span style="color:#e6db74">&#34;张三&#34;</span>,city:<span style="color:#e6db74">&#34;北京&#34;</span><span style="color:#f92672">})</span>;  <span style="color:#75715e"># Insert a single record</span>
</span></span><span style="display:flex;"><span>db.student.insertMany<span style="color:#f92672">([{</span>name:<span style="color:#e6db74">&#34;张三&#34;</span>,city:<span style="color:#e6db74">&#34;北京&#34;</span><span style="color:#f92672">}</span>,<span style="color:#f92672">{</span>name:<span style="color:#e6db74">&#34;李四&#34;</span>,gender:<span style="color:#e6db74">&#34;女&#34;</span><span style="color:#f92672">}])</span>;  <span style="color:#75715e"># Insert multiple records</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>db.student.find<span style="color:#f92672">({</span>name:<span style="color:#e6db74">&#34;张三&#34;</span><span style="color:#f92672">})</span>;  <span style="color:#75715e"># Find records that match the condition</span>
</span></span><span style="display:flex;"><span>db.student.find<span style="color:#f92672">({})</span>;  <span style="color:#75715e"># View all records in the collection</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>db.student.updateOne<span style="color:#f92672">({</span>name:<span style="color:#e6db74">&#34;张三&#34;</span><span style="color:#f92672">}</span>,<span style="color:#f92672">{</span>$set:<span style="color:#f92672">{</span>gender:<span style="color:#e6db74">&#34;女&#34;</span><span style="color:#f92672">}})</span>;  <span style="color:#75715e"># Update a single record</span>
</span></span><span style="display:flex;"><span>db.student.updateMany<span style="color:#f92672">({</span>name:<span style="color:#e6db74">&#34;张三&#34;</span><span style="color:#f92672">}</span>,<span style="color:#f92672">{</span>$set:<span style="color:#f92672">{</span>gender:<span style="color:#e6db74">&#34;女&#34;</span><span style="color:#f92672">}})</span>;  <span style="color:#75715e"># Update all records that match the condition</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>db.student.deleteOne<span style="color:#f92672">({</span>name:<span style="color:#e6db74">&#34;张三&#34;</span><span style="color:#f92672">})</span>;  db.student.deleteMany<span style="color:#f92672">({</span>name:<span style="color:#e6db74">&#34;张三&#34;</span><span style="color:#f92672">})</span>;  <span style="color:#75715e"># Delete records</span>
</span></span><span style="display:flex;"><span>db.student.drop<span style="color:#f92672">()</span>;  <span style="color:#75715e"># Drop the collection</span>
</span></span></code></pre></div><h2 id="3-using-mongo-with-go">3 Using Mongo with Go</h2>
<h3 id="connection">Connection</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">ctx</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>()
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">option</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">options</span>.<span style="color:#a6e22e">Client</span>().<span style="color:#a6e22e">ApplyURI</span>(<span style="color:#e6db74">&#34;mongodb://127.0.0.1:27017&#34;</span>).
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">SetConnectTimeout</span>(<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Second</span>). <span style="color:#75715e">// Connection timeout duration
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#75715e">// AuthSource represents the Database
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#a6e22e">SetAuth</span>(<span style="color:#a6e22e">options</span>.<span style="color:#a6e22e">Credential</span>{<span style="color:#a6e22e">Username</span>: <span style="color:#e6db74">&#34;tester&#34;</span>, <span style="color:#a6e22e">Password</span>: <span style="color:#e6db74">&#34;123456&#34;</span>, <span style="color:#a6e22e">AuthSource</span>: <span style="color:#e6db74">&#34;test&#34;</span>})
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">client</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">mongo</span>.<span style="color:#a6e22e">Connect</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#a6e22e">option</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">CheckError</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">Ping</span>(<span style="color:#a6e22e">ctx</span>, <span style="color:#66d9ef">nil</span>) <span style="color:#75715e">// A successful ping indicates a successful connection, not just the absence of an error from Connect
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">CheckError</span>(<span style="color:#a6e22e">err</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">Disconnect</span>(<span style="color:#a6e22e">ctx</span>) <span style="color:#75715e">// Release the connection
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><h3 id="crud-operations">CRUD Operations</h3>
<p>See the code repository for examples.</p>
]]></content>
        </item>
        
        <item>
            <title>Be Careful When Choosing House</title>
            <link>https://Greenery-S.github.io/posts/life/singapore/be-careful-when-choosing-house/</link>
            <pubDate>Wed, 22 May 2024 00:43:27 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/posts/life/singapore/be-careful-when-choosing-house/</guid>
            <description>Be Careful When Choosing a Place to Stay in Singapore When you come to Singapore, be careful when choosing a place to stay.
What is a poor person&amp;rsquo;s house? I refer to those who rent out a room in their own residence.
These landlords usually have significant financial pressures. On the one hand, they bought an HDB flat but need to rent out a room to help with their mortgage payments; on the other hand, they may be very picky about tenants, leading to conflicts and an atmosphere that feels more like a student dormitory than a home.</description>
            <content type="html"><![CDATA[<h1 id="be-careful-when-choosing-a-place-to-stay-in-singapore">Be Careful When Choosing a Place to Stay in Singapore</h1>
<p>When you come to Singapore, be careful when choosing a place to stay.</p>
<p>What is a poor person&rsquo;s house? I refer to those who rent out a room in their own residence.</p>
<p>These landlords usually have significant financial pressures. On the one hand, they bought an HDB flat but need to rent out a room to help with their mortgage payments; on the other hand, they may be very picky about tenants, leading to conflicts and an atmosphere that feels more like a student dormitory than a home.</p>
<p>Let me first talk about the normal renting process: viewing the house, paying the deposit, moving in, paying monthly rent, moving out, inspection, and returning the deposit. As long as the room is in the same condition when you move out as when you moved in, the deposit should not be deducted. It’s like &ldquo;eventual consistency&rdquo; in computing: as long as the final state of the room is okay, everything is fine. My experience with the popular Interlace Place condo was like this; the landlord or agent wouldn’t interfere with your normal life.</p>
<p>However, living in a &ldquo;poor person&rsquo;s house&rdquo; can be different. The landlord may frequently check your room, suspecting you of causing damage, and sometimes even invading your privacy.</p>
<p>Even more troubling is that sometimes landlords may ask for rent in advance for various reasons. For example, one landlord I had would ask for rent 15 to 23 days early every month, citing reasons like &ldquo;school fees,&rdquo; &ldquo;medical bills,&rdquo; or &ldquo;hosting a banquet.&rdquo; These requests became a monthly occurrence, hoping for understanding and help.</p>
<p>As a programmer, I value agreements and contracts, so I was not swayed by these emotional requests. I aimed to balance supporting the landlord while protecting my own interests, often refusing to pay rent in advance.</p>
<p>For the last two months, I was very lenient with the landlord’s family. They frequently asked for partial rent payments in advance, and I generally agreed. Additionally, I was out of the room 60% of the time each week, either visiting friends or taking care of my sister. Eventually, during my exam period, I was away for an entire month. When I returned, I found they had taken advance rent payments as a given, showing no respect for my boundaries. I immediately refused their request that month and communicated my stance through the agent, hoping they would understand.</p>
<p>Yesterday, with 10 days left until rent was due, the landlord asked for $100 again, but this time their tone was very pleading. I felt it was enough, so I gave them the money, and they were very grateful.</p>
<p>But I was exhausted. I don&rsquo;t enjoy manipulating people, and this place was indeed unsuitable for long-term rental. I contacted a monthly hotel rental service and decided to stay in a hotel for a month. When I discussed this with the landlord, I knew my deposit might not be fully returned, so I offered to accept only 50% of it back. However, they were in such financial difficulty that they begged me to stay another month and apply the deposit to that month&rsquo;s rent. Knowing I might incur some loss, I accepted as it seemed the only way for them to repay me.</p>
<p>Many people in Singapore face tough living conditions, especially those with financial difficulties. We can&rsquo;t change everyone&rsquo;s circumstances, but we can choose suitable living arrangements to avoid unnecessary troubles. I hope everyone can find a living situation that suits them.</p>
]]></content>
        </item>
        
        <item>
            <title>Introduction to Redis</title>
            <link>https://Greenery-S.github.io/posts/go/database/introduction-to-redis/</link>
            <pubDate>Sun, 19 May 2024 22:11:16 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/posts/go/database/introduction-to-redis/</guid>
            <description>Redis Code: https://github.com/Greenery-S/go-database/tree/master/redis
1 Introduction Redis is an in-memory data storage system. Since it is based on memory, it is fast, being 10 to 100 times faster than MySQL. To prevent data loss, data is periodically persisted to disk. Redis is deployed separately from the business application, so it can serve as a distributed cache. It supports a rich variety of data types: strings, hashes, lists, sets, and sorted sets. It supports the publish/subscribe model, where publishers send messages to specified channels, and subscribers can receive and process these messages.</description>
            <content type="html"><![CDATA[<h1 id="redis">Redis</h1>
<blockquote>
<p>Code: <a href="https://github.com/Greenery-S/go-database/tree/master/redis">https://github.com/Greenery-S/go-database/tree/master/redis</a></p>
</blockquote>
<h2 id="1-introduction">1 Introduction</h2>
<ul>
<li>Redis is an in-memory data storage system.</li>
<li>Since it is based on memory, it is fast, being 10 to 100 times faster than MySQL.</li>
<li>To prevent data loss, data is periodically persisted to disk.</li>
<li>Redis is deployed separately from the business application, so it can serve as a distributed cache.</li>
<li>It supports a rich variety of data types: strings, hashes, lists, sets, and sorted sets.</li>
<li>It supports the publish/subscribe model, where publishers send messages to specified channels, and subscribers can receive and process these messages. This model is commonly used in real-time communication, event-driven systems, and message queues.</li>
<li>Redis transactions are not recommended as they are considered too limited.</li>
</ul>
<h2 id="2-publishsubscribe-model">2 Publish/Subscribe Model</h2>
<ol>
<li>Messages in the channel are not received before the subscriber starts.</li>
<li>Broadcast effect.</li>
</ol>

    <img src="/images/introduction-to-redis-pubsub.png"  alt="pubsub"  class="center"  style="border-radius: 20px; width: 100%;"  />


<h2 id="3-distributed-lock">3 Distributed Lock</h2>
<ol>
<li><code>SetNX(ctx context.Context, key string, value interface{}, expiration time.Duration) *BoolCmd</code></li>
<li>SetNX returns true and writes the key with an expiration time if the key does not exist.</li>
</ol>

    <img src="/images/introduction-to-redis-distributed-key.png"  alt="distributed-key"  class="center"  style="border-radius: 20px; width: 100%;"  />


<p>Example code for iPhone flash sale:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">TryLock</span>(<span style="color:#a6e22e">rc</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">redis</span>.<span style="color:#a6e22e">Client</span>, <span style="color:#a6e22e">key</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">expire</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Duration</span>) <span style="color:#66d9ef">bool</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">cmd</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">rc</span>.<span style="color:#a6e22e">SetNX</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#a6e22e">key</span>, <span style="color:#e6db74">&#34;anything is ok&#34;</span>, <span style="color:#a6e22e">expire</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">cmd</span>.<span style="color:#a6e22e">Err</span>(); <span style="color:#a6e22e">err</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">cmd</span>.<span style="color:#a6e22e">Val</span>()
</span></span><span style="display:flex;"><span>	} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">ReleaseLock</span>(<span style="color:#a6e22e">rc</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">redis</span>.<span style="color:#a6e22e">Client</span>, <span style="color:#a6e22e">key</span> <span style="color:#66d9ef">string</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">rc</span>.<span style="color:#a6e22e">Del</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#a6e22e">key</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">LockRace2</span>(<span style="color:#a6e22e">client</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">redis</span>.<span style="color:#a6e22e">Client</span>, <span style="color:#a6e22e">storage</span> <span style="color:#66d9ef">int</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">keyLock</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;lock&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">keyStorage</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;store&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">Set</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#a6e22e">keyStorage</span>, <span style="color:#a6e22e">storage</span>, <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">ReleaseLock</span>(<span style="color:#a6e22e">client</span>, <span style="color:#a6e22e">keyLock</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">Del</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#a6e22e">keyStorage</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">P</span> = <span style="color:#ae81ff">1000</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">wg</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">sync</span>.<span style="color:#a6e22e">WaitGroup</span>{}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Add</span>(<span style="color:#a6e22e">P</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">start</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">P</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">i</span> <span style="color:#66d9ef">int</span>) {
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Done</span>()
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Sleep</span>(<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Duration</span>(<span style="color:#a6e22e">rand</span>.<span style="color:#a6e22e">Intn</span>(<span style="color:#ae81ff">100</span>)) <span style="color:#f92672">*</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Millisecond</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">TryLock</span>(<span style="color:#a6e22e">client</span>, <span style="color:#a6e22e">keyLock</span>, <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">v</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">client</span>.<span style="color:#a6e22e">IncrBy</span>(<span style="color:#a6e22e">context</span>.<span style="color:#a6e22e">Background</span>(), <span style="color:#a6e22e">keyStorage</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>).<span style="color:#a6e22e">Val</span>(); <span style="color:#a6e22e">v</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span> {
</span></span><span style="display:flex;"><span>					<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;%d gets the No.%d iPhone! Use %v!\n&#34;</span>, <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">v</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>().<span style="color:#a6e22e">Sub</span>(<span style="color:#a6e22e">start</span>))
</span></span><span style="display:flex;"><span>				}
</span></span><span style="display:flex;"><span>				<span style="color:#a6e22e">ReleaseLock</span>(<span style="color:#a6e22e">client</span>, <span style="color:#a6e22e">keyLock</span>)
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>		}(<span style="color:#a6e22e">i</span>)
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">wg</span>.<span style="color:#a6e22e">Wait</span>()
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="4-memory-eviction-mechanism">4 Memory Eviction Mechanism</h2>
<ol>
<li>LRU (Least Recently Used): Based on a linked list structure, elements in the list are arranged in the order of operations. The most recently operated keys are moved to the head of the list. When memory eviction is needed, the elements at the tail of the list are deleted.</li>
<li>LFU (Least Frequently Used): The basic assumption is that data accessed frequently in the past will also be accessed more frequently in the future, so the keys with the lowest usage frequency in the past are evicted. Redis uses a complex but efficient method to approximate LFU.</li>
<li>LFU is more reasonable than LRU but more complex to implement.</li>
</ol>

    <img src="/images/introduction-to-redis-memory.png"  alt="memory"  class="center"  style="border-radius: 20px; width: 100%;"  />


<h2 id="5-common-application-scenarios">5 Common Application Scenarios</h2>
<ul>
<li><strong>General Principle:</strong> Redis is an order of magnitude faster than MySQL but less reliable. It is suitable for storing data that requires high-frequency reads and writes, has a short lifecycle, and is not critically important to users.</li>
<li><strong>Counter:</strong> <code>Incr(ctx context.Context, key string)</code> increments the counter for the corresponding key, such as video views or inventory in a flash sale scenario. <code>INCRBY</code> can increment by any value, including negative numbers.</li>
<li><strong>Cache:</strong> Frequently accessed MySQL data can be stored in Redis, with keys corresponding to IDs and values as JSON strings. This reduces MySQL load and improves API response speed.</li>
<li><strong>Session Cache:</strong> Session IDs are used to mark successful user logins. Logins and subsequent operations may hit different servers, so session IDs need to be stored in distributed cache. Search/recommendation result lists are stored in cache and read from cache when paging.</li>
<li><strong>Distributed Lock:</strong> In a distributed system, scheduled tasks only need to be executed by one server. Whoever acquires the lock executes the task and releases the lock before the next cycle.</li>
<li><strong>Publish/Subscribe Function:</strong> Redis can be used for small-scale event notifications, while Kafka is more suitable for large-scale message passing.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>ORM Realized by Reflect</title>
            <link>https://Greenery-S.github.io/posts/go/database/orm-realized-by-reflect/</link>
            <pubDate>Sun, 19 May 2024 21:50:59 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/posts/go/database/orm-realized-by-reflect/</guid>
            <description>Core Technology of ORM—Reflection Tutorial, Reflection Guide: https://zhuanlan.zhihu.com/p/411313885
code: https://github.com/Greenery-S/go-database/tree/master/orm
1 Reflection What is Reflection
Reflection is the ability to inspect and modify an object’s type information and memory structure, update variables, and call methods during runtime (not compile time). When to Use Reflection
When a function’s parameter type is interface{}, and you need to determine the original type at runtime to handle different types accordingly. For example, json.Marshal(v interface{}). When you need to dynamically decide which function to call at runtime based on certain conditions, such as executing the appropriate operator function based on a configuration file.</description>
            <content type="html"><![CDATA[<h1 id="core-technology-of-ormreflection">Core Technology of ORM—Reflection</h1>
<blockquote>
<p>Tutorial, Reflection Guide: <a href="https://zhuanlan.zhihu.com/p/411313885">https://zhuanlan.zhihu.com/p/411313885</a></p>
<p>code: <a href="https://github.com/Greenery-S/go-database/tree/master/orm">https://github.com/Greenery-S/go-database/tree/master/orm</a></p>
</blockquote>
<h2 id="1-reflection">1 Reflection</h2>
<p><strong>What is Reflection</strong></p>
<ul>
<li>Reflection is the ability to inspect and modify an object’s type information and memory structure, update variables, and call methods during <strong>runtime</strong> (not compile time).</li>
</ul>
<p><strong>When to Use Reflection</strong></p>
<ul>
<li>When a function’s parameter type is <code>interface{}</code>, and you need to determine the original type at runtime to handle different types accordingly. For example, <code>json.Marshal(v interface{})</code>.</li>
<li>When you need to dynamically decide which function to call at runtime based on certain conditions, such as executing the appropriate operator function based on a configuration file.</li>
<li>It is recommended to use reflection during the initialization phase. Avoid using it frequently in API calls due to performance concerns.</li>
</ul>
<h2 id="2-usage-examples">2 Usage Examples</h2>

    <img src="/images/orm-realized-by-reflect-example.png"  alt="show-table"  class="center"  style="border-radius: 10px; width: 80%;"  />


<h2 id="3-drawbacks-of-reflection">3 Drawbacks of Reflection</h2>
<ol>
<li>Code readability and maintainability are poor.</li>
<li>Type errors cannot be detected during compilation, making comprehensive testing challenging. Some bugs may only be discovered after prolonged runtime in production, potentially causing severe consequences.</li>
<li>Reflection performance is poor, typically one to two orders of magnitude slower than regular code. Avoid using reflection in performance-critical or frequently called code blocks.</li>
</ol>
<h2 id="4-basic-data-types-of-reflection">4 Basic Data Types of Reflection</h2>

    <img src="/images/orm-realized-by-reflect-data-type.png"  alt="show-table"  class="center"  style="border-radius: 10px; width: 80%;"  />


<p><strong>reflect.Type</strong> – Retrieve type-related information using <code>reflect.Type</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Type</span> <span style="color:#66d9ef">interface</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">MethodByName</span>(<span style="color:#66d9ef">string</span>) (<span style="color:#a6e22e">Method</span>, <span style="color:#66d9ef">bool</span>) <span style="color:#75715e">// Retrieve method by name
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">Name</span>() <span style="color:#66d9ef">string</span>   <span style="color:#75715e">// Get the struct name
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">PkgPath</span>() <span style="color:#66d9ef">string</span> <span style="color:#75715e">// Package path
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">Size</span>() <span style="color:#66d9ef">uintptr</span>  <span style="color:#75715e">// Memory size
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">Kind</span>() <span style="color:#a6e22e">Kind</span>  <span style="color:#75715e">// Data type
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">Implements</span>(<span style="color:#a6e22e">u</span> <span style="color:#a6e22e">Type</span>) <span style="color:#66d9ef">bool</span>  <span style="color:#75715e">// Check if it implements an interface
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">Field</span>(<span style="color:#a6e22e">i</span> <span style="color:#66d9ef">int</span>) <span style="color:#a6e22e">StructField</span>  <span style="color:#75715e">// Retrieve the i-th field
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">FieldByIndex</span>(<span style="color:#a6e22e">index</span> []<span style="color:#66d9ef">int</span>) <span style="color:#a6e22e">StructField</span>  <span style="color:#75715e">// Retrieve nested field by index path
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">FieldByName</span>(<span style="color:#a6e22e">name</span> <span style="color:#66d9ef">string</span>) (<span style="color:#a6e22e">StructField</span>, <span style="color:#66d9ef">bool</span>)  <span style="color:#75715e">// Retrieve field by name
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">Len</span>() <span style="color:#66d9ef">int</span>  <span style="color:#75715e">// Container length
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">NumIn</span>() <span style="color:#66d9ef">int</span>  <span style="color:#75715e">// Number of input parameters
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">NumOut</span>() <span style="color:#66d9ef">int</span>  <span style="color:#75715e">// Number of return parameters
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p><strong>reflect.Value</strong> – Retrieve and modify values within the original data type using <code>reflect.Value</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Value</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// The type represented by this value
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">typ</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">rtype</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Pointer to the original data
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">ptr</span> <span style="color:#a6e22e">unsafe</span>.<span style="color:#a6e22e">Pointer</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="5-retrieving-field-information">5 Retrieving Field Information</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">typeUser</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">reflect</span>.<span style="color:#a6e22e">TypeOf</span>(<span style="color:#a6e22e">User</span>{})
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">typeUser</span>.<span style="color:#a6e22e">NumField</span>(); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> { <span style="color:#75715e">// Number of fields
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">field</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">typeUser</span>.<span style="color:#a6e22e">Field</span>(<span style="color:#a6e22e">i</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Printf</span>(<span style="color:#e6db74">&#34;%s offset %d anonymous %t type %s exported %t json tag %s\n&#34;</span>, 
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">field</span>.<span style="color:#a6e22e">Name</span>, <span style="color:#75715e">// Field name
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">field</span>.<span style="color:#a6e22e">Offset</span>, <span style="color:#75715e">// Memory offset from the struct&#39;s start address; string type occupies 16 bytes
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">field</span>.<span style="color:#a6e22e">Anonymous</span>, <span style="color:#75715e">// Is it an anonymous field
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">field</span>.<span style="color:#a6e22e">Type</span>, <span style="color:#75715e">// Data type, of type reflect.Type
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">field</span>.<span style="color:#a6e22e">IsExported</span>(), <span style="color:#75715e">// Is it visible outside the package (i.e., starts with an uppercase letter)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">field</span>.<span style="color:#a6e22e">Tag</span>.<span style="color:#a6e22e">Get</span>(<span style="color:#e6db74">&#34;json&#34;</span>)) <span style="color:#75715e">// Retrieve the tag defined after the field in ``
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><h2 id="6-principles-of-orm-implementation">6 Principles of ORM Implementation</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">User</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Id</span>         <span style="color:#66d9ef">int</span>    <span style="color:#e6db74">`gorm:&#34;column:id;primaryKey&#34;`</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Gender</span>     <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`gorm:&#34;column:sex&#34;`</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Name</span>       <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`gorm:&#34;-&#34;`</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">FamilyName</span> <span style="color:#66d9ef">string</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><ol>
<li>Ignore fields marked with <code>gorm:&quot;-&quot;</code></li>
<li>Retrieve the content after <code>gorm</code> from <code>field.Tag.Get(&quot;gorm&quot;)</code></li>
<li>Remove the prefix <code>&quot;column:&quot;</code></li>
<li>Split the string by <code>;</code> and take the first part</li>
<li>Fields without an explicit <code>gorm</code> tag will be converted to snake case, corresponding to the MySQL table column</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">GetGormFields</span>(<span style="color:#a6e22e">stc</span> <span style="color:#66d9ef">interface</span>{}) []<span style="color:#66d9ef">string</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">value</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">reflect</span>.<span style="color:#a6e22e">ValueOf</span>(<span style="color:#a6e22e">stc</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">typ</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">value</span>.<span style="color:#a6e22e">Type</span>()
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">columns</span> <span style="color:#f92672">:=</span> make([]<span style="color:#66d9ef">string</span>, <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">value</span>.<span style="color:#a6e22e">NumField</span>())
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">value</span>.<span style="color:#a6e22e">NumField</span>(); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">fieldType</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">typ</span>.<span style="color:#a6e22e">Field</span>(<span style="color:#a6e22e">i</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Skip fields not mapped to ORM
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">fieldType</span>.<span style="color:#a6e22e">Tag</span>.<span style="color:#a6e22e">Get</span>(<span style="color:#e6db74">&#34;gorm&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;-&#34;</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Convert camel case to snake case if there is no gorm tag
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#a6e22e">name</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">util</span>.<span style="color:#a6e22e">Camel2Snake</span>(<span style="color:#a6e22e">fieldType</span>.<span style="color:#a6e22e">Name</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> len(<span style="color:#a6e22e">fieldType</span>.<span style="color:#a6e22e">Tag</span>.<span style="color:#a6e22e">Get</span>(<span style="color:#e6db74">&#34;gorm&#34;</span>)) &gt; <span style="color:#ae81ff">0</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">content</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">fieldType</span>.<span style="color:#a6e22e">Tag</span>.<span style="color:#a6e22e">Get</span>(<span style="color:#e6db74">&#34;gorm&#34;</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">HasPrefix</span>(<span style="color:#a6e22e">content</span>, <span style="color:#e6db74">&#34;column:&#34;</span>) {
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">content</span> = <span style="color:#a6e22e">content</span>[<span style="color:#ae81ff">7</span>:]
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">pos</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">Index</span>(<span style="color:#a6e22e">content</span>, <span style="color:#e6db74">&#34;;&#34;</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">pos</span> &gt; <span style="color:#ae81ff">0</span> {
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">name</span> = <span style="color:#a6e22e">content</span>[:<span style="color:#a6e22e">pos</span>]
</span></span><span style="display:flex;"><span>                } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">pos</span> &lt; <span style="color:#ae81ff">0</span> {
</span></span><span style="display:flex;"><span>                    <span style="color:#a6e22e">name</span> = <span style="color:#a6e22e">content</span>
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">columns</span> = append(<span style="color:#a6e22e">columns</span>, <span style="color:#a6e22e">name</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">columns</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>MySQL Optimization</title>
            <link>https://Greenery-S.github.io/posts/go/database/mysql-optimization/</link>
            <pubDate>Sun, 19 May 2024 21:16:35 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/posts/go/database/mysql-optimization/</guid>
            <description>MySQL Performance Tuning code: https://github.com/Greenery-S/go-database/tree/master/mysql
1 Practical Recommendations Always use lowercase when writing SQL.
Check if a table already exists before creating it using if not exists.
Add comment to all columns and tables.
Use char for short strings to benefit from fixed length and memory alignment, which improves read/write performance. varchar fields may cause memory fragmentation with frequent modifications.
Use shorter data types whenever possible, e.g., tinyint vs int, float vs double, date vs datetime.</description>
            <content type="html"><![CDATA[<h1 id="mysql-performance-tuning">MySQL Performance Tuning</h1>
<blockquote>
<p>code: <a href="https://github.com/Greenery-S/go-database/tree/master/mysql">https://github.com/Greenery-S/go-database/tree/master/mysql</a></p>
</blockquote>
<h3 id="1-practical-recommendations">1 Practical Recommendations</h3>
<ul>
<li>
<p>Always use lowercase when writing SQL.</p>
</li>
<li>
<p>Check if a table already exists before creating it using <code>if not exists</code>.</p>
</li>
<li>
<p>Add <code>comment</code> to all columns and tables.</p>
</li>
<li>
<p>Use <code>char</code> for short strings to benefit from fixed length and memory alignment, which improves read/write performance. <code>varchar</code> fields may cause memory fragmentation with frequent modifications.</p>
</li>
<li>
<p>Use shorter data types whenever possible, e.g., <code>tinyint</code> vs <code>int</code>, <code>float</code> vs <code>double</code>, <code>date</code> vs <code>datetime</code>.</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">exists</span> <span style="color:#f92672">`</span>student<span style="color:#f92672">`</span> (
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">`</span>id<span style="color:#f92672">`</span> int(<span style="color:#ae81ff">11</span>) <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span> AUTO_INCREMENT <span style="color:#66d9ef">COMMENT</span> <span style="color:#e6db74">&#39;Primary key auto-increment id&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">`</span>name<span style="color:#f92672">`</span> char(<span style="color:#ae81ff">10</span>) <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span> <span style="color:#66d9ef">COMMENT</span> <span style="color:#e6db74">&#39;Name&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">`</span>province<span style="color:#f92672">`</span> char(<span style="color:#ae81ff">6</span>) <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span> <span style="color:#66d9ef">COMMENT</span> <span style="color:#e6db74">&#39;Province&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">`</span>city<span style="color:#f92672">`</span> char(<span style="color:#ae81ff">10</span>) <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span> <span style="color:#66d9ef">COMMENT</span> <span style="color:#e6db74">&#39;City&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">`</span>addr<span style="color:#f92672">`</span> varchar(<span style="color:#ae81ff">100</span>) <span style="color:#66d9ef">DEFAULT</span> <span style="color:#e6db74">&#39;&#39;</span> <span style="color:#66d9ef">COMMENT</span> <span style="color:#e6db74">&#39;Address&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">`</span>score<span style="color:#f92672">`</span> float <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span> <span style="color:#66d9ef">DEFAULT</span> <span style="color:#e6db74">&#39;0&#39;</span> <span style="color:#66d9ef">COMMENT</span> <span style="color:#e6db74">&#39;Exam score&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">`</span>enrollment<span style="color:#f92672">`</span> date <span style="color:#66d9ef">NOT</span> <span style="color:#66d9ef">NULL</span> <span style="color:#66d9ef">COMMENT</span> <span style="color:#e6db74">&#39;Enrollment date&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">PRIMARY</span> <span style="color:#66d9ef">KEY</span> (<span style="color:#f92672">`</span>id<span style="color:#f92672">`</span>),
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">UNIQUE</span> <span style="color:#66d9ef">KEY</span> <span style="color:#f92672">`</span>idx_name<span style="color:#f92672">`</span> (<span style="color:#f92672">`</span>name<span style="color:#f92672">`</span>),
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">KEY</span> <span style="color:#f92672">`</span>idx_location<span style="color:#f92672">`</span> (<span style="color:#f92672">`</span>province<span style="color:#f92672">`</span>,<span style="color:#f92672">`</span>city<span style="color:#f92672">`</span>)
</span></span><span style="display:flex;"><span>) ENGINE<span style="color:#f92672">=</span>InnoDB AUTO_INCREMENT<span style="color:#f92672">=</span><span style="color:#ae81ff">100020</span> <span style="color:#66d9ef">DEFAULT</span> CHARSET<span style="color:#f92672">=</span>utf8 <span style="color:#66d9ef">COMMENT</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Student basic information&#39;</span>;
</span></span></code></pre></div><h2 id="2-null">2 null</h2>
<ul>
<li>
<p><code>default null</code> differs from <code>default ''</code> and <code>default 0</code>.</p>
</li>
<li>
<p><code>is null</code>, <code>is not null</code> differ from <code>!= ''</code>, <code>!= 0</code>.</p>
</li>
<li>
<p>Set fields to <code>not null</code> whenever possible:</p>
<ul>
<li>Some DB indexes do not allow null values.</li>
<li>Statistics on columns with null values may be inaccurate.</li>
<li>Null values can sometimes severely degrade system performance.</li>
</ul>
</li>
</ul>
<h2 id="3-avoiding-slow-queries-eg-1s">3 Avoiding Slow Queries (e.g., &gt;1s)</h2>
<ul>
<li>Most slow queries result from improper index usage.</li>
<li>Avoid creating too many indexes, as it slows down writes.</li>
<li>Use the default InnoDB engine in most cases, rather than MyISAM.</li>
<li>Avoid <code>select *</code>, only select the columns you need.</li>
<li>Use <code>in</code> instead of <code>or</code> when possible, as <code>in</code> is more efficient.</li>
<li>Limit the number of elements in <code>in</code> to 300-500.</li>
<li>Avoid model queries like <code>like</code>, as they cannot use indexes effectively.</li>
<li>Use <code>limit 1</code> if you are sure the result is a single row, to avoid full table scans.</li>
<li><code>limit m,n</code> retrieves the first m+n rows but only returns the last n rows. Use <code>id&gt;x</code> to replace this pagination method.</li>
<li>Batch operations in a single SQL statement or as a single transaction to reduce contention on shared resources.</li>
<li>Avoid large transactions; use small transactions to reduce lock waiting and contention.</li>
<li>Limit the number of rows queried or updated at once to around 1000.</li>
<li>Avoid join operations; handle join logic in application code.</li>
<li>Do not use MySQL built-in functions as they do not utilize query caching; handle complex logic in your code.</li>
</ul>
<h2 id="4-b-tree">4 B+ Tree</h2>
<ol>
<li>B stands for Balance. In an m-ary tree, each node has up to m data items and at least m/2 data items (except the root node).</li>
<li>Leaf nodes store all data and are linked for sequential access.</li>
<li>Each node is designed as a multiple of memory pages (4K). In MySQL, m=1200, so the first two levels of the tree are stored in memory.</li>
</ol>

    <img src="/images/mysql-optimization-bplustree.png"  alt="b&#43;tree"  class="center"  style="border-radius: 20px; width: 300px;"  />


<h2 id="5-indexes">5 Indexes</h2>
<ul>
<li>MySQL indexes use B+ trees by default.
<ul>
<li>Why not hashtable? 1) Not all data can be loaded into memory; 2) Not suitable for range queries.</li>
</ul>
</li>
<li>The primary key automatically gets indexed. The B+ tree built by the primary key contains data for all columns, whereas a normal index’s B+ tree stores only the primary key, requiring another lookup (back to the table).</li>
<li>The prefix of a composite index also functions as an index.</li>
<li>Use <code>explain</code> before SQL statements to check index usage.</li>
<li>If MySQL does not choose the optimal index plan, use <code>force index (index_name)</code> before <code>where</code>.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">show</span> <span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> student;
</span></span></code></pre></div>
    <img src="/images/mysql-optimization-show-table.png"  alt="show-table"  class="center"  style="border-radius: 10px; width: 100%;"  />


<h2 id="6-covering-indexes">6 Covering Indexes</h2>

    <img src="/images/mysql-optimization-cover-index.png"  alt="cover-index"  class="center"  style="border-radius: 10px; width: 300;"  />


<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">explain</span> <span style="color:#66d9ef">select</span> city <span style="color:#66d9ef">from</span> student <span style="color:#66d9ef">where</span> name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;张三&#39;</span> <span style="color:#66d9ef">and</span> province<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;北京&#39;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">explain</span> <span style="color:#66d9ef">select</span> city <span style="color:#66d9ef">from</span> student <span style="color:#66d9ef">force</span> <span style="color:#66d9ef">index</span> (idx_location) <span style="color:#66d9ef">where</span> name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;张三&#39;</span> <span style="color:#66d9ef">and</span> province<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;北京&#39;</span>;
</span></span></code></pre></div>
    <img src="/images/mysql-optimization-explain-select.png"  alt="cover-index"  class="center"  style="border-radius: 10px; width: 300;"  />


<ul>
<li>The first query needs to go back to the table.</li>
<li>The second SQL query only needs to query the <code>city</code>, and it hits the composite index (<code>province</code>, <code>city</code>), so it does not need to go back to the table. This is a covering index (hits a non-primary key index without needing to go back to the table).</li>
<li>The covering index will show &ldquo;Using index&rdquo; in the Extra field of the <code>explain</code> output.</li>
</ul>
<h2 id="7-sql-injection-attacks">7 SQL Injection Attacks</h2>
<p><strong>CASE 1</strong></p>
<ul>
<li><code>sql = &quot;select username, password from user where username='&quot; + username + &quot;' and password='&quot; + password + &quot;'&quot;;</code></li>
<li>Variables <code>username</code> and <code>password</code> come from the frontend input. If a user inputs <code>username</code> as lily and <code>password</code> as <code>aaa' or '1'='1</code>, the complete SQL would be <code>select username, password from user where username='lily' and password='aaa' or '1'='1'</code>.</li>
<li>This returns all records in the table. If the record count is greater than 0, login is allowed, so lily’s account is compromised.</li>
</ul>
<p><strong>CASE 2</strong></p>
<ul>
<li><code>sql=&quot;insert into student (name) values ('&quot; + username + &quot; ') &quot;;</code></li>
<li>The variable <code>username</code> comes from the frontend input. If the user inputs <code>username</code> as <code>lily'); drop table student;--</code>, the complete SQL would be <code>insert into student (name) values ('lily'); drop table student;--')</code>.</li>
<li>The comment <code>--</code> ignores the trailing <code>')</code>, deleting the entire table.</li>
</ul>
<h3 id="prevention-methods">Prevention Methods</h3>
<p><strong>Overall</strong></p>
<ul>
<li>Validate frontend inputs with regex and length checks.</li>
<li>Escape or encode special characters (e.g., &lt;&gt;&amp;*; &lsquo;&quot; etc.). Go’s <code>text/template</code> package function <code>HTMLEscapeString</code> can escape strings.</li>
<li>Avoid embedding user inputs directly in SQL statements; use <strong>parameterized queries</strong> like <code>Prepare</code>, <code>Query</code>, <code>Exec(query string, args ...interface{})</code>.</li>
<li>Use professional SQL injection detection tools such as sqlmap and SQLninja.</li>
<li><strong>Avoid displaying SQL error messages</strong> to prevent attackers from exploiting them.</li>
<li>No single method can prevent all SQL injection attacks; use a combination of methods.</li>
</ul>
<p><strong>Stmt</strong></p>
<ul>
<li>
<p>Define an SQL template: <code>stmt, err := db.Prepare(&quot;update student set score=score+? where city=?&quot;)</code>.</p>
</li>
<li>
<p>Use the template multiple times:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">stmt</span>.<span style="color:#a6e22e">Exec</span>(<span style="color:#ae81ff">10</span>, <span style="color:#e6db74">&#34;Shanghai&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">err</span> = <span style="color:#a6e22e">stmt</span>.<span style="color:#a6e22e">Exec</span>(<span style="color:#ae81ff">9</span>, <span style="color:#e6db74">&#34;Shenzhen&#34;</span>);
</span></span></code></pre></div></li>
<li>
<p>Avoid SQL concatenation (vulnerable to SQL injection and cannot leverage compilation optimization): <code>db.Where(fmt.Sprintf(&quot;merchant_id = %s&quot;, merchantId))</code>.</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">CREATE</span> <span style="color:#66d9ef">TABLE</span> <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">not</span> <span style="color:#66d9ef">exists</span> <span style="color:#f92672">`</span>login<span style="color:#f92672">`</span> (
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">`</span>username<span style="color:#f92672">`</span> varchar(<span style="color:#ae81ff">100</span>) <span style="color:#66d9ef">DEFAULT</span> <span style="color:#66d9ef">NULL</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">`</span>password<span style="color:#f92672">`</span> varchar(<span style="color:#ae81ff">100</span>) <span style="color:#66d9ef">DEFAULT</span> <span style="color:#66d9ef">NULL</span>
</span></span><span style="display:flex;"><span>) ENGINE<span style="color:#f92672">=</span>InnoDB <span style="color:#66d9ef">DEFAULT</span> CHARSET<span style="color:#f92672">=</span>latin1;
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#75715e">// Returns true if login is successful. Vulnerable to SQL injection.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">LoginUnsafe</span>(<span style="color:#a6e22e">db</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">DB</span>, <span style="color:#a6e22e">name</span>, <span style="color:#a6e22e">passwd</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">bool</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">cnt</span> <span style="color:#66d9ef">int64</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">Table</span>(<span style="color:#e6db74">&#34;login&#34;</span>).<span style="color:#a6e22e">Select</span>(<span style="color:#e6db74">&#34;*&#34;</span>).<span style="color:#a6e22e">Where</span>(<span style="color:#e6db74">&#34;username=&#39;&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">name</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&#39; and password=&#39;&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">passwd</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&#39;&#34;</span>).<span style="color:#a6e22e">Count</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">cnt</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">cnt</span> &gt; <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Returns true if login is successful. Protected against SQL injection.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">LoginSafe</span>(<span style="color:#a6e22e">db</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">DB</span>, <span style="color:#a6e22e">name</span>, <span style="color:#a6e22e">passwd</span> <span style="color:#66d9ef">string</span>) <span style="color:#66d9ef">bool</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">cnt</span> <span style="color:#66d9ef">int64</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">Table</span>(<span style="color:#e6db74">&#34;login&#34;</span>).<span style="color:#a6e22e">Select</span>(<span style="color:#e6db74">&#34;*&#34;</span>).<span style="color:#a6e22e">Where</span>(<span style="color:#e6db74">&#34;username=? and password=?&#34;</span>, <span style="color:#a6e22e">name</span>, <span style="color:#a6e22e">passwd</span>).<span style="color:#a6e22e">Count</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">cnt</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">cnt</span> &gt; <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">TestLoginUnsafe</span>(<span style="color:#a6e22e">t</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">testing</span>.<span style="color:#a6e22e">T</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">db</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">mysql</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">dsn</span>), <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">Config</span>{<span style="color:#a6e22e">PrepareStmt</span>: <span style="color:#66d9ef">true</span>}); <span style="color:#75715e">// Enforce PrepareStmt
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>    panic(<span style="color:#a6e22e">err</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">LoginUnsafe</span>(<span style="color:#a6e22e">db</span>, <span style="color:#e6db74">&#34;tom&#34;</span>, <span style="color:#e6db74">&#34;123456&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#66d9ef">false</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Fail</span>();
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">LoginUnsafe</span>(<span style="color:#a6e22e">db</span>, <span style="color:#e6db74">&#34;tom&#34;</span>, <span style="color:#e6db74">&#34;456789&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#66d9ef">true</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Fail</span>();
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// select * from login
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span> <span style="color:#a6e22e">where</span> <span style="color:#a6e22e">username</span>=<span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#a6e22e">tom</span><span style="color:#960050;background-color:#1e0010">&#39;</span> <span style="color:#a6e22e">and</span> <span style="color:#a6e22e">password</span>=<span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#ae81ff">456789</span><span style="color:#960050;background-color:#1e0010">&#39;</span> <span style="color:#a6e22e">or</span> <span style="color:#e6db74">&#39;1&#39;</span>=<span style="color:#e6db74">&#39;1&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">LoginUnsafe</span>(<span style="color:#a6e22e">db</span>, <span style="color:#e6db74">&#34;tom&#34;</span>, <span style="color:#e6db74">&#34;456789&#39; or &#39;1&#39;=&#39;1&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#66d9ef">false</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Fail</span>();
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">TestLoginSafe</span>(<span style="color:#a6e22e">t</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">testing</span>.<span style="color:#a6e22e">T</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">db</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">mysql</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">dsn</span>), <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">Config</span>{<span style="color:#a6e22e">PrepareStmt</span>: <span style="color:#66d9ef">true</span>}); <span style="color:#75715e">// Enforce PrepareStmt
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>    panic(<span style="color:#a6e22e">err</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">LoginSafe</span>(<span style="color:#a6e22e">db</span>, <span style="color:#e6db74">&#34;tom&#34;</span>, <span style="color:#e6db74">&#34;123456&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#66d9ef">false</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Fail</span>();
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">LoginSafe</span>(<span style="color:#a6e22e">db</span>, <span style="color:#e6db74">&#34;tom&#34;</span>, <span style="color:#e6db74">&#34;456789&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#66d9ef">true</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Fail</span>();
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">LoginSafe</span>(<span style="color:#a6e22e">db</span>, <span style="color:#e6db74">&#34;tom&#34;</span>, <span style="color:#e6db74">&#34;456789&#39; or &#39;1&#39;=&#39;1&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#66d9ef">true</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Fail</span>();
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>SQL Precompilation</strong></p>
<ul>
<li>
<p>DB execution of SQL involves three steps:</p>
<ol>
<li>Lexical and semantic analysis.</li>
<li>SQL statement optimization and execution plan formulation.</li>
<li>Execution and return of results.</li>
</ol>
</li>
<li>
<p>SQL precompilation replaces user inputs with placeholders (<code>?</code>), precompiles the template SQL, and injects user inputs at runtime.</p>
</li>
<li>
<p>This prevents SQL injection and allows caching of precompiled SQL statements, avoiding repeated analysis and optimization.</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">BenchmarkQueryWithoutPrepare</span>(<span style="color:#a6e22e">b</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">testing</span>.<span style="color:#a6e22e">B</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">client</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">mysql</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">dsn</span>), <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">Config</span>{}); <span style="color:#75715e">// PrepareStmt not specified
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>    panic(<span style="color:#a6e22e">err</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">ResetTimer</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">N</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">LoginUnsafe</span>(<span style="color:#a6e22e">client</span>, <span style="color:#a6e22e">name</span>, <span style="color:#a6e22e">passwd</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">BenchmarkQueryWithPrepare</span>(<span style="color:#a6e22e">b</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">testing</span>.<span style="color:#a6e22e">B</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">client</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">mysql</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#a6e22e">dsn</span>), <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">Config</span>{<span style="color:#a6e22e">PrepareStmt</span>: <span style="color:#66d9ef">true</span>}); <span style="color:#75715e">// Enforce PrepareStmt
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>    panic(<span style="color:#a6e22e">err</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">ResetTimer</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">b</span>.<span style="color:#a6e22e">N</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">LoginUnsafe</span>(<span style="color:#a6e22e">client</span>, <span style="color:#a6e22e">name</span>, <span style="color:#a6e22e">passwd</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>&gt; go test ./ -bench<span style="color:#f92672">=</span>^BenchmarkQueryWith -run<span style="color:#f92672">=</span>^$ -count<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> -benchmem
</span></span><span style="display:flex;"><span>goos: darwin
</span></span><span style="display:flex;"><span>goarch: arm64
</span></span><span style="display:flex;"><span>pkg: dqq/database/mysql
</span></span><span style="display:flex;"><span>BenchmarkQueryWithoutPrepare-10             <span style="color:#ae81ff">7888</span>            <span style="color:#ae81ff">147138</span> ns/op            <span style="color:#ae81ff">3441</span> B/op         <span style="color:#ae81ff">54</span> allocs/op
</span></span><span style="display:flex;"><span>BenchmarkQueryWithPrepare-10                <span style="color:#ae81ff">8508</span>            <span style="color:#ae81ff">130443</span> ns/op            <span style="color:#ae81ff">3458</span> B/op         <span style="color:#ae81ff">55</span> allocs/op
</span></span><span style="display:flex;"><span>PASS
</span></span></code></pre></div><h2 id="8-pagination-queries">8 Pagination Queries</h2>
<ul>
<li><code>limit m,n</code> retrieves the first m+n rows but only returns the last n rows. Use <code>id&gt;x</code> to replace this pagination method.</li>
<li>Full table scan:
<ol>
<li>Directly selecting <code>* from table</code> is slow, violating the principle of not querying too many rows at once.</li>
<li>Pagination appears to query few rows, but it executes multiple full table scans.</li>
<li>Fix <code>page_size</code> and maintain the maximum queried <code>id (max_id)</code>. Query using <code>where id&gt;maxid limit page_size</code>, exiting the loop when the result is empty.</li>
</ol>
</li>
</ul>

    <img src="/images/mysql-optimization-pagenate.png"  alt="pagination"  class="center"  style="border-radius: 10px; width: 300;"  />


<h2 id="9-transactions">9 Transactions</h2>
<ul>
<li>Batch operations should be done in a single SQL statement; otherwise, bundle them in a transaction and commit once to reduce contention on shared resources.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> (
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">INSERT_COUNT</span> = <span style="color:#ae81ff">100000</span>;
</span></span><span style="display:flex;"><span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Insert one by one
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">InsertOneByOne</span>(<span style="color:#a6e22e">db</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">DB</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">begin</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">INSERT_COUNT</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">student</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">Student</span>{<span style="color:#a6e22e">Name</span>: <span style="color:#e6db74">&#34;Student&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Itoa</span>(<span style="color:#a6e22e">i</span>), <span style="color:#a6e22e">Province</span>: <span style="color:#e6db74">&#34;Beijing&#34;</span>, <span style="color:#a6e22e">City</span>: <span style="color:#e6db74">&#34;Beijing&#34;</span>, <span style="color:#a6e22e">Score</span>: <span style="color:#ae81ff">38</span>, <span style="color:#a6e22e">Enrollment</span>: <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>()};
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">Create</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">student</span>).<span style="color:#a6e22e">Error</span>; <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> { <span style="color:#75715e">// Note: pass the pointer of student
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;total&#34;</span>, <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Since</span>(<span style="color:#a6e22e">begin</span>));
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Insert within a transaction
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">InsertByTransaction1</span>(<span style="color:#a6e22e">db</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">DB</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">begin</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">tx</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">Begin</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">INSERT_COUNT</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">student</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">Student</span>{<span style="color:#a6e22e">Name</span>: <span style="color:#e6db74">&#34;Student&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Itoa</span>(<span style="color:#a6e22e">i</span>), <span style="color:#a6e22e">Province</span>: <span style="color:#e6db74">&#34;Beijing&#34;</span>, <span style="color:#a6e22e">City</span>: <span style="color:#e6db74">&#34;Beijing&#34;</span>, <span style="color:#a6e22e">Score</span>: <span style="color:#ae81ff">38</span>, <span style="color:#a6e22e">Enrollment</span>: <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>()};
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">Create</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">student</span>).<span style="color:#a6e22e">Error</span>; <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">Commit</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;total&#34;</span>, <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Since</span>(<span style="color:#a6e22e">begin</span>));
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Insert multiple rows at once within a transaction
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">InsertByTransaction2</span>(<span style="color:#a6e22e">db</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">gorm</span>.<span style="color:#a6e22e">DB</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">begin</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">tx</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">db</span>.<span style="color:#a6e22e">Begin</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">BATCH</span> = <span style="color:#ae81ff">100</span>; <span style="color:#75715e">// Insert multiple rows in a single SQL statement
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#a6e22e">INSERT_COUNT</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">BATCH</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">students</span> <span style="color:#f92672">:=</span> make([]<span style="color:#a6e22e">Student</span>, <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">BATCH</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">j</span> &lt; <span style="color:#a6e22e">BATCH</span>; <span style="color:#a6e22e">j</span><span style="color:#f92672">++</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">student</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">Student</span>{<span style="color:#a6e22e">Name</span>: <span style="color:#e6db74">&#34;Student&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">strconv</span>.<span style="color:#a6e22e">Itoa</span>(<span style="color:#a6e22e">i</span><span style="color:#f92672">+</span><span style="color:#a6e22e">j</span>), <span style="color:#a6e22e">Province</span>: <span style="color:#e6db74">&#34;Beijing&#34;</span>, <span style="color:#a6e22e">City</span>: <span style="color:#e6db74">&#34;Beijing&#34;</span>, <span style="color:#a6e22e">Score</span>: <span style="color:#ae81ff">38</span>, <span style="color:#a6e22e">Enrollment</span>: <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>()};
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">students</span> = append(<span style="color:#a6e22e">students</span>, <span style="color:#a6e22e">student</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">Create</span>(<span style="color:#f92672">&amp;</span><span style="color:#a6e22e">students</span>).<span style="color:#a6e22e">Error</span>; <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">err</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">tx</span>.<span style="color:#a6e22e">Commit</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;total&#34;</span>, <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Since</span>(<span style="color:#a6e22e">begin</span>));
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span><span style="color:#f92672">===</span> RUN   TestInsertOneByOne
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>total 1m55.652681166s
</span></span><span style="display:flex;"><span>--- PASS: TestInsertOneByOne <span style="color:#f92672">(</span>116.20s<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">===</span> RUN   TestInsertByTransaction1
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>total 27.29299825s
</span></span><span style="display:flex;"><span>--- PASS: TestInsertByTransaction1 <span style="color:#f92672">(</span>27.91s<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">===</span> RUN   TestInsertByTransaction2
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>total 3.226376333s
</span></span><span style="display:flex;"><span>--- PASS: TestInsertByTransaction2 <span style="color:#f92672">(</span>4.20s<span style="color:#f92672">)</span>
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>How to Maintain the Site</title>
            <link>https://Greenery-S.github.io/posts/hugo/site-building/how-to-maintain-the-site/</link>
            <pubDate>Sun, 19 May 2024 02:32:11 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/posts/hugo/site-building/how-to-maintain-the-site/</guid>
            <description>How to Maintain a Blog with Hugo and GitHub GitHub Pages is an excellent platform for hosting blogs. It allows you to maintain your blog using Git, making it particularly suitable for programmers, as most of us are familiar with Git.
Hugo is a great static site generator that lets you create static websites using Markdown files. This method is ideal for programmers since most of us are comfortable with Markdown.</description>
            <content type="html"><![CDATA[<h1 id="how-to-maintain-a-blog-with-hugo-and-github">How to Maintain a Blog with Hugo and GitHub</h1>
<p><a href="https://pages.github.com/">GitHub Pages</a> is an excellent platform for hosting blogs. It allows you to maintain your blog using Git, making it particularly suitable for programmers, as most of us are familiar with Git.</p>
<p><a href="https://gohugo.io/">Hugo</a> is a great static site generator that lets you create static websites using Markdown files. This method is ideal for programmers since most of us are comfortable with Markdown.</p>
<p>This article will teach you how to maintain your blog using Hugo and GitHub.</p>
<h2 id="install-hugo-and-git">Install Hugo and Git</h2>
<p>First, you need to install Hugo and Git. You can install them using the following commands:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Install Hugo</span>
</span></span><span style="display:flex;"><span>brew install hugo
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Install Git</span>
</span></span><span style="display:flex;"><span>brew install git
</span></span></code></pre></div><h2 id="create-two-repositories-on-github">Create Two Repositories on GitHub</h2>
<p>You need to create two repositories on GitHub: one to store the source files of Hugo, and another to store the static website generated by Hugo.</p>
<p>The repository for storing the generated static website should be named <code>&lt;yourname.github.io&gt;</code>. This repository is public and is used to store your Hugo source files.</p>
<h2 id="initialize-the-website-project-locally">Initialize the Website Project Locally</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Initialize the Hugo project</span>
</span></span><span style="display:flex;"><span>hugo new site &lt;site-name&gt;
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Initialize the Git project</span>
</span></span><span style="display:flex;"><span>git init
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add the remote repository</span>
</span></span><span style="display:flex;"><span>git remote add origin &lt;your-site-source-repo&gt;
</span></span></code></pre></div><h2 id="create-preview-and-edit-posts">Create, Preview, and Edit Posts</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Create a post</span>
</span></span><span style="display:flex;"><span>hugo new posts/my-first-post.md
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Preview the site</span>
</span></span><span style="display:flex;"><span>hugo server -D
</span></span></code></pre></div><h2 id="change-themes">Change Themes</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Download the theme</span>
</span></span><span style="display:flex;"><span>git submodule add &lt;theme-url&gt; themes/&lt;theme-name&gt;
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Copy the configuration file</span>
</span></span><span style="display:flex;"><span>cp themes/&lt;theme-name&gt;/exampleSite/config.toml .
</span></span></code></pre></div><p>Configuration changes vary by theme, so refer to the theme&rsquo;s documentation. For example, if you&rsquo;re using the &lsquo;hello-friend-ng&rsquo; theme, it is recommended to:</p>
<ul>
<li>Place all posts in the <code>content/posts</code> directory.</li>
<li>Configure the <code>config.toml</code> file to modify the menu:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span>[[<span style="color:#a6e22e">menu</span>.<span style="color:#a6e22e">main</span>]]
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">identifier</span> = <span style="color:#e6db74">&#34;about&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#34;About&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">url</span> = <span style="color:#e6db74">&#34;posts/about&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">weight</span> = <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>[[<span style="color:#a6e22e">menu</span>.<span style="color:#a6e22e">main</span>]]
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">identifier</span> = <span style="color:#e6db74">&#34;site-building&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">name</span> = <span style="color:#e6db74">&#34;Site-building&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">url</span> = <span style="color:#e6db74">&#34;categories/hugo-site-building/&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">weight</span> = <span style="color:#ae81ff">5</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="publish-the-website-to-githubio">Publish the Website to GitHub.io</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Generate the static website</span>
</span></span><span style="display:flex;"><span>hugo
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Commit to GitHub</span>
</span></span><span style="display:flex;"><span>cd public
</span></span><span style="display:flex;"><span>git add .
</span></span><span style="display:flex;"><span>git commit -m <span style="color:#e6db74">&#34;add new post&#34;</span>
</span></span><span style="display:flex;"><span>git push origin master
</span></span></code></pre></div><p>You can then visit <code>https://&lt;yourname&gt;.github.io</code> to see your blog.</p>
<blockquote>
<p>Reference Links:</p>
<ul>
<li><a href="https://cuttontail.blog/blog/create-a-wesite-using-github-pages-and-hugo/">Tutorial</a></li>
</ul>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>About</title>
            <link>https://Greenery-S.github.io/posts/about/</link>
            <pubDate>Sun, 19 May 2024 01:10:01 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/posts/about/</guid>
            <description>About This Site This site is a blog based on Hugo, mainly used to document my studies and life.
Hugo is a static site generator written in Go. It is incredibly fast and supports Markdown syntax. It uses Go templates, so its usage is quite similar to other generators like Helm.
About Me I am a soon-to-be graduate student. I am studying for a master&amp;rsquo;s degree in Computer Engineering at NUS.</description>
            <content type="html"><![CDATA[<h1 id="about-this-site">About This Site</h1>
<p>This site is a blog based on Hugo, mainly used to document my studies and life.</p>
<p>Hugo is a static site generator written in Go. It is incredibly fast and supports Markdown syntax. It uses Go templates, so its usage is quite similar to other generators like Helm.</p>
<h1 id="about-me">About Me</h1>
<p>I am a soon-to-be graduate student. I am studying for a master&rsquo;s degree in Computer Engineering at NUS. My undergraduate degree is in Computer Science and Technology from a 985 university, where I ranked quite high, but I still feel there is much to learn. I wanted to see the world, so I came to Singapore.</p>

    <img src="/images/author.jpg"  alt="Hello Friend"  class="center"  style="border-radius: 20px; width: 200px;"  />


<p>Here is my resume:</p>
<ul>
<li><a href="/cv/cven.pdf">Resume PDF</a></li>
</ul>
<h2 id="my-tech-stack">My Tech Stack</h2>
<h3 id="programming-languages">Programming Languages</h3>
<ul>
<li><strong>C/C++</strong>: Used during my undergraduate studies for coursework, but I am not proficient. Recently, I&rsquo;ve been reviewing it on learncpp.com.</li>
<li><strong>Python</strong>: I&rsquo;ve written some data processing, machine learning, deep learning, and reinforcement learning code with Python and worked independently on several research projects. I am fairly familiar with it, though I don&rsquo;t particularly like Python&rsquo;s syntax, as it is not ideal for building reliable projects.</li>
<li><strong>Go</strong>: The first production-level language I mastered. I use it to write backend services, tools, scripts, crawlers, etc. I quite like Go&rsquo;s syntax, concurrency model, standard library, and toolchain.</li>
<li><strong>Java</strong>: Learned object-oriented programming with Java during my undergraduate studies. Bought a course on how2j during my sophomore year but haven&rsquo;t gotten around to it. I believe I could learn it within two weeks if I had the time.</li>
<li><strong>Shell</strong>: Used to write simple scripts for tasks like automated deployment, backups, and cleanup.</li>
<li><strong>JavaScript</strong>: Used for writing simple AJAX. Planning to learn TypeScript and React when I have time.</li>
<li><strong>Rust</strong>: A language I am very eager to learn, though I am hesitant due to job opportunities. I plan to learn it once my situation is more stable.</li>
</ul>
<h3 id="domain-knowledge">Domain Knowledge</h3>
<ul>
<li><strong>Backend Technologies</strong>: Mainly web development, distributed systems, databases, caching, message queues, etc.</li>
<li><strong>Cloud-Native Technologies</strong>: Mainly Kubernetes, Docker, Helm, ArgoCD, Argo Workflow, etc.</li>
<li><strong>Computer Networks</strong>: Mainly TCP/IP, HTTP, HTTPS, WebSocket, etc.</li>
<li><strong>Machine Learning</strong>: Deep learning, reinforcement learning. I&rsquo;ve worked with PyTorch, TensorFlow, Keras, etc.</li>
<li><strong>Data Analysis</strong>: Data processing, data visualization. Proficient with pandas, numpy, matplotlib, seaborn, etc.</li>
</ul>
<h3 id="in-progress">In Progress</h3>
<ul>
<li><strong>Leetcode Algorithms</strong>: Continuously practicing, seems endless&hellip;</li>
<li><strong>Go Projects</strong>: Working on some projects to systematically review Go&rsquo;s syntax and various data components.</li>
<li><strong>Kubernetes</strong>: Currently studying it, hoping to produce some articles about Kubernetes.</li>
<li><strong>C++</strong>: Currently reading, two chapters per week.</li>
<li><strong>Model-based Reinforcement Learning for Industrial Applications</strong>: Working on this project with my professor, almost ready to write a paper.</li>
</ul>
<h2 id="my-life">My Life</h2>
<p>In my spare time, I hang out with friends and recently went to Malaysia for a trip. I enjoy eating, playing games, and reading manga. Anyone else a fan of &ldquo;Baki&rdquo; and &ldquo;Kengan Ashura&rdquo;?</p>
]]></content>
        </item>
        
        <item>
            <title>English in Action</title>
            <link>https://Greenery-S.github.io/posts/english-learning/daily/english-in-action/</link>
            <pubDate>Sun, 19 May 2024 00:07:10 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/posts/english-learning/daily/english-in-action/</guid>
            <description>English Learning Daily When composing my blog, I initially write in Chinese and then translate the content into English. This approach allows me to practice English more effectively and gain a deeper understanding of the differences between Chinese and English.
While writing the blog, I have the opportunity to learn new English vocabulary and expressions. This method has proven to be highly beneficial for my language learning process.
I analyze the English translations provided by ChatGPT, noting the vocabulary, expressions, and grammar used.</description>
            <content type="html"><![CDATA[<h1 id="english-learning-daily">English Learning Daily</h1>
<p>When composing my blog, I initially write in Chinese and then translate the content into English. This approach allows me to practice English more effectively and gain a deeper understanding of the differences between Chinese and English.</p>
<p>While writing the blog, I have the opportunity to learn new English vocabulary and expressions. This method has proven to be highly beneficial for my language learning process.</p>
<p>I analyze the English translations provided by ChatGPT, noting the vocabulary, expressions, and grammar used. This analytical approach significantly enhances my English learning experience.</p>
<p>The articles in this series are named using the format: 20010203-english-in-blog.md, where 20010203 represents the date, and english-in-blog is the article title.</p>
]]></content>
        </item>
        
        <item>
            <title>Classification</title>
            <link>https://Greenery-S.github.io/posts/hugo/site-building/classification/</link>
            <pubDate>Sat, 18 May 2024 21:10:35 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/posts/hugo/site-building/classification/</guid>
            <description>Article Classification System The classification of articles is managed by two fields: tags and categories. Tags are used for more casual classifications, such as golang and gopher, while categories are used for more formal topic classifications, such as go-dual-token-blog-system.
The URLs for the lists of tags and categories are /tags/ and /categories/, respectively. These URLs are set in the navigation bar, making it easy to view all tags and categories.</description>
            <content type="html"><![CDATA[<h1 id="article-classification-system">Article Classification System</h1>
<p>The classification of articles is managed by two fields: tags and categories. Tags are used for more casual classifications, such as golang and gopher, while categories are used for more formal topic classifications, such as go-dual-token-blog-system.</p>
<p>The URLs for the lists of tags and categories are /tags/ and /categories/, respectively. These URLs are set in the navigation bar, making it easy to view all tags and categories.</p>
<p>One thing to note is that the default sorting method for these lists is by time, so it is advisable to avoid having too many tags and categories, as this could lead to a cluttered list page.</p>
<h2 id="tags">Tags</h2>
<p>The values for tags can be filled in freely, such as golang and gopher. Any semantic tag can be used. Tags are set in the front matter of markdown files and can have multiple tags.</p>
<p>It is recommended to use singular forms for tags, such as rule instead of rules, to avoid duplicate tags.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">tags</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#ae81ff">golang</span>
</span></span><span style="display:flex;"><span>- <span style="color:#ae81ff">gopher</span>
</span></span><span style="display:flex;"><span>- <span style="color:#ae81ff">hugo</span>
</span></span></code></pre></div><h2 id="categories">Categories</h2>
<p>The values for categories are used for topic classifications, such as go-project-dual-token-blog-system. They are set in the front matter of markdown files.</p>
<p>Categories are hierarchical; for example, go is a primary category, go-project is a secondary category, and go-project-dual-token-blog-system is a tertiary category. Subcategories must include their parent categories. For an article under the go-project-dual-token-blog-system category, the categories field should be filled out as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">categories</span>:
</span></span><span style="display:flex;"><span>- <span style="color:#ae81ff">go</span>
</span></span><span style="display:flex;"><span>- <span style="color:#ae81ff">go-project</span>
</span></span><span style="display:flex;"><span>- <span style="color:#ae81ff">go-project-dual-token-blog-system</span>
</span></span></code></pre></div><p>An article might fall under two main categories; for example, this article could be under both hugo and go main categories. Such dual categorization should be carefully considered and not done haphazardly.</p>
]]></content>
        </item>
        
        <item>
            <title>Two-Year Old Gopher</title>
            <link>https://Greenery-S.github.io/posts/go/two-year-old-gopher/</link>
            <pubDate>Sat, 18 May 2024 20:49:02 +0800</pubDate>
            
            <guid>https://Greenery-S.github.io/posts/go/two-year-old-gopher/</guid>
            <description>A Two-Year Go Language User I started learning Go language in October 2022, and now it has been two years. During this time, I have gained a certain level of understanding of Go and have had some practical experience using it in my work. I&amp;rsquo;d like to share some of my thoughts on Go.
Why Learn Go? I was choosing a technology that would help me establish myself in China’s internet industry.</description>
            <content type="html"><![CDATA[<h1 id="a-two-year-go-language-user">A Two-Year Go Language User</h1>
<p>I started learning Go language in October 2022, and now it has been two years. During this time, I have gained a certain level of understanding of Go and have had some practical experience using it in my work. I&rsquo;d like to share some of my thoughts on Go.</p>
<h2 id="why-learn-go">Why Learn Go?</h2>
<p>I was choosing a technology that would help me establish myself in China’s internet industry. The pandemic had just ended, and recent graduates were saying that the job market for Java was tough and it was hard to find work. As a junior in college, I decided to study abroad, and with two years left until graduation, I was quite confused. I asked my uncle, who is a seasoned programmer, for advice, and he suggested I try Go, which they were also using.</p>
<h2 id="the-long-learning-journey">The Long Learning Journey</h2>
<p>So, I began learning this language. I must thank him because, for a novice programmer, Go is very comfortable to learn. Both Go and Rust, as emerging languages, have very clear learning paths and almost no historical baggage, which is very friendly for beginners.</p>
<p>I learned Go’s syntax, concurrency, some data components’ Go SDKs, and various Go frameworks. I found Go’s concurrency very easy to use, its SDKs quite rich, and its frameworks numerous. I used Go at work to write some small tools and services.</p>
<p>I also attended GoCN&rsquo;s offline event in Beijing, where I met fellow Go enthusiasts. It was the first event after the pandemic, held in Beijing. The day before, I was still in Lhasa, but on a whim, I rushed to Beijing overnight and was kindly hosted by Jiang Da-ge. I was very happy during my time in Beijing.</p>
<p>The star projects of Go are Docker and Kubernetes (K8s), both written in Go. The success of these projects has given Go a prominent place in the cloud computing field, firmly establishing it alongside older, strong languages like Java and C++.</p>
<p>Later, I also studied cloud-native technologies, though I am still in the learning process. I feel I need to study them systematically because I am deeply involved in this field. Go has greatly helped me. I became an intern at TikTok Cloud Infra in Singapore, where I have learned a lot.</p>
<h2 id="the-road-ahead-is-long">The Road Ahead is Long</h2>
<p>Coming to Singapore and working with Go is the best arrangement for me. I may need to continue improving my Go skills, learn more cloud-native technologies, and perhaps study other things as well. But I believe I will keep going until I no longer enjoy this industry.</p>
<p>Of course, becoming a full-time employee from an intern requires significant effort. Given the circumstances, I need to study LeetCode algorithms, general backend technologies with Go, and Kubernetes-centric cloud-native technologies. I may also need to learn other languages and technologies, such as systematically studying C++ or PyTorch, to ensure my employability.</p>
<h2 id="what-will-this-topic-include">What Will This Topic Include?</h2>
<p>Currently, I plan to include some of the general backend knowledge points I have worked on in this Go series. In the near future, this Go series will include at least the following content:</p>
<ul>
<li><strong>Database Series</strong></li>
<li><strong>Message Queue Series</strong></li>
<li><strong>Security and Encryption Series</strong></li>
<li><strong>Network Programming Series</strong></li>
<li>Practice Projects:
<ul>
<li><strong>Blog System</strong>: Actually the predecessor of this website, a monolithic application based on the Gin framework, with all components including MySQL and Redis containerized. The authentication part designed a dual-token mechanism. Maintenance costs were high, so I switched to Hugo.</li>
<li><strong>Lottery System</strong>: This will be a practice project integrating high concurrency techniques.</li>
<li><strong>GPC Framework</strong>: An RPC framework based on Go, where I will implement a simple RPC framework.</li>
<li><strong>Distributed Search System</strong>: A more advanced practice project involving some knowledge of distributed systems.</li>
</ul>
</li>
</ul>
<p>The basic syntax of Go and its concurrency might not be included soon, as they are both very large topics and will take time to organize</p>
]]></content>
        </item>
        
    </channel>
</rss>
