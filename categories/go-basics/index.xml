<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go-Basics on Greenery&#39;s Blog Site</title>
    <link>https://Greenery-S.github.io/categories/go-basics/</link>
    <description>Recent content in Go-Basics on Greenery&#39;s Blog Site</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 22 May 2024 23:29:47 +0800</lastBuildDate>
    <atom:link href="https://Greenery-S.github.io/categories/go-basics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hash Function vs Symmetric Encryption</title>
      <link>https://Greenery-S.github.io/posts/go/encryption/hash-function-vs-symmetric-encryption/</link>
      <pubDate>Wed, 22 May 2024 23:29:47 +0800</pubDate>
      <guid>https://Greenery-S.github.io/posts/go/encryption/hash-function-vs-symmetric-encryption/</guid>
      <description>Core Differences between Symmetric Encryption and Hash Functions 1 Symmetric Encryption Purpose: Protect the confidentiality of data, preventing unauthorized access.&#xA;Working Principle: Utilizes the same key for both encryption and decryption of data.&#xA;Characteristics:&#xA;Reversibility: Decrypting ciphertext to retrieve the original data using the same key is possible. Key Management: Securely sharing the key is crucial, as data remains inaccessible without it. Applications: Secure communication, data storage, digital signatures, etc.</description>
    </item>
    <item>
      <title>File Encryption</title>
      <link>https://Greenery-S.github.io/posts/go/encryption/file-encryption/</link>
      <pubDate>Wed, 22 May 2024 17:42:47 +0800</pubDate>
      <guid>https://Greenery-S.github.io/posts/go/encryption/file-encryption/</guid>
      <description>File Encryption code: https://github.com/Greenery-S/go-encryption/tree/master/enc_file&#xA;1 Symmetric Encryption Every step of the encryption process is reversible The same set of keys is used for encryption and decryption XOR is the simplest symmetric encryption algorithm Typical symmetric encryption algorithms: DES (Data Encryption Standard), AES (Advanced Encryption Standard)&#xA;2 Group Encryption Group encryption: The original data (plaintext) is grouped, each group is 64 bits, and when the last group is less than 64 bits, it is filled according to certain rules.</description>
    </item>
    <item>
      <title>Introduction to Clickhouse</title>
      <link>https://Greenery-S.github.io/posts/go/database/introduction-to-clickhouse/</link>
      <pubDate>Wed, 22 May 2024 15:08:40 +0800</pubDate>
      <guid>https://Greenery-S.github.io/posts/go/database/introduction-to-clickhouse/</guid>
      <description>ClickHouse code: https://github.com/Greenery-S/go-database/tree/master/clickhouse&#xA;1 Introduction ClickHouse is a columnar database management system (DBMS) for online analytical processing (OLAP).&#xA;In traditional row-based database systems (MySQL, SQL Server), data in the same row is always physically stored together. In columnar database systems (ClickHouse, HBase, Druid), data from the same column is stored together.&#xA;Key characteristics of OLAP scenarios (statistical analysis based on event tracking data):&#xA;The vast majority are read requests, and data added to the database cannot be modified.</description>
    </item>
    <item>
      <title>Introduction to Mongo</title>
      <link>https://Greenery-S.github.io/posts/go/database/introduction-to-mongo/</link>
      <pubDate>Wed, 22 May 2024 01:23:35 +0800</pubDate>
      <guid>https://Greenery-S.github.io/posts/go/database/introduction-to-mongo/</guid>
      <description>MongoDB code: https://github.com/Greenery-S/go-database/tree/master/mongo&#xA;1 Introduction Mongo is a document-oriented database, and it contrasts with relational databases as follows. Mongo&amp;rsquo;s greatest feature is its schema flexibility, meaning you can store documents with completely different structures in the same collection. This is especially useful in the early stages of a project when the table fields are not yet stable. Compared to MySQL, Mongo is better suited for storing large, low-value data. The read and write performance for large documents is better in Mongo than in MySQL.</description>
    </item>
    <item>
      <title>Introduction to Redis</title>
      <link>https://Greenery-S.github.io/posts/go/database/introduction-to-redis/</link>
      <pubDate>Sun, 19 May 2024 22:11:16 +0800</pubDate>
      <guid>https://Greenery-S.github.io/posts/go/database/introduction-to-redis/</guid>
      <description>Redis Code: https://github.com/Greenery-S/go-database/tree/master/redis&#xA;1 Introduction Redis is an in-memory data storage system. Since it is based on memory, it is fast, being 10 to 100 times faster than MySQL. To prevent data loss, data is periodically persisted to disk. Redis is deployed separately from the business application, so it can serve as a distributed cache. It supports a rich variety of data types: strings, hashes, lists, sets, and sorted sets. It supports the publish/subscribe model, where publishers send messages to specified channels, and subscribers can receive and process these messages.</description>
    </item>
    <item>
      <title>ORM Realized by Reflect</title>
      <link>https://Greenery-S.github.io/posts/go/database/orm-realized-by-reflect/</link>
      <pubDate>Sun, 19 May 2024 21:50:59 +0800</pubDate>
      <guid>https://Greenery-S.github.io/posts/go/database/orm-realized-by-reflect/</guid>
      <description>Core Technology of ORM—Reflection Tutorial, Reflection Guide: https://zhuanlan.zhihu.com/p/411313885&#xA;code: https://github.com/Greenery-S/go-database/tree/master/orm&#xA;1 Reflection What is Reflection&#xA;Reflection is the ability to inspect and modify an object’s type information and memory structure, update variables, and call methods during runtime (not compile time). When to Use Reflection&#xA;When a function’s parameter type is interface{}, and you need to determine the original type at runtime to handle different types accordingly. For example, json.Marshal(v interface{}). When you need to dynamically decide which function to call at runtime based on certain conditions, such as executing the appropriate operator function based on a configuration file.</description>
    </item>
    <item>
      <title>MySQL Optimization</title>
      <link>https://Greenery-S.github.io/posts/go/database/mysql-optimization/</link>
      <pubDate>Sun, 19 May 2024 21:16:35 +0800</pubDate>
      <guid>https://Greenery-S.github.io/posts/go/database/mysql-optimization/</guid>
      <description>MySQL Performance Tuning code: https://github.com/Greenery-S/go-database/tree/master/mysql&#xA;1 Practical Recommendations Always use lowercase when writing SQL.&#xA;Check if a table already exists before creating it using if not exists.&#xA;Add comment to all columns and tables.&#xA;Use char for short strings to benefit from fixed length and memory alignment, which improves read/write performance. varchar fields may cause memory fragmentation with frequent modifications.&#xA;Use shorter data types whenever possible, e.g., tinyint vs int, float vs double, date vs datetime.</description>
    </item>
  </channel>
</rss>
